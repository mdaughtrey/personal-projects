



<!DOCTYPE html>
<html lang="en" class="no-js">
  <head>
    
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <meta http-equiv="x-ua-compatible" content="ie=edge">
      
        <meta name="description" content="Q for Mortals">
      
      
        <link rel="canonical" href="1_Q_Shock_and_Awe.1">
      
      
        <meta name="author" content="Jeffry Borror">
      
      
        <meta name="lang:clipboard.copy" content="Copy to clipboard">
      
        <meta name="lang:clipboard.copied" content="Copied to clipboard">
      
        <meta name="lang:search.language" content="en">
      
        <meta name="lang:search.pipeline.stopwords" content="True">
      
        <meta name="lang:search.pipeline.trimmer" content="True">
      
        <meta name="lang:search.result.none" content="No matching documents">
      
        <meta name="lang:search.result.one" content="1 matching document">
      
        <meta name="lang:search.result.other" content="# matching documents">
      
        <meta name="lang:search.tokenizer" content="[\s\-]+">
      
      <link rel="shortcut icon" href="img/favicon.ico">
      <meta name="generator" content="mkdocs-0.17.3, mkdocs-material-2.7.2">
    
    
      
        <title>1. Q Shock and Awe - Q for Mortals</title>
      
    
    
      <link rel="stylesheet" href="assets/stylesheets/application.8d40d89b.css">
      
        <link rel="stylesheet" href="assets/stylesheets/application-palette.6079476c.css">
      
    
    
      <script src="assets/javascripts/modernizr.1aa3b519.js"></script>
    
    
      <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
      
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,400i,700|Roboto+Mono">
        <style>body,input{font-family:"Roboto","Helvetica Neue",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:"Roboto Mono","Courier New",Courier,monospace}</style>
      
      <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    
    
      <link rel="stylesheet" href="stylesheets/extra.css">
    
      <link rel="stylesheet" href="http://code.kx.com/stylesheets/prism.css">
    
    
  </head>
  
    
    
    <body dir="ltr" data-md-color-primary="blue" data-md-color-accent="deep-orange">
  
    <svg class="md-svg">
      <defs>
        
        
      </defs>
    </svg>
    <input class="md-toggle" data-md-toggle="drawer" type="checkbox" id="drawer" autocomplete="off">
    <input class="md-toggle" data-md-toggle="search" type="checkbox" id="search" autocomplete="off">
    <label class="md-overlay" data-md-component="overlay" for="drawer"></label>
    
      <a href="1_Q_Shock_and_Awe.1#1-q-shock-and-awe" tabindex="1" class="md-skip">
        Skip to content
      </a>
    
    
      <header class="md-header" data-md-component="header">
  <nav class="md-header-nav md-grid">
    <div class="md-flex">
      <div class="md-flex__cell md-flex__cell--shrink">
        <a href="http://code.kx.com/q4m3" title="Q for Mortals" class="md-header-nav__button md-logo">
          
            <img src="img/qfm3.jpg" width="24" height="24">
          
        </a>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        <label class="md-icon md-icon--menu md-header-nav__button" for="drawer"></label>
      </div>
      <div class="md-flex__cell md-flex__cell--stretch">
        <div class="md-flex__ellipsis md-header-nav__title" data-md-component="title">
          
            
              <span class="md-header-nav__topic">
                Q for Mortals
              </span>
              <span class="md-header-nav__topic">
                1. Q Shock and Awe
              </span>
            
          
        </div>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        
          
            <label class="md-icon md-icon--search md-header-nav__button" for="search"></label>
            
<div class="md-search" data-md-component="search" role="dialog">
  <label class="md-search__overlay" for="search"></label>
  <div class="md-search__inner" role="search">
    <form class="md-search__form" name="search">
      <input type="text" class="md-search__input" name="query" placeholder="Search" autocapitalize="off" autocorrect="off" autocomplete="off" spellcheck="false" data-md-component="query" data-md-state="active">
      <label class="md-icon md-search__icon" for="search"></label>
      <button type="reset" class="md-icon md-search__icon" data-md-component="reset" tabindex="-1">
        &#xE5CD;
      </button>
    </form>
    <div class="md-search__output">
      <div class="md-search__scrollwrap" data-md-scrollfix>
        <div class="md-search-result" data-md-component="result">
          <div class="md-search-result__meta">
            Type to start searching
          </div>
          <ol class="md-search-result__list"></ol>
        </div>
      </div>
    </div>
  </div>
</div>
          
        
      </div>
      
    </div>
  </nav>
</header>
    
    <div class="md-container">
      
        
      
      
      <main class="md-main">
        <div class="md-main__inner md-grid" data-md-component="container">
          
            
              <div class="md-sidebar md-sidebar--primary" data-md-component="navigation">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    <nav class="md-nav md-nav--primary" data-md-level="0">
  <label class="md-nav__title md-nav__title--site" for="drawer">
    <span class="md-nav__button md-logo">
      
        <img src="img/qfm3.jpg" width="48" height="48">
      
    </span>
    Q for Mortals
  </label>
  
  <ul class="md-nav__list" data-md-scrollfix>
    
      
      
      


  <li class="md-nav__item">
    <a href="redirect/index.html" title="code.kx.com" class="md-nav__link">
      code.kx.com
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="index.html" title="Contents" class="md-nav__link">
      Contents
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="preface/index.html" title="Preface" class="md-nav__link">
      Preface
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="0_Overview/index.html" title="0. Overview" class="md-nav__link">
      0. Overview
    </a>
  </li>

    
      
      
      

  


  <li class="md-nav__item md-nav__item--active">
    
    <input class="md-toggle md-nav__toggle" data-md-toggle="toc" type="checkbox" id="toc">
    
      
    
    
      <label class="md-nav__link md-nav__link--active" for="toc">
        1. Q Shock and Awe
      </label>
    
    <a href="1_Q_Shock_and_Awe.1" title="1. Q Shock and Awe" class="md-nav__link md-nav__link--active">
      1. Q Shock and Awe
    </a>
    
      
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#11-starting-q" title="1.1 Starting q" class="md-nav__link">
    1.1 Starting q
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#12-variables" title="1.2 Variables" class="md-nav__link">
    1.2 Variables
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#13-whitespace" title="1.3 Whitespace" class="md-nav__link">
    1.3 Whitespace
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#14-the-q-console" title="1.4 The Q Console" class="md-nav__link">
    1.4 The Q Console
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#15-comments" title="1.5 Comments" class="md-nav__link">
    1.5 Comments
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#16-assignment" title="1.6 Assignment" class="md-nav__link">
    1.6 Assignment
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#17-order-of-evaluation" title="1.7 Order of Evaluation" class="md-nav__link">
    1.7 Order of Evaluation
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#18-data-types-101" title="1.8 Data Types 101" class="md-nav__link">
    1.8 Data Types 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#19-lists-101" title="1.9 Lists 101" class="md-nav__link">
    1.9 Lists 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#110-functions-101" title="1.10 Functions 101" class="md-nav__link">
    1.10 Functions 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#111-functions-on-lists-101" title="1.11 Functions on Lists 101" class="md-nav__link">
    1.11 Functions on Lists 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#112-example-fibonacci-numbers" title="1.12 Example: Fibonacci Numbers" class="md-nav__link">
    1.12 Example: Fibonacci Numbers
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#113-example-newtons-method-for-nth-roots" title="1.13 Example: Newton's Method for nth Roots" class="md-nav__link">
    1.13 Example: Newton's Method for nth Roots
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#114-example-fifo-allocation" title="1.14 Example: FIFO Allocation" class="md-nav__link">
    1.14 Example: FIFO Allocation
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#115-dictionaries-and-tables-101" title="1.15 Dictionaries and Tables 101" class="md-nav__link">
    1.15 Dictionaries and Tables 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#116-q-sql-101" title="1.16 q-sql 101" class="md-nav__link">
    1.16 q-sql 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#117-example-trades-table" title="1.17 Example: Trades Table" class="md-nav__link">
    1.17 Example: Trades Table
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#118-file-io-101" title="1.18 File I/O 101" class="md-nav__link">
    1.18 File I/O 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#119-interprocess-communication-101" title="1.19 Interprocess Communication 101" class="md-nav__link">
    1.19 Interprocess Communication 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#120-example-asynchronous-callbacks" title="1.20 Example: Asynchronous Callbacks" class="md-nav__link">
    1.20 Example: Asynchronous Callbacks
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#121-websockets-101" title="1.21 Websockets 101" class="md-nav__link">
    1.21 Websockets 101
  </a>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
    
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="2_Basic_Data_Types_Atoms/index.html" title="2. Basic Data Types – Atoms" class="md-nav__link">
      2. Basic Data Types – Atoms
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="3_Lists.1" title="3. Lists" class="md-nav__link">
      3. Lists
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="4_Operators.1" title="4. Operators" class="md-nav__link">
      4. Operators
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="5_Dictionaries.1" title="5. Dictionaries" class="md-nav__link">
      5. Dictionaries
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="6_Functions.1" title="6. Functions" class="md-nav__link">
      6. Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="7_Transforming_Data/index.html" title="7. Transforming Data" class="md-nav__link">
      7. Transforming Data
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="8_Tables.1" title="8. Tables" class="md-nav__link">
      8. Tables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="9_Queries_q-sql.1" title="9. Queries – q-sql" class="md-nav__link">
      9. Queries – q-sql
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="10_Execution_Control/index.html" title="10. Execution Control" class="md-nav__link">
      10. Execution Control
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="11_IO.1" title="11. I/O" class="md-nav__link">
      11. I/O
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="12_Workspace_Organization.1" title="12. Workspace Organization" class="md-nav__link">
      12. Workspace Organization
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="13_Commands_and_System_Variables.1" title="13. Commands and System Variables" class="md-nav__link">
      13. Commands and System Variables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="14_Introduction_to_Kdb+.1" title="14. Introduction to Kdb+" class="md-nav__link">
      14. Introduction to Kdb+
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="A_Built-in_Functions.1" title="Appendix A. Built-in Functions" class="md-nav__link">
      Appendix A. Built-in Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="B_Error_Messages/index.html" title="Appendix B. Error Messages" class="md-nav__link">
      Appendix B. Error Messages
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="colophon/index.html" title="Colophon" class="md-nav__link">
      Colophon
    </a>
  </li>

    
  </ul>
</nav>
                  </div>
                </div>
              </div>
            
            
              <div class="md-sidebar md-sidebar--secondary" data-md-component="toc">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#11-starting-q" title="1.1 Starting q" class="md-nav__link">
    1.1 Starting q
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#12-variables" title="1.2 Variables" class="md-nav__link">
    1.2 Variables
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#13-whitespace" title="1.3 Whitespace" class="md-nav__link">
    1.3 Whitespace
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#14-the-q-console" title="1.4 The Q Console" class="md-nav__link">
    1.4 The Q Console
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#15-comments" title="1.5 Comments" class="md-nav__link">
    1.5 Comments
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#16-assignment" title="1.6 Assignment" class="md-nav__link">
    1.6 Assignment
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#17-order-of-evaluation" title="1.7 Order of Evaluation" class="md-nav__link">
    1.7 Order of Evaluation
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#18-data-types-101" title="1.8 Data Types 101" class="md-nav__link">
    1.8 Data Types 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#19-lists-101" title="1.9 Lists 101" class="md-nav__link">
    1.9 Lists 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#110-functions-101" title="1.10 Functions 101" class="md-nav__link">
    1.10 Functions 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#111-functions-on-lists-101" title="1.11 Functions on Lists 101" class="md-nav__link">
    1.11 Functions on Lists 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#112-example-fibonacci-numbers" title="1.12 Example: Fibonacci Numbers" class="md-nav__link">
    1.12 Example: Fibonacci Numbers
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#113-example-newtons-method-for-nth-roots" title="1.13 Example: Newton's Method for nth Roots" class="md-nav__link">
    1.13 Example: Newton's Method for nth Roots
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#114-example-fifo-allocation" title="1.14 Example: FIFO Allocation" class="md-nav__link">
    1.14 Example: FIFO Allocation
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#115-dictionaries-and-tables-101" title="1.15 Dictionaries and Tables 101" class="md-nav__link">
    1.15 Dictionaries and Tables 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#116-q-sql-101" title="1.16 q-sql 101" class="md-nav__link">
    1.16 q-sql 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#117-example-trades-table" title="1.17 Example: Trades Table" class="md-nav__link">
    1.17 Example: Trades Table
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#118-file-io-101" title="1.18 File I/O 101" class="md-nav__link">
    1.18 File I/O 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#119-interprocess-communication-101" title="1.19 Interprocess Communication 101" class="md-nav__link">
    1.19 Interprocess Communication 101
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#120-example-asynchronous-callbacks" title="1.20 Example: Asynchronous Callbacks" class="md-nav__link">
    1.20 Example: Asynchronous Callbacks
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="1_Q_Shock_and_Awe.1#121-websockets-101" title="1.21 Websockets 101" class="md-nav__link">
    1.21 Websockets 101
  </a>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
                  </div>
                </div>
              </div>
            
          
          <div class="md-content">
            <article class="md-content__inner md-typeset">
              
                
                
                <h1 id="1-q-shock-and-awe">1. Q Shock and Awe<a class="headerlink" href="1_Q_Shock_and_Awe.1#1-q-shock-and-awe" title="Permanent link">&para;</a></h1>
<p>The purpose of this chapter is to provide a whirlwind tour of some highpoints of q. We don't expect everyone to follow everything the first time through but we do expect that you will be impressed by the power and economy of q. The examples here should motivate careful reading of the following chapters. Once you complete the main text, come back to this chapter and you'll breeze through it.</p>
<h2 id="11-starting-q">1.1 Starting q<a class="headerlink" href="1_Q_Shock_and_Awe.1#11-starting-q" title="Permanent link">&para;</a></h2>
<p>Your installation of q should have placed the q executable in <code>$HOME/q</code> (or <code>$QHOME</code>) on Unix-based systems, or in the <code>q</code> directory on the <code>C:</code> drive on Windows.</p>
<p>For Windows, start a q session by typing <code>q</code> on the command line; for Linux-based systems use <code>rlwrap q</code> so that you will have command line recall. You should see a new q session with the Kx Systems copyright notice followed by the q prompt indicated by a leading <code>q)</code> on the command line. This is the <em>q console</em>. Type <code>6*7</code> and press Enter or Return to see the result.</p>
<pre><code class="q">42
q)☐
</code></pre>

<p>Here the ☐ represents the cursor awaiting your next input.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>In this document, sample q console sessions will always be displayed in fixed-pitch type with shaded background. As a pedagogical device, in many q snippets we suppress the console response to an entered q expression, replacing it with an underscore. This means that you, the serious student, are expected to enter this expression into your own q session and see the result.</p>
</div>
<pre><code class="q">q)&quot;c&quot;$0x57656c6c20646f6e6521
_
</code></pre>

<p>You did do this, didn't you? <mark>This <strong>is</strong> a tutorial</mark>.</p>
<h2 id="12-variables">1.2 Variables<a class="headerlink" href="1_Q_Shock_and_Awe.1#12-variables" title="Permanent link">&para;</a></h2>
<p>In q, as in most languages that allow mutable state, a "variable" should properly be called an "assignable". (See Mathematical Refresher above for a discussion). Nevertheless, a <em>variable</em> in q is a name together with associated storage that holds whatever value has been most recently assigned to the variable. As a consolation, at least q does not misuse <code>=</code> for assignment, as do many languages; in q <code>=</code> actually means "test for equality."</p>
<p>Declaring a variable and assigning its value are done in a single step with the operator <code>:</code> which is called <em>amend</em> and is read "is assigned" or "gets." Here is how to create and assign variable <code>a</code> with integer value 42.</p>
<pre><code class="q">q)a:42
q)_
</code></pre>

<p>When you entered this in your q session, you noted that nothing is echoed to the console. In order to see that <code>a</code> has indeed been assigned, simply enter the variable.</p>
<pre><code class="q">q)a
42
</code></pre>

<p>A variable name must start with an alphabetic character, which can be followed by alpha, numeric or underscore.</p>
<p><strong>Naming Style Recommendations</strong></p>
<ol>
<li>
<p>Choose a name long enough to make the purpose of the entity evident, but no longer. The purpose of a name is to communicate to a reader of the code at another time – perhaps even you. Long names may not make code easier to read. For example, <code>checkDisk</code> is clearer than <code>cd</code> or <code>chk</code> but is no less clear than <code>checkDiskForFileConsistency</code>.</p>
</li>
<li>
<p>Use verbs for function names; use nouns for data.</p>
</li>
<li>
<p>Be consistent in your use of abbreviations. Be mindful that even "obvious" abbreviations may be opaque to readers whose native language is different than yours.</p>
</li>
<li>
<p>Be consistent in your use of capitalization, such as initial caps, camel casing, etc. Pick a style and stick to it.</p>
</li>
<li>
<p>Use contexts for name spacing functions.</p>
</li>
<li>
<p>Do not use names such as <code>int</code>, <code>float</code> or other words that have meaning in q. While not reserved, they carry special meaning when used as arguments for certain q operators.</p>
</li>
<li>
<p>Accomplished q programmers avoid using the underscore character in q names. If you insist on using underscore in names, do not use it as the last character. Expressions involving the built-in <code>_</code> operator and names with underscore will be difficult to read.</p>
</li>
</ol>
<h2 id="13-whitespace">1.3 Whitespace<a class="headerlink" href="1_Q_Shock_and_Awe.1#13-whitespace" title="Permanent link">&para;</a></h2>
<p>In general, q permits, but does not require, whitespace around operators, separators, brackets, braces, etc. You could also write the above expression as</p>
<pre><code class="q">a : 42
</code></pre>

<p>or,</p>
<pre><code class="q">a: 42
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Accomplished q programmers view whitespace around operators as training wheels on a bicycle.</p>
</div>
<p>Because the q gods prefer compact code, you will see programs with no superfluous whitespace… none, zilch, zip, nada. In order to help you get accustomed to this terseness, we use whitespace only in juxtaposition and after semi-colon and comma separators. You should feel free to add whitespace for readability where it is permitted, but be consistent in its use or omission. We will point out where whitespace is required or forbidden.</p>
<h2 id="14-the-q-console">1.4 The Q Console<a class="headerlink" href="1_Q_Shock_and_Awe.1#14-the-q-console" title="Permanent link">&para;</a></h2>
<p>The q console evaluates a q expression that you enter and echoes the result on the following line. An exception to this is the assignment operation – as noted above – that has a return value, even though the console does not echo it. You may wonder why. This is simply a q console design choice to avoid cluttering the display.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>To obtain official console display of any q value, apply the built-in function <code>show</code> to it.</p>
<p><pre><code class="language-q">
q)show a:42
42
</code></pre></p>
</div>
<h2 id="15-comments">1.5 Comments<a class="headerlink" href="1_Q_Shock_and_Awe.1#15-comments" title="Permanent link">&para;</a></h2>
<p>The forward-slash character <code>/</code> indicates the beginning of a comment. Actually, it instructs the interpreter to ignore everything from it to the end of the line.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>At least one whitespace character must separate <code>/</code> intended to begin a comment from any text to the left of it on a line.</p>
</div>
<p>In the following example, no definition of <code>c</code> is seen by the interpreter, so an error occurs.</p>
<pre><code class="q">q)b:1+a:42 / nothing here counts c:6*7
q)c
'c
</code></pre>

<p>Notice the succinct (ahem) format of q errors: a single vertical quote (called "tick" in q-speak) followed by a terse error message. In this case, the error should be interpreted as "Error: c is not recognized."</p>
<p>The following generates an even more succinct error.</p>
<pre><code class="q">q)a:42/ intended to be a comment
'
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Coding Style</p>
<p>The q gods have no need for explanatory error messages or comments since their q code is perfect and self-documenting. Even experienced mortals spend hours poring over cryptic q error messages such as the ones above. Moreover, many mortals eschew comments in misanthropic coding macho. Don’t.</p>
</div>
<h2 id="16-assignment">1.6 Assignment<a class="headerlink" href="1_Q_Shock_and_Awe.1#16-assignment" title="Permanent link">&para;</a></h2>
<p>A variable is not explicitly declared or typed. Instead, its assigned value determines the variable type. In our example, the expression to the right of the assignment is syntactically an integer value, so the name <code>a</code> is associated with a value of type long integer. It is permissible to reassign a variable with a value of different type. Once this is done, the name will reflect the type of its newly assigned value. Much more about types in Chapter 2.</p>
<div class="admonition important">
<p class="admonition-title">Important</p>
<p>Dynamic typing combined with mutable variables is flexible but also dangerous. You can unintentionally change the type of a variable with a wayward assignment that might crash your program much later. Or you can inadvertently reuse a variable name and wipe out any data in the variable. An undetected typo can result in data being sent to a black hole. Be careful to enter variable names correctly.</p>
</div>
<p>Many traditional languages permit only a variable name to the left of an assignment. In q an assignment carries the value being assigned and can be used as part of a larger expression. So we find,</p>
<pre><code class="q">q)1+a:42
43
</code></pre>

<p>In the following example, the variable <code>a</code> is <strong>not</strong> referenced after it is assigned. Instead, the value of the assignment is propagated onward – i.e., to the left.</p>
<pre><code class="q">q)b:1+a:42
q)b
43
</code></pre>

<h2 id="17-order-of-evaluation">1.7 Order of Evaluation<a class="headerlink" href="1_Q_Shock_and_Awe.1#17-order-of-evaluation" title="Permanent link">&para;</a></h2>
<p>The interpreter evaluates the above specification of <code>b</code> from right-to-left (more on this in Chapter 4). If it were verbose, the interpreter might say:</p>
<blockquote>
<p>The integer 42 is assigned to a variable named <code>a</code>, then the result of the assignment, namely 42, is added to the integer 1, then this result is assigned to a variable named <code>b</code>. </p>
</blockquote>
<p>Because the interpreter always evaluates expressions right-to-left, programmers can safely read q expressions left-to-right,</p>
<blockquote>
<p>The variable <code>b</code> gets the value of the integer 1 plus the value assigned to the variable <code>a</code>, which gets the integer 42. </p>
</blockquote>
<p>This is exactly as in mathematics where we would read <em>f(g(x))</em> as "f of g of x" even though <em>g</em> is evaluated first and the result passed into <em>f</em>. We just dispense with the parentheses.</p>
<p><strong>Recommendations on Assignment Style</strong></p>
<ul>
<li>The ability to chain evaluation of expressions permits a single line of q code to perform the work of an entire verbose program. In general this is acceptable (even good) q style when not taken to the extreme with extremely long wrapped lines or nested sub expressions.</li>
<li>Intra-line assignments, as above, can simplify code provided they are few and are referenced only within the line of creation.</li>
<li>It is not bad form to make one assignment per line, provided you don't end up with one operation per line.</li>
<li>Wannabe q gods carry terseness to the extreme, which quickly leads to write-only code.</li>
</ul>
<h2 id="18-data-types-101">1.8 Data Types 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#18-data-types-101" title="Permanent link">&para;</a></h2>
<p>There are q data types to cover nearly all needs but a few basic types are used most frequently. In q3.0 and above, the basic integer type, called <em>long</em>, is a 64-bit signed integer. If you write a literal integer as in the snippets above, q creates a 64-bit signed integer value.</p>
<pre><code class="q">q)42
_
</code></pre>

<p>The basic floating point type in q is called <em>float</em>, often known as a "double" in many languages. This is an 8-byte value conforming to the IEEE floating-point specification.</p>
<pre><code class="q">q)98.6
_
</code></pre>

<p>Arithmetic operations on integer and float values are pretty much as expected except for division, which is written as <code>%</code> since <code>/</code> has been preempted for comments (as well as other uses). Sorry, that's just the way it is. Also note that division <strong>always</strong> results in a float.</p>
<pre><code class="q">q)2+3
5
q)2.2*3.0
6.6
q)4-2
2
q)4%2
2f
</code></pre>

<p>Boolean values in q are stored in a single byte and are denoted as the binary values they really are with an explicit type suffix <code>b</code>. One way to generate boolean values is to test for equality.</p>
<pre><code class="q">q)42=40+2
1b
q)42=43
_
</code></pre>

<p>The two most useful temporal types are <em>date</em> and <em>timespan</em>; both represent integral counts. Under the covers, a date is the number of days since the millennium, positive for post and negative for pre.</p>
<pre><code class="q">q)2000.01.01 / this is actually 0
_
q)2014.11.19 / this is actually 5436
_
q)1999.12.31 / this is actually -1
_
</code></pre>

<p>Similarly, a time value is represented by a timespan, which is a (long) integer count of the number of nanoseconds since midnight. It is denoted as,</p>
<pre><code class="q">q)12:00:00.000000000 / this is noon
_
</code></pre>

<p>One interesting and useful feature of q temporal values is that, as integral values under the covers, they naturally participate in arithmetic. For example, to advance a date five days, add 5.</p>
<pre><code class="q">q)2000.01.01+5
_
</code></pre>

<p>Or to advance a time by one microsecond (i.e., 1000 nanoseconds) add 1000.</p>
<pre><code class="q">q)12:00:00.000000000+1000
_
</code></pre>

<p>Or to verify that temporal values are indeed their underlying values, test for equality.</p>
<pre><code class="q">q)2000.01.01=0
_
q)12:00:00.000000000=12*60*60*1000000000
_
</code></pre>

<p>The treatment of textual data in q is a bit complicated in order to provide optimum flexibility and performance. For now, we will focus on symbols, which derive from their namesake in Scheme and are akin to <code>VARCHAR</code> in SQL or strings in other languages. They are <strong>not</strong> what q calls strings!</p>
<p>Think of symbols as wannabe names: all q names are symbols but not all symbols are names. A symbol is atomic, meaning that it is viewed as an indivisible entity (although we shall see later how to expose the characters inside it).</p>
<p>Symbols are denoted by a leading back-quote (called "back tick" in q-speak) followed by characters. Symbols without embedded blanks or other special characters can be entered literally into the console.</p>
<pre><code class="q">q)`aapl
_
q)`jab
_
q)`thisisareallylongsymbol
_
</code></pre>

<p>Since symbols are atoms, any two can be tested for equality.</p>
<pre><code class="q">q)`aapl=`apl
_
</code></pre>

<h2 id="19-lists-101">1.9 Lists 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#19-lists-101" title="Permanent link">&para;</a></h2>
<p>The fundamental q data structure is a list, which is an ordered collection of items sequenced from left to right. The notation for a general list encloses items with <code>(</code> and <code>)</code> and uses <code>;</code> as separator. Spaces after the semi-colons are optional but can improve readability.</p>
<pre><code class="q">q)(1; 1.2; `one)
_
</code></pre>

<p>A few observations on lists.</p>
<ul>
<li>A list can contain items of different type; this usually requires wrapping the values in a variant type in other languages. That being said, it is best to avoid mixed types in lists, as their processing is slower than homogenous lists of atoms.</li>
<li>Assuming you entered the above snippet, you have noticed that the console echoes the items of a general list one item per line.</li>
<li>In contrast to most functional languages, lists need not be built up by "cons"-ing one item at a time, although they can be. Nor are they stored as singly-linked lists under the covers.</li>
</ul>
<p>In the case of a homogenous list of atoms, called a <em>simple list</em>, q adopts a simplified format for both storage and display. The parentheses and semicolons are dropped. For example, a list of underlying numeric type separates its items with a space.</p>
<pre><code class="q">q)(1; 2; 3)
1 2 3
q)(1.2; 2.2; 3.3)
-
q)(2000.01.01; 2000.01.02; 2001.01.03)
-
</code></pre>

<p>A simple list of booleans is juxtaposed with no spaces and has a trailing <code>b</code> type indicator.</p>
<pre><code class="q">q)(1b; 0b; 1b)
101b
</code></pre>

<p>A simple list of symbols is displayed with no separating spaces.</p>
<pre><code class="q">q)(`one; `two; `three)
`one`two`three
</code></pre>

<p>Homogenous lists of atoms can be entered in either general or simplified form. Regardless of how they are created, q recognizes a list of homogenous atoms dynamically and converts it to a simple list.</p>
<p>Next we explore some basic operations to construct and manipulate lists. The most fundamental is <code>til</code>, which takes a non-negative integer <em>n</em> and returns the first <em>n</em> integers starting at 0 (<em>n</em> itself is <strong>not</strong> included in the result).</p>
<pre><code class="q">q)til 10
0 1 2 3 4 5 6 7 8 9
</code></pre>

<p>We obtain the first 10 integers starting at 1 by adding 1 to the previous result. Be mindful that q always evaluates expressions from right to left and that operations work on vectors whenever possible.</p>
<pre><code class="q">q)1+til 10
1 2 3 4 5 6 7 8 9 10
</code></pre>

<p>Similarly, we obtain the first 10 even numbers and the first ten odd numbers.</p>
<pre><code class="q">q)2*til 10
_
q)1+2*til 10
_
</code></pre>

<p>Finally, we obtain the first 10 even numbers starting at 42.</p>
<pre><code class="q">q)42+2*til 10
_
</code></pre>

<p>Another frequently used list primitive is <em>join</em> <code>,</code> that returns the list obtained by concatenating its right operand to its left operand.</p>
<pre><code class="q">q)1 2 3,4 5
1 2 3 4 5
q)1 2 3,100
_
q)0,1 2 3
_
</code></pre>

<p>To extract items from the front or back of a list, use the <em>take</em> operator <code>#</code>. Positive argument means take from the front, negative from the back.</p>
<pre><code class="q">q)2#til 10
0 1
q)-2#til 10
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Applying <code>#</code> always results in a list.</p>
<p>In particular, the idiom <code>0#</code> returns an empty list of the same type as the first item in its argument. Using an atom argument is a succinct way to create a typed empty list of the type of the atom.
<pre><code>q)0#1 2 3
<code>long$()
q)0#0</code>long<span><span class="MathJax_Preview">()
q)0#<code></code>symbolsymbol</span><script type="math/tex">()
q)0#<code></code>symbolsymbol</script></span>()
</code></pre></p>
</div>
<p>Should you extract more items than there are in the list, <code>#</code> restarts at the beginning and continues extracting. It does this until the specified number of items is reached.</p>
<pre><code class="q">q)5#1 2 3
1 2 3 1 2
</code></pre>

<p>In particular, if you apply <code>#</code> to an atom, it will continue drawing that single atom until it has the specified number of copies. This is a succinct idiom to replicate an atom to a list of specified length.</p>
<pre><code class="q">q)5#42
42 42 42 42 42
</code></pre>

<p>As with atoms, a list can be assigned to a variable.</p>
<pre><code class="q">q)L:10 20 30
</code></pre>

<p>The items of a list can be accessed via indexing, which uses square brackets and is relative to 0.</p>
<pre><code class="q">q)L[0]
10
q)L[1]
_
q)L[2]
_
</code></pre>

<h2 id="110-functions-101">1.10 Functions 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#110-functions-101" title="Permanent link">&para;</a></h2>
<p>All built-in q operators are functions. The main differences between q’s functions and the ones we mortals can write are:</p>
<ul>
<li>The built-ins are written and optimized in one of the underlying languages k or C.</li>
<li>All q functions can be used with infix notation – i.e., as operators – whereas ours must be used in prefix form. <!-- FIXME All q OPERATORS can be used with infix notation – but not all inbuilt functions, eg max, avg --></li>
</ul>
<p>Functions in q correspond to "lambda expressions" or "anonymous functions" in other languages. This means that a function is a first class value just like a long or float value – i.e., it acquires a name only once it is assigned to a variable.</p>
<p>Conceptually, a q function is a sequence of steps that produces an output result from an input value. Since q is not purely functional, these rules can interact with the world by reaching outside the context of the function. Such actions are called <em>side effects</em> and should be carefully controlled.</p>
<p>Function definition is delimited by matching curly braces <code>{</code> and <code>}</code>. Immediately after the opening brace, the <em>formal parameters</em> are names enclosed in square brackets <code>[</code> and <code>]</code> and separated by semi-colons. These parameters presumably appear in the <em>body</em> of the function, which follows the formal parameters and is a succession of expressions sequenced by semi-colons.</p>
<p>Following is a simple function that returns the square of its input. On the next line we assign the same function to the variable <code>sq</code>. The whitespace is optional.</p>
<pre><code class="q">q){[x] x*x}
_
q)sq:{[x] x*x}
_
</code></pre>

<p>Here is a function that takes two input values and returns the sum of their squares.</p>
<pre><code class="q">q){[x;y] a:x*x; b:y*y; a+b}
_
q)pyth:{[x;y] a:x*x; b:y*y; a+b}
_
</code></pre>

<p>To apply a function to arguments, follow it (or its name, if it has been assigned to a variable) by a list of values enclosed in square brackets and separated by semi-colons. This causes the argument expression to be evaluated first, then the expressions in the body of the function to be evaluated sequentially by substituting each resulting argument for every occurrence of the corresponding formal parameter. Normally the value of the final expression is returned as the output value of the function.</p>
<p>Here are the previous functions applied to arguments.</p>
<pre><code class="q">q){[x] x*x}[5]
25
q)sq[5]
_
q){[x;y] a:x*x; b:y*y; a+b}[3;4]
25
q)pyth[3;4]
_
</code></pre>

<p>The variables <code>a</code> and <code>b</code> appearing in the body of the last function above are <em>local</em> – i.e., they are created and exist only for the duration of an application.</p>
<p>It is common in mathematics to use function parameters <em>x</em>, <em>y</em>, or <em>z</em>. If you are content with these names (in the belief that descriptive names provide no useful information to the poor soul reading your code), you can omit their declaration and q will understand that you mean the implicit parameters <em>x</em>, <em>y</em>, and <em>z</em> <strong>in that order</strong>.</p>
<pre><code class="q">q){x*x}[5]
25
q){a:x*x; b:y*y; a+b}[3;4]
25
</code></pre>

<p>This is about as pithy as it gets for function definition and application. Well, not quite. In q, as in most functional languages, we don't need no stinkin’ brackets for application of a monadic function – i.e., with one parameter. Simply separate the function from its argument by whitespace. This is called function <em>juxtaposition</em>.</p>
<pre><code class="q">q){x*x} 5
_
q)f:{x*x}
q)f 5
_
</code></pre>

<p>If you are new to functional programming this may take some getting used to, but the reduction of punctuation "noise" in your code is worth it.</p>
<h2 id="111-functions-on-lists-101">1.11 Functions on Lists 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#111-functions-on-lists-101" title="Permanent link">&para;</a></h2>
<p>Because q is a vector language, most of the built-in operators work on lists out of the box. In q-speak, such functions are <em>atomic</em>, meaning they recursively burrow into a complex data structure until arriving at atoms and then perform their operation. In particular, an atomic function operates on lists by application to the individual items. For example, plain addition adds an atom to a list, a list to an atom or two lists of the same length.</p>
<pre><code class="q">q)42+100 200 300
142 242 342
q)100 200 300+42
_
q)100 200 300+1 2 3
_
</code></pre>

<p>Perhaps surprisingly, this is also true of equality and comparison operators. (Recall the notation for simple boolean lists).</p>
<pre><code class="q">q)100=99 100 101
010b
q)100 100 100=100 101 102
_
q)100&lt;99 100 101
_
</code></pre>

<p>Suppose that instead of adding things pair-wise, we want to add all the items across a list. The way this is done in functional languages is with <em>higher order functions</em>, or as they are called in q, <em>adverbs</em>. Regardless of the terminology, the idea is to take the operation of a function and produce a closely related function having the same "essence" but applied in a different manner.</p>
<p>You met the concept of higher-order functions in elementary calculus, perhaps without being properly introduced. The derivative and integral are actually higher-order functions that take a function and produce a related function. Behind all the delta-epsilon mumbo-jumbo, the derivative of a given function is a function that represents the instantaneous behavior of the original. The (indefinite) integral is the anti-derivative – i.e., a function whose instantaneous behavior is that of the given function.</p>
<p>In the case of adding the values in a list, we need a higher-order function that takes addition and turns it into a function that works across the list. In functional programming this is called a <em>fold</em> ; in q it is <em>over</em>. The technique is to accumulate the result across the list recursively. (See Mathematical Refresher for more on recursion). Specifically, begin with an initial value in the accumulator and then sequentially add each list item into the previous value of the accumulator until the end the list. Upon completion, the accumulator holds the desired result.</p>
<p>If you are new to functional programming this may seem more complicated than just creating a <em>for</em> loop but that's only because you have been brainwashed to think that constructing a for loop is "real" programming. Watch how easy it is to do in q. In words, we tell q to start with the initial value of 0 in the accumulator and then modify <code>+</code> with the adverb <code>/</code> so that it adds across the list.</p>
<pre><code class="q">q)0 +/ 1 2 3 4 5
15
q)0 +/ 1+til 100
_
</code></pre>

<p>There is nothing special about built-in operator <code>+</code> – we can use any operator or even our own function.</p>
<pre><code class="q">q)0 {x+y}/ 1 2 3 4 5
_
q)0 {x+y}/ 1+til 100
_
</code></pre>

<p>In this situation we don't really need the flexibility to specify the initial value of the accumulator. It suffices to start with the first item of the list and proceed across the rest of the list. There is an even simpler form for this case.</p>
<pre><code class="q">q)(+/) 1 2 3 4 5
_
q)(+/) 1+til 100
_
</code></pre>

<p>If you are new to functional programming, you may think, "Big deal, I write <em>for</em> loops in my sleep." Granted. But the advantage of the higher-order function approach is that there is no chance of being off by one in the loop counter or accidentally running off the end of a data structure. More importantly, you can focus on <em>what</em> you want done without the irrelevant scaffolding of <em>how</em> to set up control structures. This is called <em>declarative programming</em>.</p>
<p>What else can we do with our newfound adverb? Change addition to multiplication for factorial.</p>
<pre><code class="q">q)(*/) 1+til 10
3628800
</code></pre>

<p>The fun isn't limited to arithmetic primitives. We introduce <code>|</code>, which returns the larger of its operands and <code>&amp;</code>, which returns the smaller of its operands.</p>
<pre><code class="q">q)42|98
98
q)42&amp;98
_
</code></pre>

<p>Use <code>|</code> or <code>&amp;</code> with <em>over</em> and you have <em>maximum</em> or <em>minimum</em>.</p>
<pre><code class="q">q)(|/) 20 10 40 30
40
q)(&amp;/) 20 10 40 30
_
</code></pre>

<p>Some applications of <code>/</code> are so common that they have their own names.</p>
<pre><code class="q">q)sum 1+til 10 / this is +/
55
q)prd 1+til 10 / this is */ -- note missing &quot;o&quot;
_
q)max 20 10 40 30 / this is |/
_
q)min 20 10 40 30 / this is &amp;/
_
</code></pre>

<p>At this point the <code>/</code> pattern should be clear: it takes a given function and produces a new function that accumulates across the original list, producing a single result. In particular, <code>/</code> converts a dyadic function to a monadic <em>aggregate</em> function – i.e., one that collapses a list to an atom.</p>
<p>We record one more example of <code>/</code> for later reference. Recall from the previous section that applying the operator <code>#</code> to an atom produces a list of copies. Composing this with <code>*/</code> we get a multiplicative implementation of raising to a power without resorting to floating point exponential.</p>
<pre><code class="q">q)(*/) 2#1.4142135623730949
1.9999999999999996
q)n:5
q)(*/) n#10
100000
</code></pre>

<p>The higher-order function sibling to over is <em>scan</em>, written <code>\</code>. The process of <em>scan</em> is the same as that of over with one difference: instead of returning only the final result of the accumulation, it returns all intermediate values.</p>
<pre><code class="q">q)(+\) 1+til 10
1 3 6 10 15 21 28 36 45 55
q)(*\) 1+til 10
_
q)(|\) 20 10 40 30
20 20 40 40
q)(&amp;\) 20 10 40 30
_
</code></pre>

<p><em>Scan</em> converts a dyadic function to a monadic <em>uniform function</em> – i.e., one that returns a list of the same length as the input.</p>
<p>As with <em>over</em>, common applications of <em>scan</em> have their own names.</p>
<pre><code class="q">q)sums 1+til 10 / this is +\
_
q)prds 1+til 10 / this is *\ / note missing 'o'
_
q)maxs 20 10 40 30 / this is |\
_
q)mins 20 10 40 30 / this is &amp;\
_
</code></pre>

<h2 id="112-example-fibonacci-numbers">1.12 Example: Fibonacci Numbers<a class="headerlink" href="1_Q_Shock_and_Awe.1#112-example-fibonacci-numbers" title="Permanent link">&para;</a></h2>
<p>We define the Fibonacci numbers recursively.</p>
<ul>
<li>Base case: the initial sequence is the list <code>1 1</code></li>
<li>Inductive step: given a list of Fibonacci numbers, the next value of the sequence appends the sum of its two last items.</li>
</ul>
<p>We have the basic ingredients to express this in q. Start with the base case <code>F0</code>.</p>
<pre><code class="q">q)F0:1 1
q)-2#F0
_
q)sum -2#F0
_
q)F0,sum -2#F0
_
</code></pre>

<p>Notice that read from right-to-left, the last expression exactly restates the definition of the Fibonacci term: "take the last two elements of the sequence, sum them and append the result to the sequence." This is declarative programming – say "what" to do not "how" to implement it.</p>
<p>We abstract this expression into a function that appends the next item at an arbitrary point in the sequence.</p>
<pre><code class="q">q){x,sum -2#x}
_
</code></pre>

<p>Let's take it for a test drive on the first few terms.</p>
<pre><code class="q">q){x,sum -2#x}[1 1]
_
q){x,sum -2#x}[1 1 2]
_
</code></pre>

<p>Wouldn't it be nice if q had a higher-order function that applies a recursive function a specified number of times, starting with the base case? Conveniently, there is an overload of our friend <code>/</code> that does exactly this. Specify the base case and the number of times to iterate the recursion and it's done.</p>
<pre><code class="q">q)10 {x,sum -2#x}/ 1 1
1 1 2 3 5 8 13 21 34 55 89 144
</code></pre>

<h2 id="113-example-newtons-method-for-nth-roots">1.13 Example: Newton's Method for n<sup>th</sup> Roots<a class="headerlink" href="1_Q_Shock_and_Awe.1#113-example-newtons-method-for-nth-roots" title="Permanent link">&para;</a></h2>
<p>You may recall from elementary calculus the simple and powerful technique for computing roots of functions, called the Newton-Raphson method. (It actually bears little superficial resemblance to what Newton himself originally developed). The idea is to start with an initial guess that is not too far from the actual root. Then determine the tangent to the graph over that point and project the tangent line to the x-axis to obtain the next approximation. Repeat this process until the result converges within the desired tolerance.</p>
<p>We formulate this as a recursive algorithm for successive approximation.</p>
<ul>
<li>Base case: a reasonable initial value</li>
<li>Inductive step: Given <em>x<sub>n</sub></em>, the n+1<sup>st</sup> approximation is: <em>x<sub>n</sub> – f(x<sub>n</sub>) / f'(x<sub>n</sub>)</em></li>
</ul>
<p>Let's use this procedure to compute the square root of 2. The function whose zero we need to find is <em>f(x) = x<sup>2</sup> - 2</em>. The formula for successive approximation involves the derivative of <em>f</em>, which is <em>f'(x) = 2*x</em>.</p>
<p>Given that we know that there is a square root of 2 between 1 and 2 due to the sign change of <em>f</em>, we start with 1.0 as the base case x0. Then the first approximation is,</p>
<pre><code class="q">q)x0-((x0*x0)-2)%2*x0
1.5
</code></pre>

<p>We abstract this expression to a function that computes the n+1<sup>st</sup> approximation in terms of xn</p>
<pre><code class="q">q){[xn] xn-((xn*xn)-2)%2*xn}
_
</code></pre>

<p>Now use it to run the first two iterations.</p>
<pre><code class="q">q){[xn] xn-((xn*xn)-2)%2*xn}[1.0]
_
q){[xn] xn-((xn*xn)-2)%2*xn}[1.5]
_
</code></pre>

<p>Observe in your console session that this looks promising for convergence to the correct answer.</p>
<p>Wouldn't it be nice of q had a higher-order function to apply a function recursively, starting at the base case, until the output converges? You won't be surprised that there is another overload of our friend over that does exactly this. Just specify the base case and q iterates until the result converges within the system comparison tolerance (as of this writing – Sep 2015 – that tolerance is 10<sup>-14</sup>)</p>
<pre><code class="q">q){[xn] xn-((xn*xn)-2)%2*xn}/[1.5]
1.414214
</code></pre>

<p>To witness the convergence, do two things. First, set the floating point display to maximum.</p>
<pre><code class="q">q)\P 0 / note upper case P
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>This displays all digits of the underlying binary representation, including the 17th digit, which is usually schmutz.</p>
</div>
<p>Second, switch the adverb from <em>over</em> to <em>scan</em> so that we can see the intermediate results.</p>
<pre><code class="q">q){[xn] xn-((xn*xn)-2)%2*xn}\[1.0]
_
</code></pre>

<p>As your console display shows, that is pretty fast convergence.</p>
<p>Why limit ourselves to the square root of 2? Abstracting the constant 2 into a parameter <em>c</em> in the function <em>f</em>, the successive approximation function becomes,</p>
<pre><code class="q">q){[c; xn] xn-((xn*xn)-c)%2*xn}
_
</code></pre>

<p>At this point we use a feature, related to <em>currying</em> in functional programming called <em>projection</em> in q, in which we only partially supply arguments to a function. The result is a function of the remaining, un-specified parameters. We indicate partial application by omitting the unspecified arguments. In our case, we specify the constant c as 2.0, leaving a monadic function of the remaining variable <code>xn</code>.</p>
<pre><code class="q">q){[c; xn] xn-((xn*xn)-c)%2*xn}[2.0;]
_
</code></pre>

<p>Since this is solely a function of <code>xn</code>, we can apply it recursively to the base case until it converges to obtain the same result as the original square root function.</p>
<pre><code class="q">q){[c; xn] xn-((xn*xn)-c)%2*xn}[2.0;]/[1.0]
_
</code></pre>

<p>But now we are free to choose any (reasonable) value for <em>c</em>. For example, to calculate the square root of 3.0.</p>
<pre><code class="q">q){[c; xn] xn-((xn*xn)-c)%2*xn}[3.0;]/[1.0]
_
</code></pre>

<p>Intoxicated with the power of function abstraction and recursion, why restrict ourselves to square roots? We abstract once more, turning the power into a parameter <em>p</em>. The new expression for the successive approximation has a p<sup>th</sup> power in the numerator and an p-1<sup>st</sup> power in the denominator, but we already know how to calculate these.</p>
<pre><code class="q">q){[p; c; xn] xn-(((*/)p#xn)-c)%p*(*/)(p-1)#xn}_
</code></pre>

<p>Supplying <em>p</em> and <em>c</em> (only) leaves a function solely of <code>xn</code>, which we can once again iterate on the base case until convergence. We reproduce the previous case of the square root of 3.0; then we calculate the fifth root of 7.</p>
<pre><code class="q">q){[p; c; xn] xn-(((*/)p#xn)-c)%p*(*/)(p-1)#xn}[2; 3.0;]/[1.0]
_
q){[p; c; xn] xn-(((*/)p#xn)-c)%p*(*/)(p-1)#xn}[5; 7.0;]/[1.0]
_
</code></pre>

<p>It is amazing what can be done in a single line of code when you strip out unnecessary programming frou-frou. Perhaps this is intimidating to the qbie, but now that you have taken the blue pill, you will feel right as rain.</p>
<h2 id="114-example-fifo-allocation">1.14 Example: FIFO Allocation<a class="headerlink" href="1_Q_Shock_and_Awe.1#114-example-fifo-allocation" title="Permanent link">&para;</a></h2>
<p>In the finance industry, one needs to fill a sell order from a list of matching buys in a FIFO (first in, first out) fashion. Although we state this scenario in terms of buys and sells, it applies equally to general FIFO allocation. We begin with the buys represented as a (time-ordered) list of floats, and a single float sell.</p>
<pre><code class="q">q)buys:2 1 4 3 5 4f
q)sell:12f
</code></pre>

<p>The objective is to draw successively from the buys until we have exactly filled the sell, then stop. In our case the result we are seeking is,</p>
<pre><code class="q">q)allocation
2 1 4 3 2 0
</code></pre>

<p>The insight is to realize that the cumulative sum of the allocations reaches the sell amount and then levels off: this is an equivalent statement of what it means to do FIFO allocation.</p>
<pre><code class="q">q)sums allocation
2 3 7 10 12 12
</code></pre>

<p>We realize that the cumulative sum of buys is the total amount available for allocation at each step.</p>
<pre><code class="q">q)sums buys
2 3 7 10 15 19f
</code></pre>

<p>To make this sequence level off at the sell amount, simply use <code>&amp;</code>.</p>
<pre><code class="q">q)sell&amp;sums buys
2 3 7 10 12 12f
</code></pre>

<p>Now that we have the cumulative allocation amounts, we need to unwind this to get the step-wise allocations. This entails subtracting successive items in the allocations list.</p>
<p>Wouldn't it be nice if q had a built-in function that returned the successive differences of a numeric list? There is one: <code>deltas</code> and – no surprise – it involves an adverb (called <em>each-previous</em> – more about that in Chapter 5).</p>
<pre><code class="q">q)deltas 1 2 3 4 5
1 1 1 1 1
q)deltas 10 15 20
_
</code></pre>

<p>Observe in your console display that <code>deltas</code> returns the initial item untouched. This is just what we need.</p>
<p>Returning to our example of FIFO allocation, we apply <code>deltas</code> to the cumulative allocation list and we're done.</p>
<pre><code class="q">q)deltas sell&amp;sums buys
_
</code></pre>

<p>Look ma, no loops!</p>
<p>Now fasten your seatbelts as we switch on warp drive. In real-world FIFO allocation problems, we actually want to allocate buys FIFO not just to a single sell, but to a sequence of sells. You say, surely this must require a loop. Please don't call me Shirley. And no loopy code.</p>
<p>We take <code>buys</code> as before but now we have a list <code>sells</code>, which are to be allocated FIFO from <code>buys</code>.</p>
<pre><code class="q">q)buys:2 1 4 3 5 4f
q)sells:2 4 3 2
q)allocations
2 0 0 0 0 0
0 1 3 0 0 0
0 0 1 2 0 0
0 0 0 1 1 0
</code></pre>

<p>The idea is to extend the allocation of buys across multiple sells by considering both the cumulative amounts to be allocated as well as the cumulative amounts available for allocation.</p>
<pre><code class="q">q)sums[buys]
2 3 7 10 15 19f
q)sums[sells]
2 6 9 11
</code></pre>

<p>The insight is to cap the cumulative buys with each cumulative sell.</p>
<pre><code class="q">q)2&amp;sums[buys]
2 2 2 2 2 2f
q)6&amp;sums[buys]
2 3 6 6 6 6f
q)9&amp;sums[buys]
2 3 7 9 9 9f
q)11&amp;sums[buys]
2 3 7 10 11 11f
</code></pre>

<p>Contemplate this koan and you will realize that each line includes the allocations to all the buys preceding it. From this we can unwrap cumulatively along both the buy and sell axes to get the incremental allocations.</p>
<p>Our first task is to produce the above result as a list of lists.</p>
<pre><code class="q">2 2 2 2  2  2
2 3 6 6  6  6
2 3 7 9  9  9
2 3 7 10 11 11
</code></pre>

<p>Adverbs to the rescue! Our first task requires an adverb that applies a dyadic function and a given right operand to each item of a list on the left. That adverb is called <em>each left</em> and it has the funky notation <code>\:</code>. We use it to accomplish in a single operation the four individual <code>&amp;</code> operations above.</p>
<pre><code class="q">q)sums[sells] &amp;\: sums[buys]
2 2 2 2  2  2
2 3 6 6  6  6
2 3 7 9  9  9
2 3 7 10 11 11
</code></pre>

<p>Now we apply <code>deltas</code> to unwind the allocation in the vertical direction.</p>
<pre><code class="q">q)deltas sums[sells]&amp;\:sums[buys]
2 2 2 2 2 2
0 1 4 4 4 4
0 0 1 3 3 3
0 0 0 1 2 2
</code></pre>

<p>For the final step, we need to unwind the allocation across the rows.</p>
<p>The adverb we need is called <code>each</code>. As a higher-order function, it applies a given function to each item of a list (hence its name). For a simple example, the following nested list has count 2, since it has two items. Using <code>count each</code> gives the count of each item in the list.</p>
<pre><code class="q">q)(1 2 3; 10 20)
_
q)count (1 2 3; 10 20)
_
q)count each (1 2 3; 10 20)
3 2
</code></pre>

<p>In the context of our allocation problem, we realize that <code>deltas each</code> is just the ticket to unwind the remaining cumulative allocation within each row.</p>
<pre><code class="q">q)deltas each deltas sums[sells] &amp;\: sums[buys]
2 0 0 0 0 0
0 1 3 0 0 0
0 0 1 2 0 0
0 0 0 1 1 0
</code></pre>

<p><em>Voilà!</em> The solution to our allocation problem in a single line of q. The power of higher-order functions (adverbs) is breathtaking.</p>
<h2 id="115-dictionaries-and-tables-101">1.15 Dictionaries and Tables 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#115-dictionaries-and-tables-101" title="Permanent link">&para;</a></h2>
<p>After lists, the second basic data structure of q is the <em>dictionary</em>, which models key-value association. A dictionary is constructed from two lists of the same length using the <code>!</code> operator. The left operand is the list of (presumably unique, though unenforced) <em>keys</em> and the right operand is the list of <em>values</em>. A dictionary is a first-class value, just like an integer or list and can be assigned to a variable.</p>
<pre><code class="q">q)`a`b`c!10 20 30
a| 10
b| 20
c| 30
q)d:`a`b`c!10 20 30
</code></pre>

<p>Observe that dictionary console display looks like the I/O table of a mathematical mapping. No coincidence.</p>
<p>Given a key, we retrieve the associated value with the same square bracket notation as list indexing.</p>
<pre><code class="q">q)d[`a]
_
</code></pre>

<p>A useful class of dictionary has as keys a simple list of symbols and as values a list of lists of uniform length. We think of such a dictionary as a named collection of columns and call it a <em>column dictionary</em>.</p>
<pre><code class="q">q)`c1`c2!(10 20 30; 1.1 2.2 3.3)
c1| 10 20 30
c2| 1.1 2.2 3.3
q)dc:`c1`c2!(10 20 30; 1.1 2.2 3.3)
</code></pre>

<p>Retrieving by key yields the associated column, which is itself a list and so can be indexed.</p>
<pre><code class="q">q)dc[`c1]
10 20 30
q)dc[`c1][0]
10
q)dc[`c2][1]
_
</code></pre>

<p>Whenever such iterated indexing of nested entities arises in q, there is an equivalent syntactic form, called <em>indexing at depth</em>, to make things a bit more readable.</p>
<pre><code class="q">q)dc[`c1][0]
10
q)dc[`c1; 0]
10
q)dc[`c1; 1]
_
q)dc[`c1; 2]
_
</code></pre>

<p>Indexing-at-depth notation suggests thinking of <code>dc</code> as a two-dimensional entity; this is reasonable in view of its display above. Let's pursue this. Whenever an index is elided in q, the result is as if every legitimate value had been specified in the omitted index position. For a column dictionary, this yields the associated column when the second slot is omitted.</p>
<pre><code class="q">q)dc[`c1;]
10 20 30
q)dc[`c2;]
_
</code></pre>

<p>Things are more interesting when the index in the first slot is elided. The result is a dictionary comprising a section of the original columns in just the specified position.</p>
<pre><code class="q">q)dc[;0]
c1| 10
c2| 1.1
q)dc[;1]
_
q)dc[;2]
_
</code></pre>

<p>To summarize, we have an entity that retrieves columns in the first slot and section dictionaries in the second slot. The issue is that columns are conventionally accessed in the second slot of two-dimensional things. No problem. We apply the built-in operator <code>flip</code> (better called "transpose") to reverse the order of indexing. We still have the same column dictionary but slot retrieval is reversed: columns are accessed in the second slot and section dictionaries are retrieved from the first slot.</p>
<pre><code class="q">q)t:flip `c1`c2!(10 20 30; 1.1 2.2 3.3)
q)t[0; `c1]
10
q)t[1; `c1]
_
q)t[2; `c1]
_
q)t[0; `c2]
_
q)t[; `c1]
10 20 30
q)t[0;]
c1| 10
c2| 1.1
</code></pre>

<p>We emphasize that the data is still stored as a column dictionary under the covers; only the indexing slots are affected.</p>
<p>Observe that the console display of a flipped column dictionary is indeed the transpose of the column dictionary display and in fact looks like … a table.</p>
<pre><code class="q">q)flip `c1`c2!(10 20 30; 1.1 2.2 3.3)
c1 c2
------
10 1.1
20 2.2
30 3.3
</code></pre>

<p>A flipped column dictionary, called a <em>table</em>, is a first class entity in q.</p>
<p>In the table setting, the section dictionaries are called <em>records</em> of the table. They correspond to the rows of SQL tables. To see why, observe that the record at index 0 is effectively the horizontal slice of the table in "row" 0. Let's re-examine record retrieval, this time omitting the optional trailing semicolon from the elided second index.</p>
<pre><code class="q">q)t[0]
c1| 10
c2| 1.1
q)t[1]
_
q)t[2]
_
</code></pre>

<p>Looking at this syntactically, we might conclude that <code>t</code> is a list of record dictionaries. In fact it is, at least logically; physically a table is always stored as a collection of named columns.</p>
<p>Thus we have arrived at:</p>
<ul>
<li>A table is a flipped column dictionary.</li>
<li>It is also a list of record dictionaries.</li>
</ul>
<p>While we can always construct a table as a flipped column dictionary, there is a convenient syntax that puts the names together with the columns. The notation looks a bit odd at first but it will seem more reasonable when we encounter keyed tables later.</p>
<pre><code class="q">q)([] c1:10 20 30; c2:1.1 2.2 3.3)
c1 c2
------
10 1.1
20 2.2
30 3.3
</code></pre>

<p>A few notes.</p>
<ul>
<li>The square brackets are necessary to differentiate a table from a list</li>
<li>The occurrence of <code>:</code> is <strong>not</strong> assignment. It is merely a syntactic marker separating the name from the column values</li>
<li>The column names in table definition are <strong>not</strong> symbols, although they are converted to symbols under the covers.</li>
</ul>
<h2 id="116-q-sql-101">1.16 q-sql 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#116-q-sql-101" title="Permanent link">&para;</a></h2>
<p>There are multiple ways to operate on tables. First, you can treat a table as the column dictionary that it is and perform basic dictionary operations on it. Qbies who are familiar with SQL may find it easier to use q's version of SQL-like syntax, called <em>q-sql</em>. In this section we explore basic q-sql features.</p>
<p>The fundamental q-sql operation is the <code>select</code> template, We say 'template' because, unlike other q primitives, it is <strong>not</strong> evaluated right-to-left. Rather, it is syntactic sugar designed to mimic SQL <code>SELECT</code>. That said, we emphasize that although <code>select</code> does act like SQL <code>SELECT</code> in some respects, there is one fundamental difference. Whereas SQL <code>SELECT</code> operates on fields on a row-by-row basis, <code>select</code> performs vector operations on column lists. Insisting on thinking in rows with q tables will end in tears.</p>
<p>We construct a simple table for our examples.</p>
<pre><code class="q">q)t:([] c1:1000+til 6; c2:`a`b`c`a`b`a; c3:10*1+til 6)
q)t
_
</code></pre>

<p>The simplest form of <code>select</code> retrieves all the records and columns of the table by leaving unspecified which rows or columns – there is no need for the wildcard <code>*</code> of SQL. The <code>select</code> and <code>from</code> <strong>must</strong> occur together.</p>
<pre><code class="q">q)select from t
_
</code></pre>

<p>The next example shows how to specify which columns to return and optional names to associate with them.</p>
<pre><code class="q">q)select c1, val:2*c3 from t
_
</code></pre>

<p>We make several observations</p>
<ul>
<li>Result columns are separated by <code>,</code> and are sequenced left-to-right.</li>
<li>Any q expressions inside <code>select</code> are evaluated right-to-left, as usual.</li>
<li>As was the case with table definition syntax, instances of <code>:</code> are <strong>not</strong> assignment; rather, they are syntactic markers separating a column name to its left from the q expression to its right, which computes the column.</li>
<li>Arbitrary q expressions can be used to produce result columns, provided all column lengths are the same.</li>
<li>There are optional <code>by</code> and <code>where</code> phrases for grouping and constraints.</li>
</ul>
<p>The next example demonstrates using the <code>by</code> phrase of <code>select</code> to perform grouping. The basic usage is similar to <code>GROUP BY</code> in SQL, in which the column expressions involve aggregate functions. All records having common values in the <code>by</code> column(s) are grouped together and then aggregation is performed within each group.</p>
<pre><code class="q">q)select count c1, sum c3 by c2 from t
c2| c1 c3
--| ------
a | 3 110
b | 2 70
c | 1 30
</code></pre>

<p>An advantage of q-sql <code>by</code> is that you can group on a computed column.</p>
<pre><code class="q">q)select count c2 by ovrund:c3&lt;=40 from t
ovrund| c2
------| --
0     | 2
1     | 4
</code></pre>

<p>Closely related to <code>select</code> is the <code>update</code> template. It has the same syntax as <code>select</code> but semantically the names to the left of <code>:</code> are interpreted as columns to modify (or add, if not present). As with <code>select</code>, you can specify an optional <code>where</code> phrase, which limits the action to just those records satisfying specified constraint(s). Here is how to scale the <code>c3</code> column of <code>t</code> just in the positions having <code>c2</code> equal to <code>`a</code>.</p>
<pre><code class="q">q)update c3:10*c3 from t where c2=`a
c1   c2 c3
-----------
1000 a  100
1001 b  20
1002 c  30
1003 a  400
1004 b  50
1005 a  600
</code></pre>

<p>We emphasize that the operations in <code>update</code> are vector operations on columns, not row-by-row.</p>
<p>Not all of q-sql is included in the templates. For example, to sort a table ascending by column(s), use <code>xasc</code> with left operand the symbol column name(s) in major-to-minor order.</p>
<pre><code class="q">q)`c2 xasc t
_
</code></pre>

<h2 id="117-example-trades-table">1.17 Example: Trades Table<a class="headerlink" href="1_Q_Shock_and_Awe.1#117-example-trades-table" title="Permanent link">&para;</a></h2>
<p>In this section we construct a toy trades table to demonstrate the power of q-sql.</p>
<p>A useful operator for constructing lists of test data is <code>?</code>, which generates pseudo-random data. We can generate 10 numbers randomly selected, with replacement, from the first 20 integers starting at 0 (i.e., not including 20).</p>
<pre><code class="q">q)10?20 / ymmv
4 13 9 2 7 0 17 14 9 18
q)10?20
_
q)10?20
_
</code></pre>

<p>We can similarly generate 10 random floats between 0.0 and 100.0 (not including 100.0).</p>
<pre><code class="q">q) 10?100.0
_
</code></pre>

<p>We can make 10 random selections from the items in a list</p>
<pre><code class="q">q)10?`aapl`ibm
_
</code></pre>

<p>Now to our trades table. Since a table is a collection of columns, we first build the columns. We apologize for using excessively short names so that things fit easily on the printed page.</p>
<p>First we construct a list of 1,000,000 random dates in the month of January 2015.</p>
<pre><code class="q">q)dts:2015.01.01+1000000?31
</code></pre>

<p>Next a list of 1,000,000 timespans.</p>
<pre><code class="q">q)tms:1000000?24:00:00.000000000
</code></pre>

<p>Next a list of 1,000,000 tickers chosen from AAPL, GOOG and IBM. It is customary to make these lower-case symbols.</p>
<pre><code class="q">q)syms:1000000?`aapl`goog`ibm
</code></pre>

<p>Next a list of 1,000,000 volumes given as positive lots of 10.</p>
<pre><code class="q">q)vols:10*1+1000000?1000
</code></pre>

<p>As an initial cut, we construct a list of 1,000,000 prices in cents uniformly distributed within 10% of 100.0. We will adjust this later.</p>
<pre><code class="q">q)pxs:90.0+(1000000?2001)%100
</code></pre>

<p>Now collect these into a table and inspect the first 5 records. Remember, a table is a list of records so <code>#</code> applies.</p>
<pre><code class="q">q)trades:([] dt:dts; tm:tms; sym:syms; vol:vols; px:pxs)
q)5#trades
_
</code></pre>

<p>The first thing you observe in your console display is that the trades are not in temporal order. We fix this by sorting on time within date using <code>xasc</code>.</p>
<pre><code class="q">q)trades:`dt`tm xasc trades
q)5#trades
_
</code></pre>

<p>Now we adjust the prices. At the time of this writing (Sep 2015) AAPL was trading around 100, so we leave it alone. But we adjust GOOG and IBM to their approximate trading ranges by scaling.</p>
<pre><code class="q">q)trades:update px:6*px from trades where sym=`goog
q)trades:update px:2*px from trades where sym=`ibm
q)5#trades
dt tm sym vol px
------------------------------------------------
2014.01.01 0D00:00:04.117137193 goog 6140 582.24
2014.01.01 0D00:00:06.227586418 ibm 7030 196.66
2014.01.01 0D00:00:07.611505687 ibm 7740 185.14
2014.01.01 0D00:00:11.415991187 goog 4130 605.34
2014.01.01 0D00:00:12.739158421 goog 8810 579.36
</code></pre>

<p>This looks a bit more like real trades. Let's perform some basic queries as sanity checks. Given that both price and volume are uniformly distributed, we expect their averages to approximate the mean. Using the built-in average function <code>avg</code> we see that they do.</p>
<pre><code class="q">q)select avg px, avg vol by sym from trades
_
</code></pre>

<p>Similarly, we expect the minimum and maximum price for each symbol to be the endpoints of the uniform range.</p>
<pre><code class="q">q)select min px, max px by sym from trades
_
</code></pre>

<p>Our first non-trivial query computes the 100-millisecond bucketed volume-weighted average price (VWAP). This uses the built-in dyadic function <code>xbar</code>. The left operand of <code>xbar</code> is an interval width, and the right operand is a list of numeric values. The effect of <code>xbar</code> is to shove each input to the left-hand end point of the interval of specified width in which it falls. For example,</p>
<pre><code class="q">q)5 xbar til 15
0 0 0 0 0 5 5 5 5 5 10 10 10 10 10
</code></pre>

<p>This is useful for grouping since it effectively buckets all the values within each interval to the left end-point of that interval. Recalling that a timespan is actually an integral count of nanoseconds since midnight, to compute 100-millisecond buckets we will use <code>xbar</code> with an interval of 100,000,000.</p>
<p>We also require <code>wavg</code>, a dyadic function that computes the average of the numeric values in its right operand weighted by the values of its left operand.</p>
<pre><code class="q">q)1 2 3 wavg 50 60 70
_
</code></pre>

<p>Now we put things together in a single query. For convenience of display, we group by bucketed time within symbol.</p>
<pre><code class="q">q)select vwap:vol wavg px by sym,bkt:100000000 xbar tm from trades
_
</code></pre>

<p>That's all there is to it!</p>
<p>Our final query involves the maximum profit (or analogously, maximum drawdown) realizable over the trading period. To understand the concept, imagine that you have a DeLorean with flux capacitor and are able to travel into the future and record historical trade results. Upon returning to the present, you are given $1,000,000 to invest with the stipulation that you can make one buy and one sell for AAPL and you are not allowed to short the stock. As a good capitalist your goal is to maximize your profit.</p>
<p>Restating the problem, we wish to determine the optimum time to buy and sell for the largest (positive) difference in price, where the buy precedes the sell. We state the solution as a q koan, which you should contemplate until enlightenment.</p>
<pre><code class="q">q)select max px-mins px from trades where sym=`aapl
_
</code></pre>

<p>Two hints if Zen enlightenment is slow to dawn.</p>
<ul>
<li>Take the perspective of looking back from a potential optimum sell</li>
<li>The optimum buy must happen at a cumulative local minimum; otherwise, you could back up to an earlier, lower price and make a larger profit.</li>
</ul>
<h2 id="118-file-io-101">1.18 File I/O 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#118-file-io-101" title="Permanent link">&para;</a></h2>
<p>For this section we need to introduce the other q primitive text data type, called <em>char</em>. A single ASCII character is represented as that character in double quotes. Here are some examples.</p>
<pre><code class="q">q)&quot;a&quot;
_
q)&quot; &quot;
_
q)&quot;_&quot;
_
</code></pre>

<p>The char <code>"a"</code> is an atom but is <strong>not</strong> the same as its symbol cousin <code>`a</code>.</p>
<p>Things get sticky with a simple list of char. Enter such a list in general form and observe the simplified display echoed on the console.</p>
<pre><code class="q">q)(&quot;s&quot;;&quot;t&quot;; &quot;r&quot;; &quot;i&quot;; &quot;n&quot;; &quot;g&quot;)
&quot;string&quot;
</code></pre>

<p>A simple list of char looks like a string from traditional languages and is even called a <em>string</em> in q. But this string is <strong>not</strong> an atom or even a first class entity in q; it is a list having count 6. And it should <strong>not</strong> be confused with its symbol cousin <code>`string</code>, which is an atom having count 1.</p>
<pre><code class="q">q)count &quot;string&quot;
_
q)count `string
_
</code></pre>

<p>With these preliminaries out of the way, we proceed to I/O. The way q handles I/O is Spartan. No instantiation of readers, writers, serializers and the like. We admit that the notation is funky, but you will grow to appreciate its conciseness just as a serious driver prefers a manual transmission.</p>
<p>File I/O begins with symbolic handles. A <em>symbolic file handle</em> is a symbol of a particular form that represents the name of a resource on the file system. The leading ':' distinguishes the symbol as a handle. For example,</p>
<pre><code class="q">`:path/filename
</code></pre>

<p>We use the following simple table in our demonstration.</p>
<pre><code class="q">q)t:([] c1:`a`b`c; c2:1.1 2.2 3.3)
q)t
_
</code></pre>

<p>Pick a destination to write your files. This being a tutorial, the examples here will use</p>
<p><code>/q4m/examples</code></p>
<p>You should replace this with your chosen directory in what follows.</p>
<p>To save the table <code>t</code> in a serialized binary data file, use the built-in function <code>set</code> with symbolic file handle as left operand and the source data as the right operand.</p>
<pre><code class="q">q)`:/q4m/examples/t set t
`:/q4m/examples/t
</code></pre>

<p>Observe that the console echoes the symbolic file handle in case of success. To read the stored data and deserialize it back into the session, use <code>get</code> with the symbolic file handle.</p>
<pre><code class="q">q)get `:/q4m/examples/t
_
</code></pre>

<p>Presto! It's out and back.</p>
<p>To write text data to a file we use one of the overloads of the infelicitously named <code>0:</code> operator. The key idea is that q considers a text file to correspond to a list of strings, one string per file record. We supply <code>0:</code> with a symbolic file handle as its left operand and a list of strings (i.e., a list of lists of char) in the right operand.</p>
<pre><code class="q">q)`:/q4m/examples/life.txt 0: (&quot;Meaning&quot;;&quot;of&quot;;&quot;life&quot;)
_
</code></pre>

<p>To read a text file as a list of strings, use <code>read0</code> with the symbolic handle.</p>
<pre><code class="q">q)read0 `:/q4m/examples/life.txt
_
</code></pre>

<p>And now, what everyone is waiting for: writing and reading CSV files. Hold on to your hats, as this uses three different overloads of <code>0:</code>. One to prepare the tables as text; the one we already met to write text files; and one to read formatted text files. Certainly a regrettable naming convention.</p>
<p>Preparing a table as CSV text is simple; q handles the quoting and escaping of special characters. Apply <code>0:</code> with the defined constant <code>csv</code> as left operand and the table in the right operand.</p>
<pre><code class="q">q)csv 0: t
_
</code></pre>

<p>Your console display shows the table properly prepared as strings. Now compose this result with the previous overload of <code>0:</code> and write it out. As a check, we use <code>read0</code> to read back the text file.</p>
<pre><code class="q">q)`:/q4m/examples/t.csv 0: csv 0: t
_
q)read0 `:/q4m/examples/t.csv
_
</code></pre>

<p>Finally, we demonstrate the third overload of <code>0:</code> to parse the formatted CSV file into the q session as a table. The right operand is a symbolic file handle. The left operand is a control list with two items. The first is a string of upper-case characters indicating the types of each field within the text row.</p>
<p>The second item of the control list is the field separation character – in our case this is <code>,</code>. This separator char should be enlisted if there are column headers in the first row of the file, as in our case. These headers are used as table column names. For our example we have,</p>
<pre><code class="q">q)(&quot;SF&quot;; enlist &quot;,&quot;) 0: `:/q4m/examples/t.csv
_
</code></pre>

<p>Here <code>"S"</code> and <code>"F"</code> indicate that there are two fields, having types symbol and float. The separator is an enlisted <code>","</code>.</p>
<p>Yes, the naming and notation is obscure. But you have to admit that file I/O can't get much simpler.</p>
<h2 id="119-interprocess-communication-101">1.19 Interprocess Communication 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#119-interprocess-communication-101" title="Permanent link">&para;</a></h2>
<p>For this section, you will need two open q sessions, best done on the same machine. We recommend that this machine be one that is not encumbered with enterprise security. Chose one session to be your "server" and open a port with the command <code>\p</code> (note lower case) followed by the port number. To verify that the port is open, execute the naked command <code>\p</code> and check that it echoes a 32-bit int of the port you opened.</p>
<pre><code class="q">q)\p 5042 / on server
q)\p
5042i
</code></pre>

<p>The syntax of Interprocess Communication (IPC) is similar to that of File I/O. A <em>symbolic network handle</em> is a symbol of a particular form that identifies the name of a resource on the network. For our purposes, it suffices to consider a network handle of the simplest form.</p>
<pre><code class="q">`:localhost:5042
</code></pre>

<p>The leading <code>:</code> in the symbol identifies it as a symbolic handle. To the left of the second <code>:</code> is the name of the network resource – in this case, the machine on which the q session is running. To the right of <code>:</code> is a (presumably open) port on the destination machine that will be used for TCP/IP communication.</p>
<p>To open a connection, use a symbolic handle as argument to <code>hopen</code> and store the result in a variable, traditionally called <code>h</code>. Do that now in your "client" session after ensuring that the specified port is open in the "server" session.</p>
<pre><code class="q">q)h:hopen `:localhost:5042 / on client
</code></pre>

<p>The variable <code>h</code> is called an <em>open handle</em>. It holds a function for sending a request to the server and receiving the result of that request. Now we're ready to party.</p>
<p>There are three ways to send requests from the client to the server, only one of which is safe for production applications. For demonstration purpose (only), we show the simplest, which should only be used in development environments. When invoked with a string – i.e., a list of chars – argument, the handle function <code>h</code> synchronously sends that string to the server, where it is executed, and any result is returned from the application of <code>h</code>.</p>
<pre><code class="q">q)h &quot;6*7&quot; / on client
42
</code></pre>

<p>Clearly this isn't safe, as arbitrary text can be sent for nefarious purposes.</p>
<p>A safer way to make requests to the server is to invoke <code>h</code> with a list containing the name of a function that (presumably) exists on the server, followed by arguments to that function. When <code>h</code> is invoked with such a list argument, it (synchronously) causes the server to apply the named function to the transmitted arguments, and then returns any result from the server is its own output. This corresponds to call-by-name in a traditional remote-procedure call. It is safer since the server can inspect the symbolic function name and determine whether the requesting user is authorized to execute it. </p>
<p>On your server process, create a simple function of two arguments.</p>
<pre><code class="q">q)f:{x*y} / on server
</code></pre>

<p>On your client process, invoke <code>h</code> with a list containing the symbolic name of the remote function followed by its two arguments.</p>
<pre><code class="q">q)h (`f; 6; 7) / on client
_
</code></pre>

<p>Observe that nothing is displayed on the server console since the function application there returns its result to the client. To close the connection with the server, flush buffers and free resources, apply <code>hclose</code> to the open handle.</p>
<pre><code class="q">q)hclose h / on client
</code></pre>

<p>IPC doesn't get any easier.</p>
<h2 id="120-example-asynchronous-callbacks">1.20 Example: Asynchronous Callbacks<a class="headerlink" href="1_Q_Shock_and_Awe.1#120-example-asynchronous-callbacks" title="Permanent link">&para;</a></h2>
<p>The IPC mechanism of q does not have callbacks built in but it is powerful enough that we can create callbacks ourselves. We assume that you have started separate client and server q sessions and have opened the connection from the client to the server, as in the previous section.</p>
<p>Heretofore, calls to the server were synchronous, meaning that at the point of the remote call, the client blocks until the requested work on the server completes and the result is returned. It is also possible to make the remote call asynchronous. In this case, the client does <strong>not</strong> block: the application of the open handle returns immediately.</p>
<p>In order to demonstrate this, we have to come clean about what is really in the open handle <code>h</code>. See for yourself by displaying the <code>h</code> from an open connection.</p>
<pre><code class="q">q)h:hopen `:localhost:5042
q)h
3i
</code></pre>

<p>Your result will probably not match this but it <strong>will</strong> be an integer. Yes, an open handle is just a positive 32-bit integer. When this (positive) integer is applied as a function, the call is synchronous. To make an asynchronous call, negate the value in <code>h</code> – i.e., <code>neg h</code> – and use this with function application syntax. Seriously.</p>
<p>Since nothing will be displayed in the client session, it helps to display progress on the server as the request is performed. Create the function <code>echo</code> in the server session.</p>
<pre><code class="q">q)echo:{show x} / on server
</code></pre>

<p>Now make an asynchronous remote call to <code>echo</code> from the client.</p>
<pre><code class="q">q)(neg h) (`echo; 42) / on client
_
</code></pre>

<p>Observe on your q consoles that the client application returns immediately with no result and that the server displays the progress message.</p>
<p>Now to callbacks. We begin by instrumenting a function <code>rsvp</code> on the server that, when invoked remotely, will call back to the client. It will receive two parameters: its own argument and the symbolic name of the client function to call.</p>
<pre><code class="q">q)rsvp:{[arg;cb] ..} / on server
</code></pre>

<p>We initially invoke the server's <code>show</code> with the passed arg to indicate that we are hard at work on the transmitted data.</p>
<pre><code class="q">q)rsvp:{[arg;cb] show arg;}
</code></pre>

<p>Now for the big moment. To make the return call from the server to the client, we need the open handle of the connection for the remote call we are processing. This is conveniently placed in the q system variable <code>.z.w</code> ("who" called) for the duration of each remote call. We use it to make an <strong>asynchronous</strong> remote call (hence the neg) over the caller's handle, passing the provided callback name and our arduously computed result 43.</p>
<pre><code class="q">q)rsvp:{[arg;cb] show arg; (neg .z.w) (cb; 43);}
</code></pre>

<p>In the final step, we display another progress message on the server console indicating the remote call has completed. Since this function returns its actual result remotely, we end its body with <code>;</code> to ensure that it returns nothing locally.</p>
<pre><code class="q">q)rsvp:{[arg;cb] show arg; (neg .z.w) (cb; 43); show `done;}
</code></pre>

<p>We turn to the client side and create echo to serve as the function called back for this demonstration.</p>
<pre><code class="q">q)echo:{show x} / on client
</code></pre>

<p>It remains to fire off the remote asynchronous call from the client. We pass the client open handle a list containing: the name of the remote function; the argument for the remote function; and the name of our own function to be called back during the remote computation. Be sure to do it asynchronously else you will get deadlocks.</p>
<pre><code class="q">q)(neg h) (`rsvp; 42; `echo) / on client
</code></pre>

<p>Provided all went well, the server console will display:</p>
<pre><code class="q">q)42
`done
</code></pre>

<p>The client console should display:</p>
<pre><code class="q">q)(neg h) (`rsvp; 42; `echo)
q)43
</code></pre>

<p>And there you have it. Callbacks built from scratch in q using a few lines of code.</p>
<h2 id="121-websockets-101">1.21 Websockets 101<a class="headerlink" href="1_Q_Shock_and_Awe.1#121-websockets-101" title="Permanent link">&para;</a></h2>
<p>In traditional web applications, the browser (as client) initiates requests and the server replies with the page or data requested using the HTTP protocol. The web server does the serious data manipulation. In recent years, browsers and JavaScript have evolved to levels of sophistication that permit quite powerful processing to be done safely on the client side – for example, input editing and display formatting. Indeed, you can use WebSockets to put a browser front end on traditional applications, replacing both the web server and proprietary GUI packages in one fell swoop (phrase used with its original meaning).</p>
<p>The key idea of WebSockets is that the client makes an initial HTTP request to upgrade the protocol. Assuming the request is accepted, subsequent communication occurs over TCP/IP sockets protocol. In particular, once the WebSockets connection is made, either the client or server can initiate messaging.</p>
<p>We begin with a simple example that demonstrates how to connect a browser to a q process via WebSockets, request data and then display the result. We assume familiarity with basic HTML5 and JavaScript. Enter the script below in a text editor and save it as <code>sample1.html</code> in a location accessible to your browser.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>This script uses the <code>c.js</code> script for serialization and deserialization between q and JavaScript, which you can download from <a href="https://github.com/KxSystems/kdb/blob/master/c/c.js">GitHub</a>. For simplicity in this demo, we have placed a copy in the same directory as the <code>sample1.html</code> script so that it can be loaded with a (trivial) relative path. You should point this to the location of <code>c.js</code> in your q/kdb installation.</p>
</div>
<p>This script creates a minimal page with a field to display the result returned from the q server. After declaring some useful variables, we get to the interesting bits that create the WebSockets connection and handle the data from q. We create a WebSockets object and set its <code>binaryType</code> property to <code>"arraybuffer"</code>, which is necessary for the exchange of q serialized data.</p>
<p>We wire the behavior of the connection object by attaching handler functions for WebSockets events. Most important are the <code>onopen</code> and <code>onmessage</code> events. When the connection is opened, we serialize a JavaScript object containing a payload string and send it (asynchronously) to the q process; it will arrive there as a serialized dictionary. Conversely, when a serialized message is received from the q process, we deserialize it and invoke the <code>sayN</code> function on the content. The <code>sayN</code> function locates the display field on the page and copies its parameter there.</p>
<pre><code class="html">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src=&quot;c.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
 var serverurl = &quot;//localhost:5042/&quot;,
     c = connect(),
     ws;
  function connect() {
    if (&quot;WebSocket&quot; in window) {
      ws = new WebSocket(&quot;ws:&quot; + serverurl);
      ws.binaryType=&quot;arraybuffer&quot;;
      ws.onopen=function(e){
        ws.send(serialize({ payload: &quot;What is the meaning of life?&quot; }));
      };
      ws.onclose=function(e){
      };
      ws.onmessage=function(e){
        sayN(deserialize(e.data));
      };
      ws.onerror=function(e) {window.alert(&quot;WS Error&quot;) };
    } else alert(&quot;WebSockets not supported on your browser.&quot;);
  }
  function sayN(n) {
    document.getElementById('answer').textContent = n;
  }
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;What is the meaning of life?&lt;/p&gt;
  &lt;p id=&quot;answer&quot; style=&quot;font-size: 10em&quot;&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Now to the server side, where the q code is blissfully short. Start a fresh q session, open port 5042 and set the web socket handler <code>.z.ws</code> to a function that will be called on receipt of each message from the browser.</p>
<pre><code class="q">q)\p 5042
q).z.ws:{0N!-9!x; neg[.z.w] -8!42}
</code></pre>

<p>The handler first displays its parameter, which we do for demonstration only as we have no further use for it in this example. Then it serializes the answer using <code>-8!</code> and sends it back (asynchronously) to the browser. That's it!</p>
<p>Now point your browser to <code>file://sample1.html</code> and you should see the answer displayed in a font large enough to be seen from the international space station. Notice that there is no web server here other than q itself.</p>
<p>Now that we're warmed up, let's try a more interesting example. Here the browser will ask the q server to call out to the Yahoo Finance site and retrieve historical stock price and volume data for Apple. The browser will then use the publicly available High Charts package to display a spiffy stock history graph. In this example there will be a bit more JavaScript and q, but it's tolerable. And again, no web server other than q.</p>
<p>First let's tackle the browser side. Save the following text file as <code>ws101.html</code>.</p>
<pre><code class="html">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;script src=
    &quot;http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&quot;&gt;
  &lt;/script&gt;
  &lt;script src=&quot;http://code.highcharts.com/stock/highstock.js&quot;&gt;&lt;/script&gt;
  &lt;script src=
    &quot;http://code.highcharts.com/stock/modules/exporting.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=&quot;container&quot; style=&quot;height: 500px; min-width: 500px&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;script src=&quot;c.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  var serverurl = &quot;//localhost:5042/&quot;,
    ws,
    c = connect(),
    ticker = &quot;AAPL&quot;,
    startdt = &quot;2008-01-01&quot;;

  function connect() {
    if (&quot;WebSocket&quot; in window) {
      ws=new WebSocket(&quot;ws:&quot; + serverurl);
      ws.binaryType=&quot;arraybuffer&quot;;
      ws.onopen=function(e){
        toQ([ticker, startdt]);
      };
      ws.onclose=function(e){
      };
      ws.onmessage=function(e){
        return fromQ(e.data);
      };
      ws.onerror=function(e) {window.alert(&quot;WS Error&quot;) };
    } else alert(&quot;WebSockets not supported on your browser.&quot;);
  }

  function toQ(pl) {
    ws.send(serialize({ payload: pl }));
  }

  function fromQ(raw) {
    var data = deserialize(raw);
    return createChart(data);
  }

  function toUTC(x) {
    var y = new Date(x);
    y.setMinutes(y.getMinutes() + y.getTimezoneOffset());
    return y.getTime();
  }

  function createChart(data) {
    $('#container').highcharts('StockChart', {
      rangeSelector : {
        selected : 1
      },
      title : {
        text : ticker + ' Stock Price'
      },
      series : [{
        name : ticker,
        data : data.hist.map(function(x){return [toUTC(x.Date), x.Close]}),
        tool**tip:** {
          valueDecimals: 2
        }
      }]
    });
  }
&lt;/script&gt;
&lt;/html&gt;
</code></pre>

<p>We provide a concise description of the highlights, assuming familiarity with basic HTML5 and JavaScript.</p>
<ul>
<li>Load external scripts from Google (for JQuery) and High Charts (for the actual graphical display).</li>
<li>Specify a simple HTML element to contain the actual graph.</li>
<li>Load the local Kx file <code>c.js</code> for q serialization/deserialization.</li>
<li>Create the connection by calling <code>connect()</code>, which assigns a handler for <code>onopen</code> that calls <code>toQ</code> with the data variables.</li>
<li>Assign a handler to <code>onmessage</code> that passes the message to <code>fromQ</code>.</li>
<li>Initialize the variables that specify the historical data we will request from Yahoo Finance.</li>
<li>The <code>toQ</code> function wraps its parameter in a JavaScript object, serializes it and (asynchronously) sends it to the q process where it will manifest as a serialized dictionary.</li>
<li>The <code>fromQ</code> function deserializes a received q dictionary, which magically becomes a JavaScript object, and passes it to the <code>createChart</code> function.</li>
<li>The auxiliary function <code>toUTC</code> transforms q dates to a form suitable for High Stocks.</li>
<li>The <code>createChart</code> function instantiates a High Stocks stock price graph and populates the appropriate properties. Note the use of <code>map</code> to iterate over the individual time-series points; it is the functional programming equivalent of <code>each</code> in q. Also observe that we use the closing prices for the plot, as is customary.</li>
</ul>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The alignment between JavaScript objects and q dictionaries, along with built-in serialization/deserialization, makes data transfer between the browser and q effortless.</p>
</div>
<p>Now to the q server side, which has fewer lines of code that do much work. Save the following text file as <code>ws101.q</code>.</p>
<!-- FIXME Yahoo Finance has discontinued the service used below.
`raw` gets set to an empty string. -->

<pre><code class="q">\p 5042

adjDate:{[dt] 0 -1 0i+`year`mm`dd$dt}; / 2015.01.01 -&gt; 2015 0 1i

getHist:{[ticker; sdt; edt]
  tmpl:&quot;http://ichart.finance.yahoo.com/table.csv?s=&quot;,
        &quot;%tick&amp;d=%em&amp;e=%ed&amp;f=%ey&amp;g=d&amp;a=%sm&amp;b=%sd&amp;c=%sy&quot;;
  args:string ticker,raze adjDate each (sdt;edt);
  url:ssr/[tmpl; (&quot;%tick&quot;;&quot;%sy&quot;;&quot;%sm&quot;;&quot;%sd&quot;;&quot;%ey&quot;;&quot;%em&quot;;&quot;%ed&quot;); args];
  raw:system &quot;wget -q -O - &quot;,url;
  t:(&quot;DFFFFJF&quot;; enlist &quot;,&quot;) 0: raw;
  `Date xasc `Date`Open`High`Low`Close`Volume`AdjClose xcol t}

getData:{[ticker; sdt] select Date,Close from getHist[`$ticker;&quot;D&quot;$sdt;.z.D]}

.z.ws:{
  args:(-9!x) `payload;
  neg[.z.w] -8!(enlist `hist)!enlist .[getData; args; `err]}
</code></pre>

<p>Following is a description of the q code.</p>
<ul>
<li>Open port 5042</li>
<li>Define the <code>adjDate</code> function that extracts a triple of ints comprising the year, month and day from a q date. Note the (weird) decrement of month, which is required by Yahoo Finance.</li>
<li>Define the function <code>getHist</code> that does the real work.</li>
<li>Create a string template for the URL in which placeholders of the form <code>%arg</code> will be replaced with specific values.</li>
<li>Run the start-date and end-date parameters through the date adjustment, stringify the results and concatenate onto the ticker string to form a list of actual argument strings for the URL.</li>
<li>Use the <em>over</em> operator <code>/</code> with <code>ssr</code> (string search and replace) and recursively replace each placeholder in the template with the corresponding stringified argument.</li>
<li>Instruct the OS to make a <code>wget</code> web call to the fully specified Yahoo Finance URL. This returns raw time-series data as comma-separated string records with column headers in the first row.</li>
<li>Parse the text data into a table with the appropriate data types.</li>
<li>Rename the columns suitably for user display, sort by date (just in case) and return the result.</li>
</ul>
<p>The final entry in the q script sets the WebSockets handler. Here is its behavior.</p>
<ul>
<li>Deserialize the passed JavaScript object into a q dictionary and extract the payload field.</li>
<li>Perform protected evaluation of the multi-variate <code>getHist</code> function on the passed arguments.</li>
<li>Serialize the resulting time series table and <strong>asynchronously</strong> send it to the browser, where it appears as a serialized list of JavaScript objects, one for each day.</li>
</ul>
<p>To run this example, start a fresh q process and load the <code>ws101.q</code> script.</p>
<pre><code class="q">q) \l /pages/ws101.q
</code></pre>

<p>Now point your browser at</p>
<p><a href="file:///C:\pages\ws101.html">file:///pages/ws101.html</a></p>
<p>Wait a few seconds (depending on the speed of your internet connection) and – <em>voilà!</em> – you have a nifty graph of AAPL stock price.</p>
<p><img alt="AAPL stock price" src="img/qfm001.png" /></p>
                
                  
                
              
              
                


              
            </article>
          </div>
        </div>
      </main>
      
        
<footer class="md-footer">
  
    <div class="md-footer-nav">
      <nav class="md-footer-nav__inner md-grid">
        
          <a href="0_Overview/index.html" title="0. Overview" class="md-flex md-footer-nav__link md-footer-nav__link--prev" rel="prev">
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-back md-footer-nav__button"></i>
            </div>
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Previous
                </span>
                0. Overview
              </span>
            </div>
          </a>
        
        
          <a href="2_Basic_Data_Types_Atoms/index.html" title="2. Basic Data Types – Atoms" class="md-flex md-footer-nav__link md-footer-nav__link--next" rel="next">
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Next
                </span>
                2. Basic Data Types – Atoms
              </span>
            </div>
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-forward md-footer-nav__button"></i>
            </div>
          </a>
        
      </nav>
    </div>
  
  <div class="md-footer-meta md-typeset">
    <div class="md-footer-meta__inner md-grid">
      <div class="md-footer-copyright">
        
          <div class="md-footer-copyright__highlight">
            ©2015 Jeffry A. Borror / q4m LLC. Kx® and kdb+ are registered trademarks of Kx Systems, Inc., a subsidiary of First Derivatives plc.
          </div>
        
        powered by
        <a href="http://www.mkdocs.org">MkDocs</a>
        and
        <a href="https://squidfunk.github.io/mkdocs-material/">
          Material for MkDocs</a>
      </div>
      
        
      
    </div>
  </div>
</footer>
      
    </div>
    
      <script src="assets/javascripts/application.b438e6c5.js"></script>
      
      <script>app.initialize({version:"0.17.3",url:{base:".."}})</script>
      
        <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
      
        <script src="https://tracker.mrpfd.com/tracker.js"></script>
      
        <script src="http://code.kx.com/scripts/googleanalytics.js"></script>
      
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"></script>
      
        <script src="https://use.fontawesome.com/3dbf29ed12.js"></script>
      
        <script src="http://code.kx.com/scripts/prism.js"></script>
      
    
    
      
    
  </body>
</html>