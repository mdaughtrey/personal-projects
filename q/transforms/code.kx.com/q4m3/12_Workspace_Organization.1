



<!DOCTYPE html>
<html lang="en" class="no-js">
  <head>
    
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <meta http-equiv="x-ua-compatible" content="ie=edge">
      
        <meta name="description" content="Q for Mortals">
      
      
        <link rel="canonical" href="12_Workspace_Organization.1">
      
      
        <meta name="author" content="Jeffry Borror">
      
      
        <meta name="lang:clipboard.copy" content="Copy to clipboard">
      
        <meta name="lang:clipboard.copied" content="Copied to clipboard">
      
        <meta name="lang:search.language" content="en">
      
        <meta name="lang:search.pipeline.stopwords" content="True">
      
        <meta name="lang:search.pipeline.trimmer" content="True">
      
        <meta name="lang:search.result.none" content="No matching documents">
      
        <meta name="lang:search.result.one" content="1 matching document">
      
        <meta name="lang:search.result.other" content="# matching documents">
      
        <meta name="lang:search.tokenizer" content="[\s\-]+">
      
      <link rel="shortcut icon" href="img/favicon.ico">
      <meta name="generator" content="mkdocs-0.17.3, mkdocs-material-2.7.2">
    
    
      
        <title>12. Workspace Organization - Q for Mortals</title>
      
    
    
      <link rel="stylesheet" href="assets/stylesheets/application.8d40d89b.css">
      
        <link rel="stylesheet" href="assets/stylesheets/application-palette.6079476c.css">
      
    
    
      <script src="assets/javascripts/modernizr.1aa3b519.js"></script>
    
    
      <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
      
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,400i,700|Roboto+Mono">
        <style>body,input{font-family:"Roboto","Helvetica Neue",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:"Roboto Mono","Courier New",Courier,monospace}</style>
      
      <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    
    
      <link rel="stylesheet" href="stylesheets/extra.css">
    
      <link rel="stylesheet" href="http://code.kx.com/stylesheets/prism.css">
    
    
  </head>
  
    
    
    <body dir="ltr" data-md-color-primary="blue" data-md-color-accent="deep-orange">
  
    <svg class="md-svg">
      <defs>
        
        
      </defs>
    </svg>
    <input class="md-toggle" data-md-toggle="drawer" type="checkbox" id="drawer" autocomplete="off">
    <input class="md-toggle" data-md-toggle="search" type="checkbox" id="search" autocomplete="off">
    <label class="md-overlay" data-md-component="overlay" for="drawer"></label>
    
      <a href="12_Workspace_Organization.1#12-workspace-organization" tabindex="1" class="md-skip">
        Skip to content
      </a>
    
    
      <header class="md-header" data-md-component="header">
  <nav class="md-header-nav md-grid">
    <div class="md-flex">
      <div class="md-flex__cell md-flex__cell--shrink">
        <a href="http://code.kx.com/q4m3" title="Q for Mortals" class="md-header-nav__button md-logo">
          
            <img src="img/qfm3.jpg" width="24" height="24">
          
        </a>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        <label class="md-icon md-icon--menu md-header-nav__button" for="drawer"></label>
      </div>
      <div class="md-flex__cell md-flex__cell--stretch">
        <div class="md-flex__ellipsis md-header-nav__title" data-md-component="title">
          
            
              <span class="md-header-nav__topic">
                Q for Mortals
              </span>
              <span class="md-header-nav__topic">
                12. Workspace Organization
              </span>
            
          
        </div>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        
          
            <label class="md-icon md-icon--search md-header-nav__button" for="search"></label>
            
<div class="md-search" data-md-component="search" role="dialog">
  <label class="md-search__overlay" for="search"></label>
  <div class="md-search__inner" role="search">
    <form class="md-search__form" name="search">
      <input type="text" class="md-search__input" name="query" placeholder="Search" autocapitalize="off" autocorrect="off" autocomplete="off" spellcheck="false" data-md-component="query" data-md-state="active">
      <label class="md-icon md-search__icon" for="search"></label>
      <button type="reset" class="md-icon md-search__icon" data-md-component="reset" tabindex="-1">
        &#xE5CD;
      </button>
    </form>
    <div class="md-search__output">
      <div class="md-search__scrollwrap" data-md-scrollfix>
        <div class="md-search-result" data-md-component="result">
          <div class="md-search-result__meta">
            Type to start searching
          </div>
          <ol class="md-search-result__list"></ol>
        </div>
      </div>
    </div>
  </div>
</div>
          
        
      </div>
      
    </div>
  </nav>
</header>
    
    <div class="md-container">
      
        
      
      
      <main class="md-main">
        <div class="md-main__inner md-grid" data-md-component="container">
          
            
              <div class="md-sidebar md-sidebar--primary" data-md-component="navigation">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    <nav class="md-nav md-nav--primary" data-md-level="0">
  <label class="md-nav__title md-nav__title--site" for="drawer">
    <span class="md-nav__button md-logo">
      
        <img src="img/qfm3.jpg" width="48" height="48">
      
    </span>
    Q for Mortals
  </label>
  
  <ul class="md-nav__list" data-md-scrollfix>
    
      
      
      


  <li class="md-nav__item">
    <a href="redirect/index.html" title="code.kx.com" class="md-nav__link">
      code.kx.com
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="index.html" title="Contents" class="md-nav__link">
      Contents
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="preface/index.html" title="Preface" class="md-nav__link">
      Preface
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="0_Overview/index.html" title="0. Overview" class="md-nav__link">
      0. Overview
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="1_Q_Shock_and_Awe.1" title="1. Q Shock and Awe" class="md-nav__link">
      1. Q Shock and Awe
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="2_Basic_Data_Types_Atoms/index.html" title="2. Basic Data Types – Atoms" class="md-nav__link">
      2. Basic Data Types – Atoms
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="3_Lists.1" title="3. Lists" class="md-nav__link">
      3. Lists
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="4_Operators.1" title="4. Operators" class="md-nav__link">
      4. Operators
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="5_Dictionaries.1" title="5. Dictionaries" class="md-nav__link">
      5. Dictionaries
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="6_Functions.1" title="6. Functions" class="md-nav__link">
      6. Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="7_Transforming_Data/index.html" title="7. Transforming Data" class="md-nav__link">
      7. Transforming Data
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="8_Tables.1" title="8. Tables" class="md-nav__link">
      8. Tables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="9_Queries_q-sql.1" title="9. Queries – q-sql" class="md-nav__link">
      9. Queries – q-sql
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="10_Execution_Control/index.html" title="10. Execution Control" class="md-nav__link">
      10. Execution Control
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="11_IO.1" title="11. I/O" class="md-nav__link">
      11. I/O
    </a>
  </li>

    
      
      
      

  


  <li class="md-nav__item md-nav__item--active">
    
    <input class="md-toggle md-nav__toggle" data-md-toggle="toc" type="checkbox" id="toc">
    
      
    
    
      <label class="md-nav__link md-nav__link--active" for="toc">
        12. Workspace Organization
      </label>
    
    <a href="12_Workspace_Organization.1" title="12. Workspace Organization" class="md-nav__link md-nav__link--active">
      12. Workspace Organization
    </a>
    
      
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#120-overview" title="12.0 Overview" class="md-nav__link">
    12.0 Overview
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#121-namespaces" title="12.1 Namespaces" class="md-nav__link">
    12.1 Namespaces
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#122-contexts" title="12.2 Contexts" class="md-nav__link">
    12.2 Contexts
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#123-creating-contexts" title="12.3 Creating Contexts" class="md-nav__link">
    12.3 Creating Contexts
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#124-context-as-dictionary" title="12.4 Context as Dictionary" class="md-nav__link">
    12.4 Context as Dictionary
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#125-expunging-from-a-context" title="12.5 Expunging from a Context" class="md-nav__link">
    12.5 Expunging from a Context
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#126-saving-and-loading-contexts" title="12.6 Saving and Loading Contexts" class="md-nav__link">
    12.6 Saving and Loading Contexts
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#127-working-in-a-context" title="12.7 Working in a Context" class="md-nav__link">
    12.7 Working in a Context
  </a>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
    
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="13_Commands_and_System_Variables.1" title="13. Commands and System Variables" class="md-nav__link">
      13. Commands and System Variables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="14_Introduction_to_Kdb+.1" title="14. Introduction to Kdb+" class="md-nav__link">
      14. Introduction to Kdb+
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="A_Built-in_Functions.1" title="Appendix A. Built-in Functions" class="md-nav__link">
      Appendix A. Built-in Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="B_Error_Messages/index.html" title="Appendix B. Error Messages" class="md-nav__link">
      Appendix B. Error Messages
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="colophon/index.html" title="Colophon" class="md-nav__link">
      Colophon
    </a>
  </li>

    
  </ul>
</nav>
                  </div>
                </div>
              </div>
            
            
              <div class="md-sidebar md-sidebar--secondary" data-md-component="toc">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#120-overview" title="12.0 Overview" class="md-nav__link">
    12.0 Overview
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#121-namespaces" title="12.1 Namespaces" class="md-nav__link">
    12.1 Namespaces
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#122-contexts" title="12.2 Contexts" class="md-nav__link">
    12.2 Contexts
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#123-creating-contexts" title="12.3 Creating Contexts" class="md-nav__link">
    12.3 Creating Contexts
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#124-context-as-dictionary" title="12.4 Context as Dictionary" class="md-nav__link">
    12.4 Context as Dictionary
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#125-expunging-from-a-context" title="12.5 Expunging from a Context" class="md-nav__link">
    12.5 Expunging from a Context
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#126-saving-and-loading-contexts" title="12.6 Saving and Loading Contexts" class="md-nav__link">
    12.6 Saving and Loading Contexts
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="12_Workspace_Organization.1#127-working-in-a-context" title="12.7 Working in a Context" class="md-nav__link">
    12.7 Working in a Context
  </a>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
                  </div>
                </div>
              </div>
            
          
          <div class="md-content">
            <article class="md-content__inner md-typeset">
              
                
                
                <h1 id="12-workspace-organization">12. Workspace Organization<a class="headerlink" href="12_Workspace_Organization.1#12-workspace-organization" title="Permanent link">&para;</a></h1>
<h2 id="120-overview">12.0 Overview<a class="headerlink" href="12_Workspace_Organization.1#120-overview" title="Permanent link">&para;</a></h2>
<p>The collection of all q entities that have been created in a q session comprises the workspace. This includes not only explicitly created variables but also ancillary items such as enumerations, open handlers, tables mapped from storage and other internal structures.</p>
<p>Like any programming environment of reasonable complexity, q has the potential for name clashes – e.g., when two different scripts define variables of the same name. Because q does not have lexical scoping and local variables are strictly scoped to the function in which they are defined, name clashes between locals is not a problem. But global variables are exposed. To illustrate, suppose you load a script that creates a global <code>foobar</code>. Then you load another script that also creates <code>foobar</code>. The result is that the second script overwrites the value assigned in the first script.</p>
<p>This is the simplest example of a condition in which two portions of a program contend for the same resource. Things get more complicated when concurrency is introduced, in which case the contention can lead to what is called a <em>race condition</em>. There is a school of programming that says mutable shared state is the root of all evil in distributed programming. Fortunately q is single-threaded by default and the implementation of threads (wisely) does not support mutating global variables. Nonetheless, simple name clashes are still a real problem.</p>
<h2 id="121-namespaces">12.1 Namespaces<a class="headerlink" href="12_Workspace_Organization.1#121-namespaces" title="Permanent link">&para;</a></h2>
<p>A partial solution to name clashes is <em>namespaces</em>, which is the idea of placing a (usually hierarchical) structure on names. This is customarily done by specifying a separator character, which is distinct from other valid name characters. You are familiar with this construct from the file system used by most operating systems. The Unix file system uses the separator <code>/</code> and the Windows file system uses <code>\</code>.</p>
<p>The idea is that a compound name with embedded separators represents a nested series of containers. For example, in the Unix file system, the path <code>/mydir/myfile</code> represents a directory (container) <code>mydir</code> that holds a file <code>myfile</code>. Or <code>/d1/d2/fn</code> represents a directory <code>d1</code> that contains a directory <code>d2</code> that contains the file <code>fn</code>. The root container, designated <code>/</code> in Unix, holds all other entities.</p>
<p>Namespaces in many programming languages work similarly, using <code>.</code> as the separator. In q the containers are called <em>contexts</em>. For example, <code>.jab.x</code> represents a variable <code>x</code> contained in the <code>jab</code> context. The context <code>jab</code> has the symbolic name <code>`.jab</code> and the fully qualified name of its variable is <code>`.jab.x</code>.</p>
<p>A notable difference between q namespacing and most others is the way the root is handled. Naming for entities in the root context does not work as you might expect based on the file system analogy. The syntactic form <code>.name</code> does <strong>not</strong> refer to the global variable <code>name</code> in the root context; rather, it refers to the context <code>name</code> in the root. The fully qualified name for an entity <code>x</code> in the root is simply <code>x</code>.</p>
<p>This has the following consequence that causes grief to qbies.</p>
<div class="admonition important">
<p class="admonition-title">Namespaces Fact of Life #1</p>
<p>There is no syntactic way inside a function to distinguish between a local variable <code>x</code> and the global <code>x</code> in the root namespace.</p>
</div>
<p>If you follow the Namespacing conventions at the end of this chapter, you can minimize potential discomfort. However, based on real-world experience, we point out the following.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Inside a function you can not access the global variable <code>foo</code> in the root context as <code>.foo</code>. Instead, <code>.foo</code> refers to the dictionary that holds all entities of the <code>foo</code> context. If you assign a value to <code>.foo</code> you wipe out the entire <code>foo</code> context.</p>
</div>
<h2 id="122-contexts">12.2 Contexts<a class="headerlink" href="12_Workspace_Organization.1#122-contexts" title="Permanent link">&para;</a></h2>
<p>Namespacing in q is implemented with dictionaries. A context is a dictionary whose keys are the symbolic names of the variables in the corresponding namespace. The context dictionary associates each variable name with its currently assigned value.</p>
<p>The name of a context has the same restrictions as q variable names except that <code>.</code> is allowable. The following are all valid names of contexts in the root.</p>
<pre><code class="q">.a
.q
.cat
.an\_ugly\_context\_name
</code></pre>

<p>Thus <code>.cat.bubba</code> represents the entity <code>bubba</code> in the <code>.cat</code> context.</p>
<p>With that out of the way, we can nest contexts.</p>
<pre><code class="q">.cat.bengal.nuba
.cat.abyssinian.orion
</code></pre>

<p>Here we have the entity <code>nuba</code> in the <code>bengal</code> context in the <code>cat</code> context; or the <code>orion</code> entity in the <code>abyssinian</code> context in the <code>cat</code> context.</p>
<p>Astute readers already have a question. How do we distinguish between the first case, in which <code>.cat.bubba</code> is the variable <code>bubba</code> in the <code>cat</code> context, and the second case where <code>.cat.bengal</code> is a context? For example, can we emulate the file system, which appends the separator <code>/</code> to indicate a directory (container). The answer is:</p>
<div class="admonition important">
<p class="admonition-title">Namespacing Fact of Life #2</p>
<p>The interpretation of a fully qualified name depends on its underlying value. If it is a properly constructed dictionary, it is a context. If it is anything else, it is a variable.</p>
</div>
<p>Kx reserves all root namespaces of a single letter, as well <code>.kx</code>, for its own use. It is worth noting that most q built-in functions that are not written in C live in the <code>.q</code> namespace. As of this writing (Sep 2015) the namespaces that are actively used by Kx include <code>.h</code>, <code>.j</code>, <code>.o</code>, <code>.q</code>, <code>.u</code>, <code>.z</code> and <code>.Q</code>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Although q prohibits you from re-assigning its own functions during program execution, some programmers think it is clever to override their definitions in the <code>q.k</code> file. This is bad practice bordering on malfeasance. It courts disaster should Kx change the internal implementation of those routines in a future release.</p>
</div>
<h2 id="123-creating-contexts">12.3 Creating Contexts<a class="headerlink" href="12_Workspace_Organization.1#123-creating-contexts" title="Permanent link">&para;</a></h2>
<p>When you start a fresh q session, all global variables you create live in the root context. All previous examples in this tutorial have created global variable variables in the root simply because we did not indicate otherwise – i.e., we used only unqualified variable names.</p>
<p>Start a fresh q session and create some global variables, beginning in the root.</p>
<pre><code class="q">q)answer:42
q)calculate:{(x*x)+(-1*x)+1}
</code></pre>

<p>To use namespacing, there is no equivalent to <code>mkdir</code> that creates a context before it can be used. Simply specify a qualified name and the context will be created if it does not exist.</p>
<pre><code class="q">q).foo.a:42 / context foo created
q).foo.double:{2*x} / existing context foo used
</code></pre>

<p>Now suppose a separate script uses the <code>bar</code> namespace with different definitions for <code>a</code> and <code>double</code>.</p>
<pre><code class="q">q).bar.a:43 / context bar created
q).bar.double:{2*x} / existing context bar used
</code></pre>

<p>We can now load that script without clobbering our root variables, so we have solved the original problem posed in the introduction to this chapter.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Be very careful about placing globals in the root. As the author’s father would say, “You’re cruisin’ for a bruisin’”.</p>
</div>
<p>When working with contexts, apply an overload of the key operator to list the names of all contexts in the root.</p>
<pre><code class="q">q)key `
`q`Q`h`j`o`foo`bar
</code></pre>

<p>There is no need to stop at one level of namespace. You can nest as deeply as you like and all the intermediate contexts will be created as needed. Suppose we work for a company Adiabatic Programming Laboratory. We might structure our library of computation routines something like the following.</p>
<pre><code class="q">q).apl.core.calc.array.fill0:{0.0^x}
</code></pre>

<p>This single assignment causes the nested series of contexts <code>apl</code>, <code>core</code>, <code>calc</code> and <code>array</code> to be created and a function <code>fill0</code> to be placed in the innermost context <code>array</code>.</p>
<h2 id="124-context-as-dictionary">12.4 Context as Dictionary<a class="headerlink" href="12_Workspace_Organization.1#124-context-as-dictionary" title="Permanent link">&para;</a></h2>
<p>As mentioned previously, a context is a specially formatted q dictionary. Its keys are the symbolic names of the variables it contains; each is associated with the current value of the corresponding variable.</p>
<p>The context dictionaries are dictionaries that live in the workspace along with ordinary variables, which have special meaning to q. We can perform operations on them just as with our own dictionaries.</p>
<p>When we start a fresh q session, the root dictionary is empty. As with any variable, we can reveal the root context by applying <code>get</code> (or <code>value</code>) to its name and then applying the utility <code>-3!</code> to display its internal form since it is empty.</p>
<pre><code class="q">q)-3! get `.
&quot;(`symbol$())!()&quot;
</code></pre>

<p>Here we see an empty key list of symbols and a general empty list of values. After defining variables in the root, an ordinary dictionary emerges.</p>
<pre><code class="q">q)get `.
a     | 42
double| {2*x}
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The entries in a context dictionary are sorted by name.</p>
</div>
<p>Things get more interesting when we use namespacing and create a context.</p>
<pre><code class="q">q).jab.wrong:43
q)get `.
a     | 42
double| {2*x}
q)get `.jab
      | ::
wrong | 43
</code></pre>

<p>Observe that the newly created context dictionary for <code>.jab</code> is <strong>not</strong> physically in the root directory; it is a separate dictionary.</p>
<div class="admonition advanced">
<p class="admonition-title">Advanced</p>
<p>You might wonder about the significance of the <code>::</code> in the first entry of the <code>.jab</code> context dictionary. It is there to prevent the value list of the context dictionary from collapsing to a simple list in case all the variables should have values of the same scalar type. This would then prevent subsequent definition of variables of other types in that context.</p>
</div>
<p>As they say in certain quarters, q eats its own dog food, meaning all ordinary operations can be performed on a context dictionary. For example, we can look up the values associated with <code>`a</code> in the root and with <code>`wrong</code> in the <code>.jab</code> context.</p>
<pre><code class="q">q)`.[`a]
42
q)`.jab[`wrong]
43
</code></pre>

<p>In fact you can use this to access an obscured global inside a function.</p>
<pre><code class="q">q)a
42
q){a:43; `.[`a]}[]
42
</code></pre>

<p>While this sort of thing makes for cute parlor tricks, we do not advise using it in real code.</p>
<div class="admonition recommendation">
<p class="admonition-title">Recommendation</p>
<p>Use <code>get</code> and <code>set</code> to retrieve and store global variables by name, especially inside functions.</p>
</div>
<pre><code class="q"> q){`a set 1+ get `a}[]
 `a
 q)43
 43
</code></pre>

<h2 id="125-expunging-from-a-context">12.5 Expunging from a Context<a class="headerlink" href="12_Workspace_Organization.1#125-expunging-from-a-context" title="Permanent link">&para;</a></h2>
<p>We have seen that a context is a directory that maps a context’s entity names to their values. This means that in order to expunge an entity from a context, we could directly remove it from the dictionary. But this is bad practice since it uses the underlying implementation and the actual expression is prone to typing error.</p>
<p>Instead, q provides a special overload of the delete template explicitly for this purpose.</p>
<pre><code class="q">q)a:42
q).jab.wrong:43
q)delete a from `.
`.
q)a
'a
q)delete wrong from `.jab
`.jab
q)\v
`symbol$()
q)\v .jab
`symbol$()
</code></pre>

<p>Indeed, we issue the <code>\v</code> command to display the names of variables in a context (current context if none is specified) to verify that the variables are gone.</p>
<h2 id="126-saving-and-loading-contexts">12.6 Saving and Loading Contexts<a class="headerlink" href="12_Workspace_Organization.1#126-saving-and-loading-contexts" title="Permanent link">&para;</a></h2>
<p>Since a context is a dictionary, you can persist it – and all its contents – as a serialized q object using <code>set</code>.</p>
<p>For example, to write out the root context, retrieve it by name and set it into a file.</p>
<pre><code class="q">q)`:/data/root set get `.
`:/data/root
</code></pre>

<p>Conversely, you can read the serialized object back into memory using <code>get</code> on the file and then overwrite the current root context using <code>set</code></p>
<pre><code class="q">q)`. set get `:/data/root
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you organize your globals carefully, this makes check-pointing the state of your application very simple. Overlaying the root context replaces all its entries. As the saying goes, “Be careful what you ask for.”</p>
</div>
<h2 id="127-working-in-a-context">12.7 Working in a Context<a class="headerlink" href="12_Workspace_Organization.1#127-working-in-a-context" title="Permanent link">&para;</a></h2>
<p>We return to the analogy of paths in the file system. The operating system keeps track of the current working directory for each program. This is merely a bit of state that points to a logical location in the file system. The main feature is it allows paths for items at or below the current working directory to be specified in <em>relative</em> form.</p>
<p>For example, if we start with the current working directory as the root and we wish to access a file <code>/db/2015.03.01/trades.dat</code>, then we must use the full path. However, if we issue the OS command,</p>
<pre><code class="bash">cd /db
</code></pre>

<p>then <code>/db</code> becomes the current working directory and we can specify the path of the file as simply <code>2015.03.01/trades.dat</code>. Note the absence of the leading <code>/</code>, which signifies a relative path as opposed to an absolute one. This provides significant simplification for deeply nested directory structures, which often arises in large development environments.</p>
<p>A q session has a similar concept. At any point in the session there is a <em>current working context</em>. At the beginning of a fresh q session, the current working context is the root context and you use absolute names for all global variables. We can change the working context with the <code>\d</code> command (for “directory” by analogy to the file system). After you change the current working context, you can use relative names for global variables. Here we create two globals in the root context and then switch the current working context to show relative names.</p>
<pre><code class="q">q).jab.util.counter:0
q).jab.util.incrctr:{[] `.jab.util.counter set 1+get `.jab.util.counter}
q).jab.util.incrctr[]
`.jab.util.counter
q)\d .jab
q.jab)util.incrctr[]
`.jab.util.counter
q.jab)util.counter
2
</code></pre>

<p>Notice that the q prompt changes to let you know the current working context.</p>
<p>There is a subtle point about how globals are bound during function definition that we must point out. To illustrate, start a fresh q session and do the following.</p>
<pre><code class="q">q)state:`NY
q).jab.f1:{[] state}
q)\d .jab
q.jab)state:0N
q.jab)f2:{[] state}
q.jab)\d .
q).jab.f1[]
`NY
q).jab.f2[]
0N
q).jab.f1
{[] state}
q).jab.f2
{[] state}
</code></pre>

<p>We began by defining a variable <code>state</code> in the root context to hold a two-character code for one of the fifty United States of America. Also from the root context, we define a function <code>f1</code> in the <code>.jab</code> context that returns the value of <code>state</code> from the root context. Next we switch to the <code>.jab</code> context and define a variable <code>state</code> that holds the integer value of a state machine, along with a function <code>f2</code> that returns the value of this global.</p>
<p>We return to the root context, apply each function using an absolute path name and observe the expected values. Namespacing has done its job by avoiding a clash between the disparate state variables, so what’s the issue? Look closely at the display of the two function bodies. They are identical! How does q know which <code>state</code> variable to access at runtime?</p>
<div class="admonition important">
<p class="admonition-title">Namespacing Fact of Life #3</p>
<p>Any unqualified global reference in a function is bound to the current working context in effect at the point of the function <strong>definition</strong>. That context is not explicitly displayed in the function body.</p>
</div>
<p>This has the undesirable consequence of requiring a potential user of the function to know the circumstances of its definition.</p>
<p>But wait, there’s more. Let’s redo the initial example of this section in a fresh q session, but change the current working context two levels down instead of one.</p>
<pre><code class="q">q).jab.util.counter:0
q).jab.util.incrctr:{[] `.jab.util.counter set 1+get `.jab.util.counter}
q)\d .jab.util
'.jab.util
</code></pre>

<p>You can’t do it!</p>
<div class="admonition important">
<p class="admonition-title">Namespacing Fact of Life #4</p>
<p>You can only set the current working context one level down from the root. This is truly unfortunate.</p>
</div>
<p>You might be tempted to abandon namespacing altogether, but don’t. If you adhere to the following recommendations, you will avoid the issues mentioned above and namespacing will work effectively.</p>
<p><strong>Recommendations for Namespacing</strong>:</p>
<ul>
<li>Use namespacing at arbitrary depth to create hierarchical organization of global variables, both data and functions.</li>
<li>Keep related functions and any globals they require together in an appropriate context in the hierarchy with a descriptive name.</li>
<li>By convention, q namespaces are all lower case.</li>
<li>Define all global entities from the root context using fully qualified names.</li>
<li>Always refer to global entities using fully qualified names.</li>
</ul>
<p>Essentially the last two recommendations amount to avoiding all use of <code>\d</code> to switch the current working context. Here is one way to define the functions <code>f1</code> and <code>f2</code> above in a fresh q session so that everything is explicit.</p>
<pre><code class="q">q).jab.geog.state:`NY
q).jab.geog.f1:{[] .jab.geog.state}
q).jab.machine.state:0N
q).jab.machine.f2:{[] .jab.machine.state}
q).jab.geog.f1
{[] .jab.geog.state}
q).jab.machine.f2
{[] .jab.machine.state}
</code></pre>
                
                  
                
              
              
                


              
            </article>
          </div>
        </div>
      </main>
      
        
<footer class="md-footer">
  
    <div class="md-footer-nav">
      <nav class="md-footer-nav__inner md-grid">
        
          <a href="11_IO.1" title="11. I/O" class="md-flex md-footer-nav__link md-footer-nav__link--prev" rel="prev">
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-back md-footer-nav__button"></i>
            </div>
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Previous
                </span>
                11. I/O
              </span>
            </div>
          </a>
        
        
          <a href="13_Commands_and_System_Variables.1" title="13. Commands and System Variables" class="md-flex md-footer-nav__link md-footer-nav__link--next" rel="next">
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Next
                </span>
                13. Commands and System Variables
              </span>
            </div>
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-forward md-footer-nav__button"></i>
            </div>
          </a>
        
      </nav>
    </div>
  
  <div class="md-footer-meta md-typeset">
    <div class="md-footer-meta__inner md-grid">
      <div class="md-footer-copyright">
        
          <div class="md-footer-copyright__highlight">
            ©2015 Jeffry A. Borror / q4m LLC. Kx® and kdb+ are registered trademarks of Kx Systems, Inc., a subsidiary of First Derivatives plc.
          </div>
        
        powered by
        <a href="http://www.mkdocs.org">MkDocs</a>
        and
        <a href="https://squidfunk.github.io/mkdocs-material/">
          Material for MkDocs</a>
      </div>
      
        
      
    </div>
  </div>
</footer>
      
    </div>
    
      <script src="assets/javascripts/application.b438e6c5.js"></script>
      
      <script>app.initialize({version:"0.17.3",url:{base:".."}})</script>
      
        <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
      
        <script src="https://tracker.mrpfd.com/tracker.js"></script>
      
        <script src="http://code.kx.com/scripts/googleanalytics.js"></script>
      
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"></script>
      
        <script src="https://use.fontawesome.com/3dbf29ed12.js"></script>
      
        <script src="http://code.kx.com/scripts/prism.js"></script>
      
    
    
      
    
  </body>
</html>