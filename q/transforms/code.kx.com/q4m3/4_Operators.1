



<!DOCTYPE html>
<html lang="en" class="no-js">
  <head>
    
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <meta http-equiv="x-ua-compatible" content="ie=edge">
      
        <meta name="description" content="Q for Mortals">
      
      
        <link rel="canonical" href="4_Operators.1">
      
      
        <meta name="author" content="Jeffry Borror">
      
      
        <meta name="lang:clipboard.copy" content="Copy to clipboard">
      
        <meta name="lang:clipboard.copied" content="Copied to clipboard">
      
        <meta name="lang:search.language" content="en">
      
        <meta name="lang:search.pipeline.stopwords" content="True">
      
        <meta name="lang:search.pipeline.trimmer" content="True">
      
        <meta name="lang:search.result.none" content="No matching documents">
      
        <meta name="lang:search.result.one" content="1 matching document">
      
        <meta name="lang:search.result.other" content="# matching documents">
      
        <meta name="lang:search.tokenizer" content="[\s\-]+">
      
      <link rel="shortcut icon" href="img/favicon.ico">
      <meta name="generator" content="mkdocs-0.17.3, mkdocs-material-2.7.2">
    
    
      
        <title>4. Operators - Q for Mortals</title>
      
    
    
      <link rel="stylesheet" href="assets/stylesheets/application.8d40d89b.css">
      
        <link rel="stylesheet" href="assets/stylesheets/application-palette.6079476c.css">
      
    
    
      <script src="assets/javascripts/modernizr.1aa3b519.js"></script>
    
    
      <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
      
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,400i,700|Roboto+Mono">
        <style>body,input{font-family:"Roboto","Helvetica Neue",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:"Roboto Mono","Courier New",Courier,monospace}</style>
      
      <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    
    
      <link rel="stylesheet" href="stylesheets/extra.css">
    
      <link rel="stylesheet" href="http://code.kx.com/stylesheets/prism.css">
    
    
  </head>
  
    
    
    <body dir="ltr" data-md-color-primary="blue" data-md-color-accent="deep-orange">
  
    <svg class="md-svg">
      <defs>
        
        
      </defs>
    </svg>
    <input class="md-toggle" data-md-toggle="drawer" type="checkbox" id="drawer" autocomplete="off">
    <input class="md-toggle" data-md-toggle="search" type="checkbox" id="search" autocomplete="off">
    <label class="md-overlay" data-md-component="overlay" for="drawer"></label>
    
      <a href="4_Operators.1#4-operators" tabindex="1" class="md-skip">
        Skip to content
      </a>
    
    
      <header class="md-header" data-md-component="header">
  <nav class="md-header-nav md-grid">
    <div class="md-flex">
      <div class="md-flex__cell md-flex__cell--shrink">
        <a href="http://code.kx.com/q4m3" title="Q for Mortals" class="md-header-nav__button md-logo">
          
            <img src="img/qfm3.jpg" width="24" height="24">
          
        </a>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        <label class="md-icon md-icon--menu md-header-nav__button" for="drawer"></label>
      </div>
      <div class="md-flex__cell md-flex__cell--stretch">
        <div class="md-flex__ellipsis md-header-nav__title" data-md-component="title">
          
            
              <span class="md-header-nav__topic">
                Q for Mortals
              </span>
              <span class="md-header-nav__topic">
                4. Operators
              </span>
            
          
        </div>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        
          
            <label class="md-icon md-icon--search md-header-nav__button" for="search"></label>
            
<div class="md-search" data-md-component="search" role="dialog">
  <label class="md-search__overlay" for="search"></label>
  <div class="md-search__inner" role="search">
    <form class="md-search__form" name="search">
      <input type="text" class="md-search__input" name="query" placeholder="Search" autocapitalize="off" autocorrect="off" autocomplete="off" spellcheck="false" data-md-component="query" data-md-state="active">
      <label class="md-icon md-search__icon" for="search"></label>
      <button type="reset" class="md-icon md-search__icon" data-md-component="reset" tabindex="-1">
        &#xE5CD;
      </button>
    </form>
    <div class="md-search__output">
      <div class="md-search__scrollwrap" data-md-scrollfix>
        <div class="md-search-result" data-md-component="result">
          <div class="md-search-result__meta">
            Type to start searching
          </div>
          <ol class="md-search-result__list"></ol>
        </div>
      </div>
    </div>
  </div>
</div>
          
        
      </div>
      
    </div>
  </nav>
</header>
    
    <div class="md-container">
      
        
      
      
      <main class="md-main">
        <div class="md-main__inner md-grid" data-md-component="container">
          
            
              <div class="md-sidebar md-sidebar--primary" data-md-component="navigation">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    <nav class="md-nav md-nav--primary" data-md-level="0">
  <label class="md-nav__title md-nav__title--site" for="drawer">
    <span class="md-nav__button md-logo">
      
        <img src="img/qfm3.jpg" width="48" height="48">
      
    </span>
    Q for Mortals
  </label>
  
  <ul class="md-nav__list" data-md-scrollfix>
    
      
      
      


  <li class="md-nav__item">
    <a href="redirect/index.html" title="code.kx.com" class="md-nav__link">
      code.kx.com
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="index.html" title="Contents" class="md-nav__link">
      Contents
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="preface/index.html" title="Preface" class="md-nav__link">
      Preface
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="0_Overview/index.html" title="0. Overview" class="md-nav__link">
      0. Overview
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="1_Q_Shock_and_Awe.1" title="1. Q Shock and Awe" class="md-nav__link">
      1. Q Shock and Awe
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="2_Basic_Data_Types_Atoms/index.html" title="2. Basic Data Types – Atoms" class="md-nav__link">
      2. Basic Data Types – Atoms
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="3_Lists.1" title="3. Lists" class="md-nav__link">
      3. Lists
    </a>
  </li>

    
      
      
      

  


  <li class="md-nav__item md-nav__item--active">
    
    <input class="md-toggle md-nav__toggle" data-md-toggle="toc" type="checkbox" id="toc">
    
      
    
    
      <label class="md-nav__link md-nav__link--active" for="toc">
        4. Operators
      </label>
    
    <a href="4_Operators.1" title="4. Operators" class="md-nav__link md-nav__link--active">
      4. Operators
    </a>
    
      
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#40-operators-and-verbs-are-functions" title="4.0 Operators and Verbs Are Functions" class="md-nav__link">
    4.0 Operators and Verbs Are Functions
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#401-function-notation" title="4.0.1 Function Notation" class="md-nav__link">
    4.0.1 Function Notation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#402-primitives-verbs-and-functional-notation" title="4.0.2 Primitives, Verbs and Functional Notation" class="md-nav__link">
    4.0.2 Primitives, Verbs and Functional Notation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#403-extension-of-atomic-functions" title="4.0.3 Extension of Atomic Functions" class="md-nav__link">
    4.0.3 Extension of Atomic Functions
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#41-operator-precedence" title="4.1 Operator Precedence" class="md-nav__link">
    4.1 Operator Precedence
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#411-traditional-operator-precedence" title="4.1.1 Traditional Operator Precedence" class="md-nav__link">
    4.1.1 Traditional Operator Precedence
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#412-left-of-right-evaluation" title="4.1.2 Left-of-Right Evaluation" class="md-nav__link">
    4.1.2 Left-of-Right Evaluation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#413-the-gotcha-of-left-of-right-evaluation" title="4.1.3 The Gotcha of Left-of-Right Evaluation" class="md-nav__link">
    4.1.3 The Gotcha of Left-of-Right Evaluation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#414-rationale-for-no-operator-precedence" title="4.1.4 Rationale for No Operator Precedence" class="md-nav__link">
    4.1.4 Rationale for No Operator Precedence
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#42-match" title="4.2 Match ~" class="md-nav__link">
    4.2 Match ~
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#43-equality-and-relational-operators" title="4.3 Equality and Relational Operators" class="md-nav__link">
    4.3 Equality and Relational Operators
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#431-equality-and-disequality" title="4.3.1 Equality = and Disequality &lt;&gt;" class="md-nav__link">
    4.3.1 Equality = and Disequality &lt;&gt;
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#432-not-zero-not" title="4.3.2 Not Zero not" class="md-nav__link">
    4.3.2 Not Zero not
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#433-order" title="4.3.3 Order: &gt;, &lt;=, &gt;, &gt;=" class="md-nav__link">
    4.3.3 Order: &gt;, &lt;=, &gt;, &gt;=
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#44-basic-arithmetic-" title="4.4 Basic Arithmetic: +, -, *, %" class="md-nav__link">
    4.4 Basic Arithmetic: +, -, *, %
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#45-maximum-and-minimum" title="4.5 Maximum | and Minimum &amp;" class="md-nav__link">
    4.5 Maximum | and Minimum &amp;
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#46-amend" title="4.6 Amend :" class="md-nav__link">
    4.6 Amend :
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#461-amend-in-c-language" title="4.6.1 Amend in C Language" class="md-nav__link">
    4.6.1 Amend in C Language
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#462-simple-q-amend" title="4.6.2 Simple q Amend" class="md-nav__link">
    4.6.2 Simple q Amend
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#463-amend-with-lists" title="4.6.3 Amend with Lists" class="md-nav__link">
    4.6.3 Amend with Lists
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#47-exponential-primitives-sqrt-exp-log-xexp-xlog" title="4.7 Exponential Primitives: sqrt, exp, log, xexp, xlog" class="md-nav__link">
    4.7 Exponential Primitives: sqrt, exp, log, xexp, xlog
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#471-sqrt" title="4.7.1 sqrt" class="md-nav__link">
    4.7.1 sqrt
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#472-exp" title="4.7.2 exp" class="md-nav__link">
    4.7.2 exp
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#473-log" title="4.7.3 log" class="md-nav__link">
    4.7.3 log
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#474-xexp" title="4.7.4 xexp" class="md-nav__link">
    4.7.4 xexp
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#475-xlog" title="4.7.5 xlog" class="md-nav__link">
    4.7.5 xlog
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#48-more-numeric-primitives" title="4.8 More Numeric Primitives" class="md-nav__link">
    4.8 More Numeric Primitives
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#481-integer-division-div-and-modulus-mod" title="4.8.1 Integer Division div and Modulus mod" class="md-nav__link">
    4.8.1 Integer Division div and Modulus mod
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#482-sign-signum" title="4.8.2 Sign signum" class="md-nav__link">
    4.8.2 Sign signum
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#483-reciprocal" title="4.8.3 reciprocal" class="md-nav__link">
    4.8.3 reciprocal
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#484-floor-and-ceiling" title="4.8.4 floor and ceiling" class="md-nav__link">
    4.8.4 floor and ceiling
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#485-absolute-value-abs" title="4.8.5 Absolute Value abs" class="md-nav__link">
    4.8.5 Absolute Value abs
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#49-operations-on-temporal-values" title="4.9 Operations on Temporal Values" class="md-nav__link">
    4.9 Operations on Temporal Values
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#491-temporal-comparison" title="4.9.1 Temporal Comparison" class="md-nav__link">
    4.9.1 Temporal Comparison
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#492-temporal-arithmetic" title="4.9.2 Temporal Arithmetic" class="md-nav__link">
    4.9.2 Temporal Arithmetic
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#410-operations-on-infinities-and-nulls" title="4.10 Operations on Infinities and Nulls" class="md-nav__link">
    4.10 Operations on Infinities and Nulls
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#411-alias" title="4.11 Alias ::" class="md-nav__link">
    4.11 Alias ::
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4111-creating-an-alias-with-double-colon" title="4.11.1 Creating an Alias with Double Colon" class="md-nav__link">
    4.11.1 Creating an Alias with Double Colon
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4112-alias-vs-function" title="4.11.2 Alias vs. Function" class="md-nav__link">
    4.11.2 Alias vs. Function
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4113-dependencies" title="4.11.3 Dependencies" class="md-nav__link">
    4.11.3 Dependencies
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4114-views" title="4.11.4 Views" class="md-nav__link">
    4.11.4 Views
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
    
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="5_Dictionaries.1" title="5. Dictionaries" class="md-nav__link">
      5. Dictionaries
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="6_Functions.1" title="6. Functions" class="md-nav__link">
      6. Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="7_Transforming_Data/index.html" title="7. Transforming Data" class="md-nav__link">
      7. Transforming Data
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="8_Tables.1" title="8. Tables" class="md-nav__link">
      8. Tables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="9_Queries_q-sql.1" title="9. Queries – q-sql" class="md-nav__link">
      9. Queries – q-sql
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="10_Execution_Control/index.html" title="10. Execution Control" class="md-nav__link">
      10. Execution Control
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="11_IO.1" title="11. I/O" class="md-nav__link">
      11. I/O
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="12_Workspace_Organization.1" title="12. Workspace Organization" class="md-nav__link">
      12. Workspace Organization
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="13_Commands_and_System_Variables.1" title="13. Commands and System Variables" class="md-nav__link">
      13. Commands and System Variables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="14_Introduction_to_Kdb+.1" title="14. Introduction to Kdb+" class="md-nav__link">
      14. Introduction to Kdb+
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="A_Built-in_Functions.1" title="Appendix A. Built-in Functions" class="md-nav__link">
      Appendix A. Built-in Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="B_Error_Messages/index.html" title="Appendix B. Error Messages" class="md-nav__link">
      Appendix B. Error Messages
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="colophon/index.html" title="Colophon" class="md-nav__link">
      Colophon
    </a>
  </li>

    
  </ul>
</nav>
                  </div>
                </div>
              </div>
            
            
              <div class="md-sidebar md-sidebar--secondary" data-md-component="toc">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#40-operators-and-verbs-are-functions" title="4.0 Operators and Verbs Are Functions" class="md-nav__link">
    4.0 Operators and Verbs Are Functions
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#401-function-notation" title="4.0.1 Function Notation" class="md-nav__link">
    4.0.1 Function Notation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#402-primitives-verbs-and-functional-notation" title="4.0.2 Primitives, Verbs and Functional Notation" class="md-nav__link">
    4.0.2 Primitives, Verbs and Functional Notation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#403-extension-of-atomic-functions" title="4.0.3 Extension of Atomic Functions" class="md-nav__link">
    4.0.3 Extension of Atomic Functions
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#41-operator-precedence" title="4.1 Operator Precedence" class="md-nav__link">
    4.1 Operator Precedence
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#411-traditional-operator-precedence" title="4.1.1 Traditional Operator Precedence" class="md-nav__link">
    4.1.1 Traditional Operator Precedence
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#412-left-of-right-evaluation" title="4.1.2 Left-of-Right Evaluation" class="md-nav__link">
    4.1.2 Left-of-Right Evaluation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#413-the-gotcha-of-left-of-right-evaluation" title="4.1.3 The Gotcha of Left-of-Right Evaluation" class="md-nav__link">
    4.1.3 The Gotcha of Left-of-Right Evaluation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#414-rationale-for-no-operator-precedence" title="4.1.4 Rationale for No Operator Precedence" class="md-nav__link">
    4.1.4 Rationale for No Operator Precedence
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#42-match" title="4.2 Match ~" class="md-nav__link">
    4.2 Match ~
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#43-equality-and-relational-operators" title="4.3 Equality and Relational Operators" class="md-nav__link">
    4.3 Equality and Relational Operators
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#431-equality-and-disequality" title="4.3.1 Equality = and Disequality &lt;&gt;" class="md-nav__link">
    4.3.1 Equality = and Disequality &lt;&gt;
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#432-not-zero-not" title="4.3.2 Not Zero not" class="md-nav__link">
    4.3.2 Not Zero not
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#433-order" title="4.3.3 Order: &gt;, &lt;=, &gt;, &gt;=" class="md-nav__link">
    4.3.3 Order: &gt;, &lt;=, &gt;, &gt;=
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#44-basic-arithmetic-" title="4.4 Basic Arithmetic: +, -, *, %" class="md-nav__link">
    4.4 Basic Arithmetic: +, -, *, %
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#45-maximum-and-minimum" title="4.5 Maximum | and Minimum &amp;" class="md-nav__link">
    4.5 Maximum | and Minimum &amp;
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#46-amend" title="4.6 Amend :" class="md-nav__link">
    4.6 Amend :
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#461-amend-in-c-language" title="4.6.1 Amend in C Language" class="md-nav__link">
    4.6.1 Amend in C Language
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#462-simple-q-amend" title="4.6.2 Simple q Amend" class="md-nav__link">
    4.6.2 Simple q Amend
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#463-amend-with-lists" title="4.6.3 Amend with Lists" class="md-nav__link">
    4.6.3 Amend with Lists
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#47-exponential-primitives-sqrt-exp-log-xexp-xlog" title="4.7 Exponential Primitives: sqrt, exp, log, xexp, xlog" class="md-nav__link">
    4.7 Exponential Primitives: sqrt, exp, log, xexp, xlog
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#471-sqrt" title="4.7.1 sqrt" class="md-nav__link">
    4.7.1 sqrt
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#472-exp" title="4.7.2 exp" class="md-nav__link">
    4.7.2 exp
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#473-log" title="4.7.3 log" class="md-nav__link">
    4.7.3 log
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#474-xexp" title="4.7.4 xexp" class="md-nav__link">
    4.7.4 xexp
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#475-xlog" title="4.7.5 xlog" class="md-nav__link">
    4.7.5 xlog
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#48-more-numeric-primitives" title="4.8 More Numeric Primitives" class="md-nav__link">
    4.8 More Numeric Primitives
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#481-integer-division-div-and-modulus-mod" title="4.8.1 Integer Division div and Modulus mod" class="md-nav__link">
    4.8.1 Integer Division div and Modulus mod
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#482-sign-signum" title="4.8.2 Sign signum" class="md-nav__link">
    4.8.2 Sign signum
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#483-reciprocal" title="4.8.3 reciprocal" class="md-nav__link">
    4.8.3 reciprocal
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#484-floor-and-ceiling" title="4.8.4 floor and ceiling" class="md-nav__link">
    4.8.4 floor and ceiling
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#485-absolute-value-abs" title="4.8.5 Absolute Value abs" class="md-nav__link">
    4.8.5 Absolute Value abs
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#49-operations-on-temporal-values" title="4.9 Operations on Temporal Values" class="md-nav__link">
    4.9 Operations on Temporal Values
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#491-temporal-comparison" title="4.9.1 Temporal Comparison" class="md-nav__link">
    4.9.1 Temporal Comparison
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#492-temporal-arithmetic" title="4.9.2 Temporal Arithmetic" class="md-nav__link">
    4.9.2 Temporal Arithmetic
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#410-operations-on-infinities-and-nulls" title="4.10 Operations on Infinities and Nulls" class="md-nav__link">
    4.10 Operations on Infinities and Nulls
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="4_Operators.1#411-alias" title="4.11 Alias ::" class="md-nav__link">
    4.11 Alias ::
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4111-creating-an-alias-with-double-colon" title="4.11.1 Creating an Alias with Double Colon" class="md-nav__link">
    4.11.1 Creating an Alias with Double Colon
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4112-alias-vs-function" title="4.11.2 Alias vs. Function" class="md-nav__link">
    4.11.2 Alias vs. Function
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4113-dependencies" title="4.11.3 Dependencies" class="md-nav__link">
    4.11.3 Dependencies
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="4_Operators.1#4114-views" title="4.11.4 Views" class="md-nav__link">
    4.11.4 Views
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
                  </div>
                </div>
              </div>
            
          
          <div class="md-content">
            <article class="md-content__inner md-typeset">
              
                
                
                <h1 id="4-operators">4. Operators<a class="headerlink" href="4_Operators.1#4-operators" title="Permanent link">&para;</a></h1>
<h2 id="40-operators-and-verbs-are-functions">4.0 Operators and Verbs Are Functions<a class="headerlink" href="4_Operators.1#40-operators-and-verbs-are-functions" title="Permanent link">&para;</a></h2>
<p>Purists call the q operators <em>verbs</em>. Reading the expression <code>2+3</code> right-to-left as “3 added to 2,” the operand <code>3</code> is a noun (subject), the operator <code>+</code> is a verb and the operand <code>2</code> is a noun (object). They are really just built-in functions. We shall use all three terminologies – <em>operator</em>, <em>function</em>, and <em>verb</em> – interchangeably.</p>
<h3 id="401-function-notation">4.0.1 Function Notation<a class="headerlink" href="4_Operators.1#401-function-notation" title="Permanent link">&para;</a></h3>
<p>Operators are built-in functions used with in-fix notation. We examine functions in depth in Chapter 5, but cover some salient points here. There are two main differences between the functions we can write and built-in functions.</p>
<ul>
<li>Our functions must have alphanumeric names whereas q functions can have purely symbolic names.</li>
<li>Our functions can only be used in prefix notation whereas q functions can be used prefix or infix.</li>
</ul>
<p>Function application in q uses square brackets to enclose the arguments, and semicolons to separate multiple arguments. Thus the output value of a monadic function <code>f</code> for the input <code>x</code> is written <code>f[x]</code> We can omit the brackets for monadic application and write <code>f x</code>. Application of a dyadic function <code>g</code> on arguments <code>x</code> and <code>y</code> is written <code>g[x;y]</code> in prefix or <code>x g y</code> in infix.</p>
<p>An <em>atomic</em> function acts recursively on data structures. For example, applying it to a list is the same as applying it to each item in the list.</p>
<h3 id="402-primitives-verbs-and-functional-notation">4.0.2 Primitives, Verbs and Functional Notation<a class="headerlink" href="4_Operators.1#402-primitives-verbs-and-functional-notation" title="Permanent link">&para;</a></h3>
<p>The normal way of writing addition in mathematics and most programming 
languages uses an operator with infix notation – e.g., addition is written with a plus symbol between the two operands.</p>
<pre><code>2+3
</code></pre>
<p>In q, we can write addition this way and read it right-to-left as “add 3 to 2.”.</p>
<pre><code class="q">q)2+3
_
</code></pre>

<p>A q dyadic function written with infix notation is also called a <em>verb</em>. This terminology arises from thinking of the operands as nouns that the functions act on. Although some purists are strict in using this terminology, we shall not be.</p>
<p>The <em>primitive operators</em> are built-in functions, including the basic arithmetic, relation and comparison operators. Some are represented by a single ASCII symbol such as <code>+</code>, <code>-</code>, <code>=</code>, and <code>&lt;</code>. Others use compound symbols, such as <code>&lt;=</code>, <code>&gt;=</code>, and <code>&lt;&gt;</code>. Still others have names such as <code>not</code> or <code>neg</code>.</p>
<p>An operator/verb can also be used with ordinary function notation. For example, we can also use <code>+</code> as a dyadic function that takes two numeric arguments and returns a numeric result. You probably wouldn't think twice at seeing <code>sum[a;b]</code> but you might blink at the following perfectly logical equivalent.</p>
<pre><code class="q">q)+[2;3]
_
</code></pre>

<p>Qbies will definitely need to get accustomed to,</p>
<pre><code class="q">q)=[2;3]
_
</code></pre>

<p>It is even possible to write a binary verb using a combination of infix and functional notation. This may look strange, even to initiates.</p>
<pre><code class="q">q)(2+)[3]
5
q)(2+)3
_
</code></pre>

<h3 id="403-extension-of-atomic-functions">4.0.3 Extension of Atomic Functions<a class="headerlink" href="4_Operators.1#403-extension-of-atomic-functions" title="Permanent link">&para;</a></h3>
<p>A fundamental feature of atomic functions is that their action extends automatically to the items in a list. Of course, if you want to combine two lists they must be of the same length.</p>
<pre><code class="q">q)neg 1 2 3
-1 -2 -3
q)1 2 3+10 20 30
11 22 33
q)1 2 3+10 20 30 40
'length
</code></pre>

<p>This applies to nested lists as well, provided they conform in shape for multivalent functions.</p>
<pre><code class="qq">q)neg (1 2 3; 4 5)
-1 -2 -3
-4 -5
q)(1 2 3; 4 5)+(100 200 300; 400 500)
101 202 303
404 505
</code></pre>

<p>Another fundamental property of atomic operators is that they implicitly extend atom arguments to match lists.</p>
<pre><code class="q">q)100+1 2 3
101 102 103
q)1 2 3+100
_
</code></pre>

<p>Atom extension also applies with nested lists.</p>
<pre><code class="q">q)100+(1 2 3; 4 5)
101 102 103
104 105
q)(1 2 3; 4 5)+100
_
</code></pre>

<h2 id="41-operator-precedence">4.1 Operator Precedence<a class="headerlink" href="4_Operators.1#41-operator-precedence" title="Permanent link">&para;</a></h2>
<p>There is none.</p>
<h3 id="411-traditional-operator-precedence">4.1.1 Traditional Operator Precedence<a class="headerlink" href="4_Operators.1#411-traditional-operator-precedence" title="Permanent link">&para;</a></h3>
<p>Mathematical operators and most programming languages have a concept of operator precedence, which attempts to resolve ambiguities in the evaluation of arithmetic and logical operations in expressions. The arithmetic precedence rules were drummed into you in elementary school: multiplication and division are equal and come before addition and subtraction, etc. There are similar precedence rules for =, &lt;, &gt;, ‘and’ and ‘or’.</p>
<h3 id="412-left-of-right-evaluation">4.1.2 Left-of-Right Evaluation<a class="headerlink" href="4_Operators.1#412-left-of-right-evaluation" title="Permanent link">&para;</a></h3>
<p>Although the traditional notion of operator precedence has the weight of incumbency (not to mention the imprecations of your fifth grade math teacher), it’s time to throw the bum out. As mentioned in Chapter 1, q has no rules for operator precedence. Instead, it has one simple rule for evaluating any expression:</p>
<p>Expressions are evaluated left-<strong>of</strong>-right</p>
<p>which equates to</p>
<p>Expressions are evaluated right-<strong>to</strong>-left</p>
<p>Please review the <a href="0_Overview/index.html#02-mathematics-refresher">Mathematics Refresher</a> if the notion of left-of-right is new to you. The short version is that the composite <em>f(g(x))</em>, read “f of g of x” is evaluated by first substituting <em>x</em> into <em>g</em> and then substituting that result into <em>f</em>. Evaluating the inner function first actually becomes right-to-left. Thinking functionally makes “of” a paradigm not just a preposition.</p>
<p>The adoption of left-of-right evaluation frees q to treat expression evaluation simply and uniformly without redundant parentheses getting in the way. Infix or prefix notation can be used as suits the occasion. Left-of-right expression evaluation also means that there is no ambiguity in any expression – from the compiler’s perspective if not yours. Parentheses can always be used to group terms and override the default evaluation order but there will be far fewer once you abandon old (bad) habits.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Arrange your expressions with the goal of placing parentheses and brackets on the endangered species list. Most are just programming noise unless you insist on writing Lisp.</p>
</div>
<h3 id="413-the-gotcha-of-left-of-right-evaluation">4.1.3 The Gotcha of Left-of-Right Evaluation<a class="headerlink" href="4_Operators.1#413-the-gotcha-of-left-of-right-evaluation" title="Permanent link">&para;</a></h3>
<p>Due to left-of-right evaluation, parentheses <strong>are</strong> needed to isolate the result of an expression that is the left operand of an infix operator. Let’s take a closer look at this.</p>
<p>In any language you might have seen, the following expression evaluates to 10 but not in q. You can parenthesize or rearrange to get 10.</p>
<pre><code class="q">q)2*3+4
14
q)(2*3)+4
10
q)4+2*3
10
</code></pre>

<p>In some cases parentheses are simply unavoidable.</p>
<pre><code class="q">q)(2+3)*3+4
35
</code></pre>

<p>This is the one (and only) situation in which parentheses are necessary in q.</p>
<blockquote>
<p>If the left operand of an operator is an expression it <strong>must</strong> be parenthesized, otherwise the operator will bind to the right-most element of the expression.</p>
</blockquote>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>These parentheses on the left are often not needed in traditional programming and their omission in an overzealous extermination campaign is a common error for qbies. Please don’t overreact by putting parentheses around all operands “to be safe.” Spend five seconds and think about it. Eventually it will be second nature.</p>
</div>
<h3 id="414-rationale-for-no-operator-precedence">4.1.4 Rationale for No Operator Precedence<a class="headerlink" href="4_Operators.1#414-rationale-for-no-operator-precedence" title="Permanent link">&para;</a></h3>
<p>Operator precedence as normally encountered in programming languages is feeble. It requires all the components of an expression to be analyzed before anything can be evaluated. Moreover, it often results in the use of parentheses to override the very rules that are purportedly there to help.</p>
<p>Even more damning is that operator precedence forces complexity. Some programming languages (not q) allow user-written dyadic functions to be operators. This would entail the extension of precedence levels to cover user functions, even those as yet unborn. If you’ve worked in such a language, you eventually run out of precedence levels (and patience) and end up needing parentheses with operators of the same precedence!</p>
<h2 id="42-match">4.2 Match <code>~</code><a class="headerlink" href="4_Operators.1#42-match" title="Permanent link">&para;</a></h2>
<p>The non-atomic dyadic match operator <code>~</code> applies to any two q entities, returning the boolean result <code>1b</code> if they are identical and <code>0b</code> otherwise. For two entities to match, they must have the same shape, the same type and the same value(s), but they may occupy separate storage locations. Colloquially, clones are considered identical in q.</p>
<p>This differs from the notion of identity in many traditional languages having pointers or objects. For example, in OO languages of C ancestry, objects are equal if and only if their underlying pointers address the same memory location. Identical twins are <strong>not</strong> equal. You must write your own method to determine if one object is a deep copy of another.</p>
<p>There are no restrictions as to the type or shape of the two operands for match. Try to predict each of the following results of match as you enter them into your console session.</p>
<pre><code class="q">q)42~40+2
_
q)42~42h
_
q)42f~42.0
_
q)42~`42
_
q)`42~&quot;42&quot;
_
q)4 2~2 4
_
q)42~(4 2;(1 0))
_
q)(4 2)~(4;2*1)
_
q)(())~enlist ()
_
q)(1; 2 3 4)~(1; (2; 3; 4))
_
q)(1 2;3 4)~(1;2 3 4)
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>While learning or debugging q (except for the q gods who write perfect q code every time), applying <em>match</em> can be an effective way to determine if you have what you intended. For example, qbies often trip over the following, thinking the latter is a singleton list.
<pre><code class="language-q">
q)42~(42)
1b 
</code></pre></p>
</div>
<h2 id="43-equality-and-relational-operators">4.3 Equality and Relational Operators<a class="headerlink" href="4_Operators.1#43-equality-and-relational-operators" title="Permanent link">&para;</a></h2>
<p>It comes as a surprise to many who are new to vector programming that relational operators are atomic functions that return boolean values. Relational operations do not require the types of their operands to match, but they must be compatible.</p>
<h3 id="431-equality-and-disequality">4.3.1 Equality <code>=</code> and Disequality <code>&lt;&gt;</code><a class="headerlink" href="4_Operators.1#431-equality-and-disequality" title="Permanent link">&para;</a></h3>
<p>The equality operator <code>=</code> differs from match <code>~</code> in that it is atomic in both operands, meaning it tests its operands atom-wise instead of in entirety. All atoms of numeric, temporal or char type are mutually compatible for equality, but symbols are compatible only with symbols.</p>
<p>Equality tests whether two compatible atoms represent the same value, without regard to type.</p>
<pre><code class="q">q)42=42i
_
q)42=42.0
_
q)42=0x42
_
q)42=&quot;*&quot;
_
</code></pre>

<p>That last one may come as a surprise. It simply reflects that the underlying bit pattern of the ASCII char <code>*</code> is the same as the underlying bit pattern for the integer 42.</p>
<p>For temporal types the comparison is between the points on the calendar/clock rather than the underlying counts.</p>
<pre><code class="q">q)2000.01.01=2000.01.01D00:00:00.000000000
1b
q)2015.01.01&lt;2015.02m
1b
q)12:00:00=12:00:00.000
1b
</code></pre>

<p>A symbol and a character are not compatible and an error results from the test,</p>
<pre><code class="q">q)`a=&quot;a&quot;
'type
</code></pre>

<p>The not-equal primitive is <code>&lt;&gt;</code>.</p>
<pre><code class="q">q)42&lt;&gt;0x42
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The test “not equal” can also be achieved by applying <code>not</code> to the result of testing with <code>=</code>. This what <code>&lt;&gt;</code> actually does.
<pre><code class="language-q">
q)not 42=98.6
_ 
</code></pre></p>
</div>
<p>When comparing floats, q uses multiplicative tolerance for non-zero values, which makes floating point arithmetic give reasonable results. At the time of this writing (Sep 2015) the tolerance is 10<sup>-14</sup>.</p>
<pre><code class="q">q)r:1%3
q)r
0.3333333
q)2=r+r+r+r+r+r
1b
</code></pre>

<h3 id="432-not-zero-not">4.3.2 Not Zero <code>not</code><a class="headerlink" href="4_Operators.1#432-not-zero-not" title="Permanent link">&para;</a></h3>
<p>The monadic, atomic operator <code>not</code> differs from its equivalent in some traditional languages. It returns a boolean result and has domain of all numeric, temporal and character types; it is not defined for symbols. The <code>not</code> operator generalizes the reversal of true and false bits to any entity having an underlying numeric value. It answers the Hamletonian question: to be, or not to be, zero.</p>
<p>The test against zero yields the expected results for boolean arguments.</p>
<pre><code class="q">q)not 0b
_
q)not 1b
_
</code></pre>

<p>The test against zero applies for any type with underlying numeric value.</p>
<pre><code class="q">q)not 0b
_
q)not 1b
_
q)not 42
_
q)not 0
_
q)not 0xff
_
q)not 98.6
_
</code></pre>

<p>For char values, <code>not</code> returns <code>0b</code> except for the character representing the underlying value of 0.</p>
<pre><code class="q">q)not &quot;*&quot;
_
q)not &quot; &quot;
_
q)not &quot;\000&quot;
_
</code></pre>

<p>For temporal values, an underlying 0 corresponds to the stroke of midnight at the millennium for types including a date and simply midnight for time-only types.</p>
<pre><code class="q">q)not 2000.01.01
_
q)not 2014.01.01
_
q)not 2000.01.01T00:00:00.000000000
_
q)not 2000.01m
_
q)not 00:00:00
_
q)not 12:00:00.000000000
_
</code></pre>

<h3 id="433-order">4.3.3 Order: <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code><a class="headerlink" href="4_Operators.1#433-order" title="Permanent link">&para;</a></h3>
<p>Less than <code>&lt;</code>, greater than <code>&gt;</code> less or equal <code>&lt;=</code> and greater or equal <code>&gt;=</code> are atomic and are defined for all compatible atom types. Numeric and char types are mutually compatible, but symbols are only compatible with symbols. As with equality, comparison for numeric and char types is based on underlying numeric value, independent of type.</p>
<pre><code class="q">q)4&lt;42
_
q)4h&gt;0x2a
_
q)-1.4142&lt;99i
_
</code></pre>

<p>As with equality, the comparison for temporal types is between the points on the calendar/clock rather than the underlying counts.</p>
<pre><code class="q">q)2000.01.01&lt;2000.01.01D00:00:00.000000001
1b
q)2015.01.01&lt;2015.02m
_
q)12:00:01&gt;12:00:00.000
_
</code></pre>

<p>For char atoms, comparing the underlying numeric value follows the ASCII collation sequence.</p>
<pre><code class="q">q)&quot;A&quot;&lt;&quot;Z&quot;
_
q)&quot;a&quot;&lt;&quot;Z&quot;
_
q)&quot;A&quot;&lt;&quot;O&quot;
_
q)&quot;?&quot;&lt;&quot;?&quot;
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>To see the entire ASCII collation sequence in compact form, do this.
<pre><code class="language-q">
q)16 16#"c"$til 256
_
</code></pre></p>
</div>
<p>Symbol comparison is based on lexicographic order.</p>
<pre><code class="q">q)`a&lt;`b
_
q)`abc&lt;`aba
_
</code></pre>

<p>Now that we are familiar with relational operations on atoms, let’s examine their item-wise extensions to simple lists. Notice the simple boolean list returned.</p>
<pre><code class="q">q)2 1 3=1 2 3
_
q)10 20 30&lt;=30 20 10
_
q)2=1 2 3
_
q)&quot;zaphod&quot;=&quot;Arthur&quot;
_
q)`a`b`a`d=`a`d`a`b
_
</code></pre>

<h2 id="44-basic-arithmetic-">4.4 Basic Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>%</code><a class="headerlink" href="4_Operators.1#44-basic-arithmetic-" title="Permanent link">&para;</a></h2>
<p>The arithmetic operators are atomic and come in dyadic and monadic flavors. We begin with the four operations of elementary arithmetic. Arithmetic operations are defined for all numeric and temporal types, and all numeric types are compatible.</p>
<table>
<thead>
<tr>
<th><em>Symbol</em></th>
<th><em>Name</em></th>
<th><em>Example</em></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+</code></td>
<td>Plus</td>
<td><code>42+67</code></td>
</tr>
<tr>
<td><code>-</code></td>
<td>Minus</td>
<td><code>42.0-5.3456</code></td>
</tr>
<tr>
<td><code>*</code></td>
<td>Times</td>
<td><code>2h*3h</code></td>
</tr>
<tr>
<td><code>%</code></td>
<td>Divide</td>
<td><code>42%6</code></td>
</tr>
</tbody>
</table>
<p>Arithmetic looks pretty much like other programming languages, except that division is represented by <code>%</code> since <code>/</code> is used to delimit comments. Simon Garland of Kx points out that this is actually closer to <code>÷</code> (division) the way God meant it to be written.</p>
<pre><code class="q">q)2+3
_
q)a:6
q)b:7
q)b-a
_
q)a*b
_
q)4%2
2f
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The result of division is always a float.</p>
</div>
<p>The major learning adjustment in q arithmetic expressions is due to left-of-right evaluation and the absence of precedence.</p>
<pre><code class="q">q)6*3+4
42
</code></pre>

<p>Type promotion for arithmetic operators follows two rules:</p>
<ul>
<li>Binary types are promoted to int</li>
<li>The result type of an operation is the narrowest type that will accommodate both operands.</li>
</ul>
<p>Here are examples of binary data promotion. Note that arithmetic on booleans is <strong>not</strong> performed modulo 2.</p>
<pre><code class="q">q)1b+1b
2i
q)42*1b
42
q)5i*0x2a
210i
</code></pre>

<div class="admonition important">
<p class="admonition-title">Important</p>
<p>Overflow and underflow are not trapped on arithmetic operations on integer types.
<pre><code class="language-q">
q)9223372036854775806+4
-9223372036854775806
q)2*5223372036854775800
-8000000000000000016
q)-9223372036854775806-4
9223372036854775806
</code></pre></p>
</div>
<p>When a floating-point type occurs in an expression, the result is a float.</p>
<pre><code class="q">q)6+7.0
13f
q)1.0+1b
2f
q)6.0*7.0e
42f
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The symbols for arithmetic operators are  dyadic.</p>
<p>In particular, while <code>-</code> is used as a lexical marker to denote a negative number, there is no monadic function <code>-</code> to negate a numeric value. Its attempted use for such generates an error. Use the operator <code>neg</code> instead
<pre><code class="language-q">
q)42
42
q)-42
-42
q)a:42
q)-a / error
'-
q)neg a
-42
</code></pre></p>
</div>
<p>Being atomic, arithmetic operators and their type promotion are performed atom-wise on lists.</p>
<pre><code class="q">q)1.0+10 20 30
_
q)10 20 30%1 2 3
_
q)100 200 300+1b
_
q)1+(100 200;1000 2000)
_
</code></pre>

<h2 id="45-maximum-and-minimum">4.5 Maximum <code>|</code> and Minimum <code>&amp;</code><a class="headerlink" href="4_Operators.1#45-maximum-and-minimum" title="Permanent link">&para;</a></h2>
<p>These atomic dyadic operators follow the same type promotion and compatibility rules as arithmetic operators. They are defined for all values with underlying numeric values but are not defined for symbols and GUIDs.</p>
<p>The <em>maximum</em> operator <code>|</code> returns the larger of its operands; this reduces to logical “or” for binary operands. The <em>minimum</em> operator <code>&amp;</code> returns the smaller of its operands, which reduces to logical “and” for binary operands.</p>
<pre><code class="q">q)42|43
_
q)98.6&amp;101.9
9_
q)0b|1b
_
q)1b&amp;0b
_
q)42|0x2b
_
q)&quot;a&quot;|&quot;z&quot;
&quot;_
q)`a|`z / error
_
</code></pre>

<p>Being atomic they operate item-wise on lists.</p>
<pre><code class="q">q)2|0 1 2 3 4
_
q)11010101b&amp;01100101b
_
q)&quot;zaphod&quot;|&quot;arthur&quot;
_
</code></pre>

<p>For readability of logical operations on binary data, <code>|</code> can also be written as <code>or</code> and <code>&amp;</code> can be written as <code>and</code>.</p>
<pre><code class="q">q)1b or 0b
_
q)1b and 0b
_
q)42 or 43
_
</code></pre>

<h2 id="46-amend">4.6 Amend <code>:</code><a class="headerlink" href="4_Operators.1#46-amend" title="Permanent link">&para;</a></h2>
<p>An overload of <code>:</code> that is “assign in place.”</p>
<h3 id="461-amend-in-c-language">4.6.1 Amend in C Language<a class="headerlink" href="4_Operators.1#461-amend-in-c-language" title="Permanent link">&para;</a></h3>
<p>We are familiar with the basic form of assignment.</p>
<pre><code class="q">q)a:42
</code></pre>

<p>Programmers from languages with C heritage are familiar with expressions such as,</p>
<pre><code class="c">x += 2; // C expression that assigns in place
</code></pre>

<p>This has the same effect as the following but can be more efficiently implemented at the machine instruction level.</p>
<pre><code class="c">x = x + 2; // C expression
</code></pre>

<p>Reading the first statement succinctly as "add 2 to x in place" motivates the interpretation of the operation as "amend.” To wit, the value assigned to x is amended by applying the operation + with the supplied operand 2.</p>
<h3 id="462-simple-q-amend">4.6.2 Simple q Amend<a class="headerlink" href="4_Operators.1#462-simple-q-amend" title="Permanent link">&para;</a></h3>
<p>Transliterating the above C expression to q yields the <code>+:</code> operation to amend a variable in place.</p>
<pre><code class="q">q)x:42
q)x+:1
q)x
_
</code></pre>

<p>There is nothing special about <code>+</code> here. Amend can be used with any symbolic operator having compatible signature.</p>
<pre><code class="q">q)a:43
q)a-:1
q)a
_
q)a&amp;:21
q)a
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>In spite of the linguistic dissonance, a q variable can be amended even if it has not been previously assigned.</p>
<p>In a fresh q session:</p>
<p><pre><code class="language-q">
q)x
'x
q)x+:42
q)x
_
</code></pre></p>
</div>
<h3 id="463-amend-with-lists">4.6.3 Amend with Lists<a class="headerlink" href="4_Operators.1#463-amend-with-lists" title="Permanent link">&para;</a></h3>
<p>The capability to modify in place extends to lists and indexing.</p>
<pre><code class="q">q)L:100 200 300 400
q)L[1]+:99
q)L
_
q)L[1 3]-:1
q)L
_
q)L1:(1 2 3; 10 20 30)
q)L1[;2]+:100
q)L1
_
</code></pre>

<p>A very useful idiom is <code>,:</code> which appends to a list in place.</p>
<pre><code class="q">q)L:1 2 3
q)L,:4
q)L
_
q)L,:100 200
q)L
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p><em>Amend</em> does type promotion based on the operator it is combined with, except for <code>,:</code> which requires exact type match.
<pre><code class="language-q">
q)L:1.1 2 2 3.3
q)L[1]+:100
q)L,:100
'type
</code></pre></p>
</div>
<h2 id="47-exponential-primitives-sqrt-exp-log-xexp-xlog">4.7 Exponential Primitives: sqrt, exp, log, xexp, xlog<a class="headerlink" href="4_Operators.1#47-exponential-primitives-sqrt-exp-log-xexp-xlog" title="Permanent link">&para;</a></h2>
<h3 id="471-sqrt">4.7.1 <code>sqrt</code><a class="headerlink" href="4_Operators.1#471-sqrt" title="Permanent link">&para;</a></h3>
<p>The atomic monadic <code>sqrt</code> has as domain all numeric values and returns a float representing the square root of its input. It returns null when the square root is not defined.</p>
<pre><code class="q">q)sqrt 2
_
q)sqrt 42.4
_
q)sqrt 1b
_
q)sqrt -2
_
</code></pre>

<h3 id="472-exp">4.7.2 <code>exp</code><a class="headerlink" href="4_Operators.1#472-exp" title="Permanent link">&para;</a></h3>
<p>The atomic monadic <code>exp</code> has as domain all numeric values and returns a float representing the base <em>e</em> raised to the power of its input.</p>
<pre><code class="q">q)exp 1
_
q)exp 4.2
_
q)exp -12i
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Do not confuse the <code>e</code> used in the display of base-10 scientific notation with the mathematical base of exponentials and natural logarithms.
<pre><code class="language-q">
q)1e10 / this is ten billion
1e+10 
</code></pre></p>
</div>
<h3 id="473-log">4.7.3 <code>log</code><a class="headerlink" href="4_Operators.1#473-log" title="Permanent link">&para;</a></h3>
<p>The atomic monadic <code>log</code> has as domain all numeric values and returns a float representing the natural logarithm of its input. It returns null when the logarithm is not defined.</p>
<pre><code class="q">q)log 1
_
q)log 42.0
_
q)log .0001
_
q)log -1
_
</code></pre>

<h3 id="474-xexp">4.7.4 <code>xexp</code><a class="headerlink" href="4_Operators.1#474-xexp" title="Permanent link">&para;</a></h3>
<p>The atomic dyadic <code>xexp</code> has as domain all numeric values in both operands and returns a float representing the left operand raised to the power of the right operand. When the mathematical operation is undefined, the result is null.</p>
<pre><code class="q">q)2 xexp 5
_
q)-2 xexp .5
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>We point out here, since it is our first encounter, a q naming convention. A monadic function – e.g., <code>exp</code> – sometimes has a dyadic version – <code>xexp</code> – with an ‘x’ prepended to its name. In classic Arthurian fashion, the rationalization is that the additional parameter is ‘x’.</p>
</div>
<h3 id="475-xlog">4.7.5 <code>xlog</code><a class="headerlink" href="4_Operators.1#475-xlog" title="Permanent link">&para;</a></h3>
<p>The atomic dyadic <code>xlog</code> has as domain all numeric values in both operands and returns a float representing the logarithm of the right operand with respect to the base of the left operand. When the mathematical operation is undefined the result is null.</p>
<pre><code class="q">q)2 xlog 32
-
</code></pre>

<pre><code class="q">q)2 xlog -1
-
</code></pre>

<h2 id="48-more-numeric-primitives">4.8 More Numeric Primitives<a class="headerlink" href="4_Operators.1#48-more-numeric-primitives" title="Permanent link">&para;</a></h2>
<h3 id="481-integer-division-div-and-modulus-mod">4.8.1 Integer Division <code>div</code> and Modulus <code>mod</code><a class="headerlink" href="4_Operators.1#481-integer-division-div-and-modulus-mod" title="Permanent link">&para;</a></h3>
<p>The atomic dyadic <code>div</code> is atomic in both operands, which are numeric values. The result is the integer quotient of the left operand (<em>dividend</em>) by the (positive) right operand (<em>divisor</em>), which is equal to the result of normal division rounded <strong>down</strong> to the next lower integer. The operation returns null for non-positive divisor.</p>
<pre><code class="q">q)7 div 2
3
q)7 div 2.5
2
q)-7 div 2
-4
q)-7 div 2.5
_
q)7 div -2
0N
q)3 4 5 div 2
_
q)7 div 2 3 4
_
q)3 4 5 div 2 3 4
_
</code></pre>

<p>The dyadic <code>mod</code> is atomic in both operands, which are numeric values. The result is the remainder of the integer quotient of the left operand (<em>dividend</em>) by the positive right operand (<em>divisor</em>). It is equal to</p>
<p><em>dividend</em> – (<em>dividend</em> div <em>divisor</em>)</p>
<p>The result is null for non-positive divisor.</p>
<pre><code class="q">q)7 mod 2
1
q)7 mod 2.5
_
q)-7 mod 2
1
q)-7 mod 2.5
_
q)7 mod -2
_
q)3 4 5 mod 2
_
q)7 mod 2 3 4
_
q)3 4 5 mod 2 3 4
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Many languages use <code>%</code> for modulus, but it is division in q. This is a common mistake of qbies.</p>
</div>
<h3 id="482-sign-signum">4.8.2 Sign <code>signum</code><a class="headerlink" href="4_Operators.1#482-sign-signum" title="Permanent link">&para;</a></h3>
<p>The atomic monadic <code>signum</code> has domain all numeric and temporal types and returns an int representing the sign of its input, where <code>1i</code> represents positive, <code>-1i</code> represents negative and <code>0i</code> represents a zero.</p>
<pre><code class="q">q)signum 42
1i
q)signum -42.0
_
q)signum 1b
_
q)signum 0
_
</code></pre>

<p>Temporal types are treated as their underlying offsets.</p>
<pre><code class="q">q)signum 1999.12.31
_
q)signum 12:00:00.000000000
_
</code></pre>

<h3 id="483-reciprocal">4.8.3 <code>reciprocal</code><a class="headerlink" href="4_Operators.1#483-reciprocal" title="Permanent link">&para;</a></h3>
<p>The atomic monadic˛<code>reciprocal</code> has as domain all numeric types and returns the float result of 1.0 divided by the input. It returns the appropriately signed infinity for the reciprocal of 0.</p>
<pre><code class="q">q)reciprocal 0.02380952
42.00001
q)reciprocal 0.0
0w
q)reciprocal -0.0
-0w
</code></pre>

<h3 id="484-floor-and-ceiling">4.8.4 <code>floor</code> and <code>ceiling</code><a class="headerlink" href="4_Operators.1#484-floor-and-ceiling" title="Permanent link">&para;</a></h3>
<p>The atomic monadic <code>floor</code> has as domain integer and floating-point types and returns a long representing the largest integer that is less than or equal to its argument.</p>
<pre><code class="q">q)floor 4.2
4
q)floor 4
_
q) floor -4.2
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The <code>floor</code> operator can be used to truncate or round floating-point values to a specific number of digits to the right of the decimal.
<pre><code class="language-q">
q)x:4.242
q)0.01<em>floor 100</em>x
4.24
</code></pre></p>
</div>
<p>Analogous to <code>floor</code>, the atomic monadic <code>ceiling</code> has as domain numeric types and returns the smallest long that is greater than or equal to its argument.</p>
<pre><code class="q">q)ceiling 4.2
5
q)ceiling 4
_
q)ceiling -4.2
_
</code></pre>

<div class="admonition note">
<p class="admonition-title">Note</p>
<p>For reasons known only to the q gods, <code>floor</code> and <code>ceiling</code> do not apply to short types.
<pre><code class="language-q">
q)floor 4h
'type 
</code></pre></p>
</div>
<h3 id="485-absolute-value-abs">4.8.5 Absolute Value <code>abs</code><a class="headerlink" href="4_Operators.1#485-absolute-value-abs" title="Permanent link">&para;</a></h3>
<p>The atomic monadic <code>abs</code> has domain all integer and floating-point types. The result is the input when it is greater than or equal to zero and its negation otherwise. The result of <code>abs</code> has the same type as the argument except for binary types, which are type promoted to int.</p>
<pre><code class="q">q)abs 42
_
q)abs -42
_
q)abs 1b
_
</code></pre>

<h2 id="49-operations-on-temporal-values">4.9 Operations on Temporal Values<a class="headerlink" href="4_Operators.1#49-operations-on-temporal-values" title="Permanent link">&para;</a></h2>
<p>Because all q time values are integral offsets from canonical base points, properties and operations on temporal types are simple. For example, one value of a temporal type comes before another value of the same type just when the same is true of their underlying integer values. When dealing with temporal values of different types, q implicitly promotes to the wider type and then proceeds as just described.</p>
<p>Moreover, basic temporal arithmetic is integer arithmetic. The difference of two (absolute) temporal values of the same type is the span given by the difference of their underlying integer counts. Conversely, given a temporal value, adding an integer to it (i.e., to its underlying integer count) yields a temporal value of the same type.</p>
<p>Casting reveals the underlying integer count of any temporal value.</p>
<pre><code class="q">q)`int$1999.12.31
-1i
q)`int$2013.01m
_
q)`int$12:00:00.123
_
q)`long$12:00:00.123456789
_
</code></pre>

<div class="admonition note">
<p class="admonition-title">Note</p>
<p>There is no concept of time zone in q temporal values. Those of us who wrestled with Java’s original time implementation are thankful.</p>
</div>
<h3 id="491-temporal-comparison">4.9.1 Temporal Comparison<a class="headerlink" href="4_Operators.1#491-temporal-comparison" title="Permanent link">&para;</a></h3>
<p>Comparison <strong>within</strong> a temporal type amounts to simple comparison of the underlying integral offsets. Comparison <strong>across</strong> temporal types recognizes that the underlying values express different units and realizes them in common units.</p>
<p>For example, midnight on the second day of the millennium should be equal to the second day, but a naïve comparison of the underlying counts will not tell us.</p>
<pre><code class="q">q)2000.01.02=2000.01.02D00:00:00.000000000
1b
q)`int$2000.01.02
1i
q)`long$2000.01.02D02:00:00.000000000
93600000000000
</code></pre>

<p>Values of different types should be compared in the same units, which effectively amounts to converting to the most granular units. The cast operator has the logic for such conversions built-in.</p>
<pre><code class="q">q)`timestamp$2001.01.02
2001.01.02D00:00:00.000000000
</code></pre>

<p>To compare temporal values of different types, q converts to the most granular type and then does a straight comparison of the underlying values.</p>
<pre><code class="q">q)2000.01.01&lt;2000.01.01D12:00:00.000000000
_
</code></pre>

<h3 id="492-temporal-arithmetic">4.9.2 Temporal Arithmetic<a class="headerlink" href="4_Operators.1#492-temporal-arithmetic" title="Permanent link">&para;</a></h3>
<p>In contrast to many traditional languages, expressions involving temporal types and numerical types that should make sense actually work as expected. For example, temporal values <strong>are</strong> their underlying offsets for equality and comparison testing against numeric values.</p>
<pre><code class="q">q)2000.01.01=0
1b
q)12:00:00=12*60*60
_
q)1999.12.31&lt;0
_
</code></pre>

<p>Adding an integral value to a temporal value works because it is just added to the underlying offset.</p>
<pre><code class="q">q)2014.12.31+1
_
q)2015.01.01+til 31 / all days in January
_
q)12:00:00+1
</code></pre>

<p>Adding a temporal value to another causes it to be viewed as a span, as you would want.</p>
<pre><code class="q">q)12:00:00+01:00:00
_
</code></pre>

<p>One important case is adding a timespan to a date to yield a timestamp. There is actually some calculation under the covers to make this work.</p>
<pre><code class="q">q)2015.01.01+12:00:00.000000000
2015.01.01D12:00:00.000000000
</code></pre>

<p>The difference between two values of a temporal type that counts days is the int difference of their underlying day counts.</p>
<pre><code class="q">q)2001.01.01-2000.01.01
366i
q)2015.06m-2015.01m
_
</code></pre>

<p>The difference between two values of a type with time is the difference of the underlying offsets, expressed as the same type – i.e., as a span.</p>
<pre><code class="q">q)2015.01.01D00:00:00.000000000-2014.01.01D00:00:00.000000000
365D00:00:00.000000000
q)12:00:00-11:00:00
_
q)12:00-11:00
_
</code></pre>

<h2 id="410-operations-on-infinities-and-nulls">4.10 Operations on Infinities and Nulls<a class="headerlink" href="4_Operators.1#410-operations-on-infinities-and-nulls" title="Permanent link">&para;</a></h2>
<p>Here we summarize the various behaviors of nulls and infinities in one place.</p>
<p>The float infinities and nulls act in the mathematically correct fashion in numeric expressions and comparisons. Integer infinities act correctly in comparisons and act as their underlying (finite) values in other operations.</p>
<p>The bit patterns of the integral nulls and infinities are legitimate base-2 integral representations with the high-order bit being the sign.</p>
<table>
<thead>
<tr>
<th><em>Value</em></th>
<th><em>Bit Representation</em></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0Wh</code></td>
<td><code>0111111111111111b</code></td>
</tr>
<tr>
<td><code>-0Wh</code></td>
<td><code>1000000000000001b</code></td>
</tr>
<tr>
<td><code>0Wi</code></td>
<td><code>01111111111111111111111111111111b</code></td>
</tr>
<tr>
<td><code>-0Wi</code></td>
<td><code>10000000000000000000000000000001b</code></td>
</tr>
<tr>
<td><code>0W</code></td>
<td><code>0111111111111111111111111111111111111111111111111111111111111111b</code></td>
</tr>
<tr>
<td><code>-0W</code></td>
<td><code>1000000000000000000000000000000000000000000000000000000000000001b</code></td>
</tr>
</tbody>
</table>
<p>The same type-promotion rules apply to a null as for a normal value of that type.</p>
<p>An infinity value equals or matches only itself. All nulls are equal (they represent missing data), but different type nulls do not match (type matters).</p>
<p>In contrast to some languages, such as C, separate instances of NaN are equal.</p>
<pre><code class="q">q)(0%0)=0%0
_
</code></pre>

<p>The <code>not</code> operator returns <code>0b</code> for all infinities and nulls since they all fail the test of equality with 0.</p>
<pre><code class="q">q)not 0W
_
q)not -0w
_
q)not 0N
_
</code></pre>

<p>The <code>neg</code> operator reverses the sign of infinities but does nothing to nulls since sign is meaningless for missing data.</p>
<pre><code class="q">q)neg 0W
-_
q)neg -0w
_
q)neg 0N
_
</code></pre>

<p>We saw previously that for any numeric type</p>
<p>null &lt; negative infinity &lt; normal value &lt; positive infinity</p>
<p>Nulls of different type, while equal, are not otherwise comparable – i.e., any relational comparison results in <code>0b</code>.</p>
<p>Infinities of different type are ordered by their width. For positive infinities</p>
<p>short &lt; int &lt; long &lt; real &lt; float</p>
<p>For negative infinities</p>
<p>-float &lt; -real &lt; -long &lt; -int &lt; -short</p>
<p>Some examples follow. Try to predict the result before pressing Return.</p>
<pre><code class="q">q)42&lt;0W
_
q)-0w&lt;42.0
_
q)-0w&lt;1901.01.01
_
q)-0w&lt;0w
_
q)0W&lt;0w
_
q)-0w&lt;0W
_
q)-10000000&lt;0N
_
q)0N&lt;42i
_
q)0n&lt;-0w
_
</code></pre>

<p>The null symbol is less than any other symbol</p>
<pre><code class="q">q)`a&lt;`
_
</code></pre>

<p>The behavior of <code>|</code> and <code>&amp;</code> with infinities and nulls follows from the rules for equality, comparison and type promotion mentioned already.</p>
<pre><code class="q">q)42|0W
_
q)-42&amp;0N
_
q)0w|0n
_
q)-0w&amp;0n
_
q)0n|0N
_
q)0Wi&amp;0W
_
</code></pre>

<p>The last result obtains because int infinity is promoted to a long and its bit pattern corresponds to the maximal positive 32-bit integer.</p>
<h2 id="411-alias">4.11 Alias <code>::</code><a class="headerlink" href="4_Operators.1#411-alias" title="Permanent link">&para;</a></h2>
<p>Because q is strict, expressions are normally evaluated as soon as encountered by the interpreter. In particular, assignment with an expression on the right requires the expression to be evaluated before the result is assigned.</p>
<p>An <em>alias</em> is a variable that <strong>is</strong> an expression – i.e., it is <strong>not</strong> the result of expression evaluation but the expression itself. Otherwise put, an alias provides a way to defer evaluation of an expression.</p>
<p>Evaluation of an alias is <em>lazy</em>, meaning that it occurs only when necessary. More precisely, evaluation is <em>forced</em> when the variable is referenced, at which point a determination is made whether the expression needs to be (re)evaluated.</p>
<ul>
<li>If it is the first reference or if any variable in its associated expression has changed since the last evaluation, evaluation proceeds with the current values of all the variables in the expression. The result of the most recent evaluation is then stored internally and also returned. The stored result is said to be <em>memoized</em>.</li>
<li>If no variables in the expression have changed since the previous evaluation, the memoized value is returned.</li>
</ul>
<p>The alias variable is said to <em>depend</em> on any variables in its expression.</p>
<h3 id="4111-creating-an-alias-with-double-colon">4.11.1 Creating an Alias with Double Colon<a class="headerlink" href="4_Operators.1#4111-creating-an-alias-with-double-colon" title="Permanent link">&para;</a></h3>
<p>Double colon <code>::</code> used outside a function body defines the variable in the left operand as an alias of the expression in the right operand. When the alias is referenced, the underlying expression is (re)evaluated as described above. The following trivial example defines <code>b</code> as an alias for <code>a</code>, contrasted with <code>c</code> which is just assigned the value of <code>a</code>. Observe that the subsequently changed value of <code>a</code> is reflected in <code>b</code> but not in <code>c</code>.</p>
<pre><code class="q">q)a:42
q)b::a
q)c:a
q)a:43
q)b
43
q)c
42
</code></pre>

<p>Here is a more interesting alias.</p>
<pre><code class="q">q)w::(x*x)+y*y
q)x:3
q)y:4
q)w
25
q)y:5
q)w
34
</code></pre>

<p>The mysteriously named utility <code>0N!</code> is the identify function fortified with the side effect of displaying its input on the console.</p>
<p>It is a non-invasive way to inspect the inner workings of an in-flight evaluation.</p>
<pre><code class="q">q)w::(0N!x*x)+y*y
q)x:3
q)y:4
q)w
9
25
q)w
25
q)y:6
q)w
9
45
</code></pre>

<p>Observe that the first time <code>w</code> is referenced, the expression <strong>is</strong> evaluated, as indicated by the display of the value of <code>x*x</code>. On the next reference, the expression is <strong>not</strong> re-evaluated since none of the variables it depends on have changed. After changing <code>y</code>, the last reference causes re-evaluation.</p>
<h3 id="4112-alias-vs-function">4.11.2 Alias vs. Function<a class="headerlink" href="4_Operators.1#4112-alias-vs-function" title="Permanent link">&para;</a></h3>
<p>A function also represents deferred evaluation. In the previous example, we could define,</p>
<pre><code class="q">q)fu:{(x*x)+y*y}
q)fu[3;4]
25
</code></pre>

<p>There are two key differences between an alias and the analogous function.</p>
<ul>
<li>To evaluate an expression wrapped in a function you explicitly provide the arguments and apply the function all in one step. With an alias you set the variables at any point in the program and the expression is evaluated when, and only when, the alias variable is referenced.</li>
<li>The function does not memoize its result, so it recalculates on every application, even if the arguments do not change.</li>
</ul>
<h3 id="4113-dependencies">4.11.3 Dependencies<a class="headerlink" href="4_Operators.1#4113-dependencies" title="Permanent link">&para;</a></h3>
<p>An alias variable <em>depends</em> on the entities in its associated expression. In our previous example <code>w</code> depends on <code>x</code> and <code>y</code>. A list of all dependencies is maintained in the <a href="http://code.kx.com/q/ref/dotz/#zb-dependencies">system dictionary <code>.z.b</code></a>, which is also obtainable via the <a href="http://code.kx.com/q/ref/syscmds/#b-views">command <code>\b</code></a>.</p>
<pre><code class="q">q)w::(x*x)+y*y
q).z.b
x| w
y| w
</code></pre>

<p>Each key in <code>.z.b</code> is associated to all the entities that depend on it.</p>
<p>It is permissible to create an alias with another alias in its expression. This results in a chain of dependencies. The entire chain is resolved lazily upon reference.</p>
<pre><code class="q">q)u::w*w
q).z.b
x| w
y| w
w| u
q)x:3
q)y:4
q)u
_
</code></pre>

<p>Such a recursive definition leads to a hierarchy of dependencies, in which a variable depends not only on the variables in its own expression, but also any variables that its expression depends on, etc. You can easily build sophisticated dependency graphs this way.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can easily build unmaintainable code this way.</p>
</div>
<p>A dependency chain that would create a loop is detected and results in an error. Continuing the example above,</p>
<pre><code class="q">q)x::u
q)x
'loop
</code></pre>

<h3 id="4114-views">4.11.4 Views<a class="headerlink" href="4_Operators.1#4114-views" title="Permanent link">&para;</a></h3>
<p>Aliasing is commonly used to provide a database view by specifying a query as the expression.</p>
<pre><code class="q">q)t:([]c1:`a`b`c`a;c2:20 15 10 20;c3:99.5 99.45 99.42 99.4)
q)v::select sym:c1,px:c3 from t where c1=`a
q)v
sym px
--------
a 99.5
a 99.4
q)update c3:42.0 from `t where c1=`a
_
q)v
_
</code></pre>

<p>The table dependencies of a view are reflected in <code>.z.b</code>.</p>
<pre><code class="q">q).z.b
_
</code></pre>
                
                  
                
              
              
                


              
            </article>
          </div>
        </div>
      </main>
      
        
<footer class="md-footer">
  
    <div class="md-footer-nav">
      <nav class="md-footer-nav__inner md-grid">
        
          <a href="3_Lists.1" title="3. Lists" class="md-flex md-footer-nav__link md-footer-nav__link--prev" rel="prev">
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-back md-footer-nav__button"></i>
            </div>
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Previous
                </span>
                3. Lists
              </span>
            </div>
          </a>
        
        
          <a href="5_Dictionaries.1" title="5. Dictionaries" class="md-flex md-footer-nav__link md-footer-nav__link--next" rel="next">
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Next
                </span>
                5. Dictionaries
              </span>
            </div>
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-forward md-footer-nav__button"></i>
            </div>
          </a>
        
      </nav>
    </div>
  
  <div class="md-footer-meta md-typeset">
    <div class="md-footer-meta__inner md-grid">
      <div class="md-footer-copyright">
        
          <div class="md-footer-copyright__highlight">
            ©2015 Jeffry A. Borror / q4m LLC. Kx® and kdb+ are registered trademarks of Kx Systems, Inc., a subsidiary of First Derivatives plc.
          </div>
        
        powered by
        <a href="http://www.mkdocs.org">MkDocs</a>
        and
        <a href="https://squidfunk.github.io/mkdocs-material/">
          Material for MkDocs</a>
      </div>
      
        
      
    </div>
  </div>
</footer>
      
    </div>
    
      <script src="assets/javascripts/application.b438e6c5.js"></script>
      
      <script>app.initialize({version:"0.17.3",url:{base:".."}})</script>
      
        <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
      
        <script src="https://tracker.mrpfd.com/tracker.js"></script>
      
        <script src="http://code.kx.com/scripts/googleanalytics.js"></script>
      
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"></script>
      
        <script src="https://use.fontawesome.com/3dbf29ed12.js"></script>
      
        <script src="http://code.kx.com/scripts/prism.js"></script>
      
    
    
      
    
  </body>
</html>