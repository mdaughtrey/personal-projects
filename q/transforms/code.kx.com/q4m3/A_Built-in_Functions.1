



<!DOCTYPE html>
<html lang="en" class="no-js">
  <head>
    
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <meta http-equiv="x-ua-compatible" content="ie=edge">
      
        <meta name="description" content="Q for Mortals">
      
      
        <link rel="canonical" href="A_Built-in_Functions.1">
      
      
        <meta name="author" content="Jeffry Borror">
      
      
        <meta name="lang:clipboard.copy" content="Copy to clipboard">
      
        <meta name="lang:clipboard.copied" content="Copied to clipboard">
      
        <meta name="lang:search.language" content="en">
      
        <meta name="lang:search.pipeline.stopwords" content="True">
      
        <meta name="lang:search.pipeline.trimmer" content="True">
      
        <meta name="lang:search.result.none" content="No matching documents">
      
        <meta name="lang:search.result.one" content="1 matching document">
      
        <meta name="lang:search.result.other" content="# matching documents">
      
        <meta name="lang:search.tokenizer" content="[\s\-]+">
      
      <link rel="shortcut icon" href="img/favicon.ico">
      <meta name="generator" content="mkdocs-0.17.3, mkdocs-material-2.7.2">
    
    
      
        <title>Appendix A. Built-in Functions - Q for Mortals</title>
      
    
    
      <link rel="stylesheet" href="assets/stylesheets/application.8d40d89b.css">
      
        <link rel="stylesheet" href="assets/stylesheets/application-palette.6079476c.css">
      
    
    
      <script src="assets/javascripts/modernizr.1aa3b519.js"></script>
    
    
      <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
      
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,400i,700|Roboto+Mono">
        <style>body,input{font-family:"Roboto","Helvetica Neue",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:"Roboto Mono","Courier New",Courier,monospace}</style>
      
      <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    
    
      <link rel="stylesheet" href="stylesheets/extra.css">
    
      <link rel="stylesheet" href="http://code.kx.com/stylesheets/prism.css">
    
    
  </head>
  
    
    
    <body dir="ltr" data-md-color-primary="blue" data-md-color-accent="deep-orange">
  
    <svg class="md-svg">
      <defs>
        
        
      </defs>
    </svg>
    <input class="md-toggle" data-md-toggle="drawer" type="checkbox" id="drawer" autocomplete="off">
    <input class="md-toggle" data-md-toggle="search" type="checkbox" id="search" autocomplete="off">
    <label class="md-overlay" data-md-component="overlay" for="drawer"></label>
    
      <a href="A_Built-in_Functions.1#a-built-in-functions" tabindex="1" class="md-skip">
        Skip to content
      </a>
    
    
      <header class="md-header" data-md-component="header">
  <nav class="md-header-nav md-grid">
    <div class="md-flex">
      <div class="md-flex__cell md-flex__cell--shrink">
        <a href="http://code.kx.com/q4m3" title="Q for Mortals" class="md-header-nav__button md-logo">
          
            <img src="img/qfm3.jpg" width="24" height="24">
          
        </a>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        <label class="md-icon md-icon--menu md-header-nav__button" for="drawer"></label>
      </div>
      <div class="md-flex__cell md-flex__cell--stretch">
        <div class="md-flex__ellipsis md-header-nav__title" data-md-component="title">
          
            
              <span class="md-header-nav__topic">
                Q for Mortals
              </span>
              <span class="md-header-nav__topic">
                Appendix A. Built-in Functions
              </span>
            
          
        </div>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        
          
            <label class="md-icon md-icon--search md-header-nav__button" for="search"></label>
            
<div class="md-search" data-md-component="search" role="dialog">
  <label class="md-search__overlay" for="search"></label>
  <div class="md-search__inner" role="search">
    <form class="md-search__form" name="search">
      <input type="text" class="md-search__input" name="query" placeholder="Search" autocapitalize="off" autocorrect="off" autocomplete="off" spellcheck="false" data-md-component="query" data-md-state="active">
      <label class="md-icon md-search__icon" for="search"></label>
      <button type="reset" class="md-icon md-search__icon" data-md-component="reset" tabindex="-1">
        &#xE5CD;
      </button>
    </form>
    <div class="md-search__output">
      <div class="md-search__scrollwrap" data-md-scrollfix>
        <div class="md-search-result" data-md-component="result">
          <div class="md-search-result__meta">
            Type to start searching
          </div>
          <ol class="md-search-result__list"></ol>
        </div>
      </div>
    </div>
  </div>
</div>
          
        
      </div>
      
    </div>
  </nav>
</header>
    
    <div class="md-container">
      
        
      
      
      <main class="md-main">
        <div class="md-main__inner md-grid" data-md-component="container">
          
            
              <div class="md-sidebar md-sidebar--primary" data-md-component="navigation">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    <nav class="md-nav md-nav--primary" data-md-level="0">
  <label class="md-nav__title md-nav__title--site" for="drawer">
    <span class="md-nav__button md-logo">
      
        <img src="img/qfm3.jpg" width="48" height="48">
      
    </span>
    Q for Mortals
  </label>
  
  <ul class="md-nav__list" data-md-scrollfix>
    
      
      
      


  <li class="md-nav__item">
    <a href="redirect/index.html" title="code.kx.com" class="md-nav__link">
      code.kx.com
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="index.html" title="Contents" class="md-nav__link">
      Contents
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="preface/index.html" title="Preface" class="md-nav__link">
      Preface
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="0_Overview/index.html" title="0. Overview" class="md-nav__link">
      0. Overview
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="1_Q_Shock_and_Awe.1" title="1. Q Shock and Awe" class="md-nav__link">
      1. Q Shock and Awe
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="2_Basic_Data_Types_Atoms/index.html" title="2. Basic Data Types – Atoms" class="md-nav__link">
      2. Basic Data Types – Atoms
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="3_Lists.1" title="3. Lists" class="md-nav__link">
      3. Lists
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="4_Operators.1" title="4. Operators" class="md-nav__link">
      4. Operators
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="5_Dictionaries.1" title="5. Dictionaries" class="md-nav__link">
      5. Dictionaries
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="6_Functions.1" title="6. Functions" class="md-nav__link">
      6. Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="7_Transforming_Data/index.html" title="7. Transforming Data" class="md-nav__link">
      7. Transforming Data
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="8_Tables.1" title="8. Tables" class="md-nav__link">
      8. Tables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="9_Queries_q-sql.1" title="9. Queries – q-sql" class="md-nav__link">
      9. Queries – q-sql
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="10_Execution_Control/index.html" title="10. Execution Control" class="md-nav__link">
      10. Execution Control
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="11_IO.1" title="11. I/O" class="md-nav__link">
      11. I/O
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="12_Workspace_Organization.1" title="12. Workspace Organization" class="md-nav__link">
      12. Workspace Organization
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="13_Commands_and_System_Variables.1" title="13. Commands and System Variables" class="md-nav__link">
      13. Commands and System Variables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="14_Introduction_to_Kdb+.1" title="14. Introduction to Kdb+" class="md-nav__link">
      14. Introduction to Kdb+
    </a>
  </li>

    
      
      
      

  


  <li class="md-nav__item md-nav__item--active">
    
    <input class="md-toggle md-nav__toggle" data-md-toggle="toc" type="checkbox" id="toc">
    
      
    
    
      <label class="md-nav__link md-nav__link--active" for="toc">
        Appendix A. Built-in Functions
      </label>
    
    <a href="A_Built-in_Functions.1" title="Appendix A. Built-in Functions" class="md-nav__link md-nav__link--active">
      Appendix A. Built-in Functions
    </a>
    
      
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a0-overview" title="A.0 Overview" class="md-nav__link">
    A.0 Overview
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a1-acos" title="A.1 acos" class="md-nav__link">
    A.1 acos
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a2-all" title="A.2 all" class="md-nav__link">
    A.2 all
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a3-and" title="A.3 and" class="md-nav__link">
    A.3 and
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a4-any" title="A.4 any" class="md-nav__link">
    A.4 any
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a5-asc" title="A.5 asc" class="md-nav__link">
    A.5 asc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a6-asin" title="A.6 asin" class="md-nav__link">
    A.6 asin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a7-atan" title="A.7 atan" class="md-nav__link">
    A.7 atan
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a8-attr" title="A.8 attr" class="md-nav__link">
    A.8 attr
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a9-avg" title="A.9 avg" class="md-nav__link">
    A.9 avg
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a10-avgs" title="A.10 avgs" class="md-nav__link">
    A.10 avgs
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a11-bin" title="A.11 bin" class="md-nav__link">
    A.11 bin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a12-binr" title="A.12 binr" class="md-nav__link">
    A.12 binr
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a13-choose" title="A.13 choose ?" class="md-nav__link">
    A.13 choose ?
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a14-conditionally-enumerate" title="A.14 Conditionally Enumerate ?" class="md-nav__link">
    A.14 Conditionally Enumerate ?
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a15-cor" title="A.15 cor" class="md-nav__link">
    A.15 cor
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a16-count" title="A.16 count" class="md-nav__link">
    A.16 count
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a17-cov" title="A.17 cov" class="md-nav__link">
    A.17 cov
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a18-cross" title="A.18 cross" class="md-nav__link">
    A.18 cross
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a19-cut" title="A.19 cut" class="md-nav__link">
    A.19 cut
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a20-cut-_" title="A.20 cut _" class="md-nav__link">
    A.20 cut _
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a21-deltas" title="A.21 deltas" class="md-nav__link">
    A.21 deltas
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a22-desc" title="A.22 desc" class="md-nav__link">
    A.22 desc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a23-dev" title="A.23 dev" class="md-nav__link">
    A.23 dev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a24-differ" title="A.24 differ" class="md-nav__link">
    A.24 differ
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a25-distinct" title="A.25 distinct" class="md-nav__link">
    A.25 distinct
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a26-enlist" title="A.26 enlist" class="md-nav__link">
    A.26 enlist
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a27-eval" title="A.27 eval" class="md-nav__link">
    A.27 eval
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a28-except" title="A.28 except" class="md-nav__link">
    A.28 except
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a29-exit" title="A.29 exit" class="md-nav__link">
    A.29 exit
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a30-fill" title="A.30 fill ^" class="md-nav__link">
    A.30 fill ^
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a31-find" title="A.31 find ?" class="md-nav__link">
    A.31 find ?
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a32-fills" title="A.32 fills" class="md-nav__link">
    A.32 fills
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a33-flip" title="A.33 flip" class="md-nav__link">
    A.33 flip
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a34-getenv" title="A.34 getenv" class="md-nav__link">
    A.34 getenv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a35-group" title="A.35 group" class="md-nav__link">
    A.35 group
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a36-gtime" title="A.36 gtime" class="md-nav__link">
    A.36 gtime
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a37-iasc" title="A.37 iasc" class="md-nav__link">
    A.37 iasc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a38-identity" title="A.38 identity ::" class="md-nav__link">
    A.38 identity ::
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a39-idesc" title="A.39 idesc" class="md-nav__link">
    A.39 idesc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a40-in" title="A.40 in" class="md-nav__link">
    A.40 in
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a41-inter" title="A.41 inter" class="md-nav__link">
    A.41 inter
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a42-inv" title="A.42 inv" class="md-nav__link">
    A.42 inv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a43-join" title="A.43 join ," class="md-nav__link">
    A.43 join ,
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a44-key" title="A.44 key" class="md-nav__link">
    A.44 key
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a45-like" title="A.45 like" class="md-nav__link">
    A.45 like
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a46-lower" title="A.46 lower" class="md-nav__link">
    A.46 lower
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a47-lsq" title="A.47 lsq" class="md-nav__link">
    A.47 lsq
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a48-ltime" title="A.48 ltime" class="md-nav__link">
    A.48 ltime
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a49-ltrim" title="A.49 ltrim" class="md-nav__link">
    A.49 ltrim
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a50-mavg" title="A.50 mavg" class="md-nav__link">
    A.50 mavg
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a51-max" title="A.51 max" class="md-nav__link">
    A.51 max
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a52-maxs" title="A.52 maxs" class="md-nav__link">
    A.52 maxs
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a53-mcount" title="A.53 mcount" class="md-nav__link">
    A.53 mcount
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a54-md5" title="A.54 md5" class="md-nav__link">
    A.54 md5
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a55-mdev" title="A.55 mdev" class="md-nav__link">
    A.55 mdev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a56-med" title="A.56 med" class="md-nav__link">
    A.56 med
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a57-min" title="A.57 min" class="md-nav__link">
    A.57 min
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a58-mins" title="A.58 mins" class="md-nav__link">
    A.58 mins
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a59-mmax" title="A.59 mmax" class="md-nav__link">
    A.59 mmax
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a60-mmin" title="A.60 mmin" class="md-nav__link">
    A.60 mmin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a61-mmu" title="A.61 mmu" class="md-nav__link">
    A.61 mmu
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a62-msum" title="A.62 msum" class="md-nav__link">
    A.62 msum
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a63-next" title="A.63 next" class="md-nav__link">
    A.63 next
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a64-null" title="A.64 null" class="md-nav__link">
    A.64 null
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a65-or" title="A.65 or" class="md-nav__link">
    A.65 or
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a66-over" title="A.66 over" class="md-nav__link">
    A.66 over
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a67-parse" title="A.67 parse" class="md-nav__link">
    A.67 parse
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a68-peach" title="A.68 peach" class="md-nav__link">
    A.68 peach
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a681-threads" title="A.68.1 Threads" class="md-nav__link">
    A.68.1 Threads
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a682-distributed-peach" title="A.68.2 Distributed peach" class="md-nav__link">
    A.68.2 Distributed peach
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a69-prd" title="A.69 prd" class="md-nav__link">
    A.69 prd
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a70-prds" title="A.70 prds" class="md-nav__link">
    A.70 prds
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a71-prev" title="A.71 prev" class="md-nav__link">
    A.71 prev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a72-prior" title="A.72 prior" class="md-nav__link">
    A.72 prior
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a73-rank" title="A.73 rank" class="md-nav__link">
    A.73 rank
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a74-ratios" title="A.74 ratios" class="md-nav__link">
    A.74 ratios
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a75-raze" title="A.75 raze" class="md-nav__link">
    A.75 raze
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a76-reval" title="A.76 reval" class="md-nav__link">
    A.76 reval
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a77-reverse" title="A.77 reverse" class="md-nav__link">
    A.77 reverse
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a78-rload" title="A.78 rload" class="md-nav__link">
    A.78 rload
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a79-rotate" title="A.79 rotate" class="md-nav__link">
    A.79 rotate
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a80-rsave" title="A.80 rsave" class="md-nav__link">
    A.80 rsave
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a81-rtrim" title="A.81 rtrim" class="md-nav__link">
    A.81 rtrim
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a82-scan" title="A.82 scan" class="md-nav__link">
    A.82 scan
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a83-scov" title="A.83 scov" class="md-nav__link">
    A.83 scov
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a84-sdev" title="A.84 sdev" class="md-nav__link">
    A.84 sdev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a85-setenv" title="A.85 setenv" class="md-nav__link">
    A.85 setenv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a86-sin" title="A.86 sin" class="md-nav__link">
    A.86 sin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a87-ss" title="A.87 ss" class="md-nav__link">
    A.87 ss
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a88-ssr" title="A.88 ssr" class="md-nav__link">
    A.88 ssr
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a89-string" title="A.89 string" class="md-nav__link">
    A.89 string
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a90-sublist" title="A.90 sublist" class="md-nav__link">
    A.90 sublist
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a91-sum" title="A.91 sum" class="md-nav__link">
    A.91 sum
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a92-sums" title="A.92 sums" class="md-nav__link">
    A.92 sums
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a93-sv" title="A.93 sv" class="md-nav__link">
    A.93 sv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a94-svar" title="A.94 svar" class="md-nav__link">
    A.94 svar
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a95-system" title="A.95 system" class="md-nav__link">
    A.95 system
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a96-takereshape" title="A.96 take/reshape #" class="md-nav__link">
    A.96 take/reshape #
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a97-tan" title="A.97 tan" class="md-nav__link">
    A.97 tan
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a98-til" title="A.98 til" class="md-nav__link">
    A.98 til
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a99-trim" title="A.99 trim" class="md-nav__link">
    A.99 trim
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a100-ungroup" title="A.100 ungroup" class="md-nav__link">
    A.100 ungroup
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a101-union" title="A.101 union" class="md-nav__link">
    A.101 union
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a102-upper" title="A.102 upper" class="md-nav__link">
    A.102 upper
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a103-value" title="A.103 value" class="md-nav__link">
    A.103 value
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a104-var" title="A.104 var" class="md-nav__link">
    A.104 var
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a105-vs" title="A.105 vs" class="md-nav__link">
    A.105 vs
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a106-wavg" title="A.106 wavg" class="md-nav__link">
    A.106 wavg
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a107-where" title="A.107 where" class="md-nav__link">
    A.107 where
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a108-within" title="A.108 within" class="md-nav__link">
    A.108 within
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a109-wsum" title="A.109 wsum" class="md-nav__link">
    A.109 wsum
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a110-xbar" title="A.110 xbar" class="md-nav__link">
    A.110 xbar
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a111-xprev" title="A.111 xprev" class="md-nav__link">
    A.111 xprev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a112-xrank" title="A.112 xrank" class="md-nav__link">
    A.112 xrank
  </a>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
    
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="B_Error_Messages/index.html" title="Appendix B. Error Messages" class="md-nav__link">
      Appendix B. Error Messages
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="colophon/index.html" title="Colophon" class="md-nav__link">
      Colophon
    </a>
  </li>

    
  </ul>
</nav>
                  </div>
                </div>
              </div>
            
            
              <div class="md-sidebar md-sidebar--secondary" data-md-component="toc">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a0-overview" title="A.0 Overview" class="md-nav__link">
    A.0 Overview
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a1-acos" title="A.1 acos" class="md-nav__link">
    A.1 acos
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a2-all" title="A.2 all" class="md-nav__link">
    A.2 all
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a3-and" title="A.3 and" class="md-nav__link">
    A.3 and
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a4-any" title="A.4 any" class="md-nav__link">
    A.4 any
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a5-asc" title="A.5 asc" class="md-nav__link">
    A.5 asc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a6-asin" title="A.6 asin" class="md-nav__link">
    A.6 asin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a7-atan" title="A.7 atan" class="md-nav__link">
    A.7 atan
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a8-attr" title="A.8 attr" class="md-nav__link">
    A.8 attr
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a9-avg" title="A.9 avg" class="md-nav__link">
    A.9 avg
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a10-avgs" title="A.10 avgs" class="md-nav__link">
    A.10 avgs
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a11-bin" title="A.11 bin" class="md-nav__link">
    A.11 bin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a12-binr" title="A.12 binr" class="md-nav__link">
    A.12 binr
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a13-choose" title="A.13 choose ?" class="md-nav__link">
    A.13 choose ?
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a14-conditionally-enumerate" title="A.14 Conditionally Enumerate ?" class="md-nav__link">
    A.14 Conditionally Enumerate ?
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a15-cor" title="A.15 cor" class="md-nav__link">
    A.15 cor
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a16-count" title="A.16 count" class="md-nav__link">
    A.16 count
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a17-cov" title="A.17 cov" class="md-nav__link">
    A.17 cov
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a18-cross" title="A.18 cross" class="md-nav__link">
    A.18 cross
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a19-cut" title="A.19 cut" class="md-nav__link">
    A.19 cut
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a20-cut-_" title="A.20 cut _" class="md-nav__link">
    A.20 cut _
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a21-deltas" title="A.21 deltas" class="md-nav__link">
    A.21 deltas
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a22-desc" title="A.22 desc" class="md-nav__link">
    A.22 desc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a23-dev" title="A.23 dev" class="md-nav__link">
    A.23 dev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a24-differ" title="A.24 differ" class="md-nav__link">
    A.24 differ
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a25-distinct" title="A.25 distinct" class="md-nav__link">
    A.25 distinct
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a26-enlist" title="A.26 enlist" class="md-nav__link">
    A.26 enlist
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a27-eval" title="A.27 eval" class="md-nav__link">
    A.27 eval
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a28-except" title="A.28 except" class="md-nav__link">
    A.28 except
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a29-exit" title="A.29 exit" class="md-nav__link">
    A.29 exit
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a30-fill" title="A.30 fill ^" class="md-nav__link">
    A.30 fill ^
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a31-find" title="A.31 find ?" class="md-nav__link">
    A.31 find ?
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a32-fills" title="A.32 fills" class="md-nav__link">
    A.32 fills
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a33-flip" title="A.33 flip" class="md-nav__link">
    A.33 flip
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a34-getenv" title="A.34 getenv" class="md-nav__link">
    A.34 getenv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a35-group" title="A.35 group" class="md-nav__link">
    A.35 group
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a36-gtime" title="A.36 gtime" class="md-nav__link">
    A.36 gtime
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a37-iasc" title="A.37 iasc" class="md-nav__link">
    A.37 iasc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a38-identity" title="A.38 identity ::" class="md-nav__link">
    A.38 identity ::
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a39-idesc" title="A.39 idesc" class="md-nav__link">
    A.39 idesc
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a40-in" title="A.40 in" class="md-nav__link">
    A.40 in
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a41-inter" title="A.41 inter" class="md-nav__link">
    A.41 inter
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a42-inv" title="A.42 inv" class="md-nav__link">
    A.42 inv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a43-join" title="A.43 join ," class="md-nav__link">
    A.43 join ,
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a44-key" title="A.44 key" class="md-nav__link">
    A.44 key
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a45-like" title="A.45 like" class="md-nav__link">
    A.45 like
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a46-lower" title="A.46 lower" class="md-nav__link">
    A.46 lower
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a47-lsq" title="A.47 lsq" class="md-nav__link">
    A.47 lsq
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a48-ltime" title="A.48 ltime" class="md-nav__link">
    A.48 ltime
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a49-ltrim" title="A.49 ltrim" class="md-nav__link">
    A.49 ltrim
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a50-mavg" title="A.50 mavg" class="md-nav__link">
    A.50 mavg
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a51-max" title="A.51 max" class="md-nav__link">
    A.51 max
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a52-maxs" title="A.52 maxs" class="md-nav__link">
    A.52 maxs
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a53-mcount" title="A.53 mcount" class="md-nav__link">
    A.53 mcount
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a54-md5" title="A.54 md5" class="md-nav__link">
    A.54 md5
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a55-mdev" title="A.55 mdev" class="md-nav__link">
    A.55 mdev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a56-med" title="A.56 med" class="md-nav__link">
    A.56 med
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a57-min" title="A.57 min" class="md-nav__link">
    A.57 min
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a58-mins" title="A.58 mins" class="md-nav__link">
    A.58 mins
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a59-mmax" title="A.59 mmax" class="md-nav__link">
    A.59 mmax
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a60-mmin" title="A.60 mmin" class="md-nav__link">
    A.60 mmin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a61-mmu" title="A.61 mmu" class="md-nav__link">
    A.61 mmu
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a62-msum" title="A.62 msum" class="md-nav__link">
    A.62 msum
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a63-next" title="A.63 next" class="md-nav__link">
    A.63 next
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a64-null" title="A.64 null" class="md-nav__link">
    A.64 null
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a65-or" title="A.65 or" class="md-nav__link">
    A.65 or
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a66-over" title="A.66 over" class="md-nav__link">
    A.66 over
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a67-parse" title="A.67 parse" class="md-nav__link">
    A.67 parse
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a68-peach" title="A.68 peach" class="md-nav__link">
    A.68 peach
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a681-threads" title="A.68.1 Threads" class="md-nav__link">
    A.68.1 Threads
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a682-distributed-peach" title="A.68.2 Distributed peach" class="md-nav__link">
    A.68.2 Distributed peach
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a69-prd" title="A.69 prd" class="md-nav__link">
    A.69 prd
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a70-prds" title="A.70 prds" class="md-nav__link">
    A.70 prds
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a71-prev" title="A.71 prev" class="md-nav__link">
    A.71 prev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a72-prior" title="A.72 prior" class="md-nav__link">
    A.72 prior
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a73-rank" title="A.73 rank" class="md-nav__link">
    A.73 rank
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a74-ratios" title="A.74 ratios" class="md-nav__link">
    A.74 ratios
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a75-raze" title="A.75 raze" class="md-nav__link">
    A.75 raze
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a76-reval" title="A.76 reval" class="md-nav__link">
    A.76 reval
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a77-reverse" title="A.77 reverse" class="md-nav__link">
    A.77 reverse
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a78-rload" title="A.78 rload" class="md-nav__link">
    A.78 rload
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a79-rotate" title="A.79 rotate" class="md-nav__link">
    A.79 rotate
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a80-rsave" title="A.80 rsave" class="md-nav__link">
    A.80 rsave
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a81-rtrim" title="A.81 rtrim" class="md-nav__link">
    A.81 rtrim
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a82-scan" title="A.82 scan" class="md-nav__link">
    A.82 scan
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a83-scov" title="A.83 scov" class="md-nav__link">
    A.83 scov
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a84-sdev" title="A.84 sdev" class="md-nav__link">
    A.84 sdev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a85-setenv" title="A.85 setenv" class="md-nav__link">
    A.85 setenv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a86-sin" title="A.86 sin" class="md-nav__link">
    A.86 sin
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a87-ss" title="A.87 ss" class="md-nav__link">
    A.87 ss
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a88-ssr" title="A.88 ssr" class="md-nav__link">
    A.88 ssr
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a89-string" title="A.89 string" class="md-nav__link">
    A.89 string
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a90-sublist" title="A.90 sublist" class="md-nav__link">
    A.90 sublist
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a91-sum" title="A.91 sum" class="md-nav__link">
    A.91 sum
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a92-sums" title="A.92 sums" class="md-nav__link">
    A.92 sums
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a93-sv" title="A.93 sv" class="md-nav__link">
    A.93 sv
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a94-svar" title="A.94 svar" class="md-nav__link">
    A.94 svar
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a95-system" title="A.95 system" class="md-nav__link">
    A.95 system
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a96-takereshape" title="A.96 take/reshape #" class="md-nav__link">
    A.96 take/reshape #
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a97-tan" title="A.97 tan" class="md-nav__link">
    A.97 tan
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a98-til" title="A.98 til" class="md-nav__link">
    A.98 til
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a99-trim" title="A.99 trim" class="md-nav__link">
    A.99 trim
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a100-ungroup" title="A.100 ungroup" class="md-nav__link">
    A.100 ungroup
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a101-union" title="A.101 union" class="md-nav__link">
    A.101 union
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a102-upper" title="A.102 upper" class="md-nav__link">
    A.102 upper
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a103-value" title="A.103 value" class="md-nav__link">
    A.103 value
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a104-var" title="A.104 var" class="md-nav__link">
    A.104 var
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a105-vs" title="A.105 vs" class="md-nav__link">
    A.105 vs
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a106-wavg" title="A.106 wavg" class="md-nav__link">
    A.106 wavg
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a107-where" title="A.107 where" class="md-nav__link">
    A.107 where
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a108-within" title="A.108 within" class="md-nav__link">
    A.108 within
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a109-wsum" title="A.109 wsum" class="md-nav__link">
    A.109 wsum
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a110-xbar" title="A.110 xbar" class="md-nav__link">
    A.110 xbar
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a111-xprev" title="A.111 xprev" class="md-nav__link">
    A.111 xprev
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="A_Built-in_Functions.1#a112-xrank" title="A.112 xrank" class="md-nav__link">
    A.112 xrank
  </a>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
                  </div>
                </div>
              </div>
            
          
          <div class="md-content">
            <article class="md-content__inner md-typeset">
              
                
                
                <h1 id="a-built-in-functions">A. Built-in Functions<a class="headerlink" href="A_Built-in_Functions.1#a-built-in-functions" title="Permanent link">&para;</a></h1>
<h3 id="a0-overview">A.0 Overview<a class="headerlink" href="A_Built-in_Functions.1#a0-overview" title="Permanent link">&para;</a></h3>
<p>The collection of built-in functions in q is rich and powerful. We include here a user guide for those built-ins that were not covered in the main text. For more details, see the Reference section at <a href="http://code.kx.com/">code.kx.com</a>.</p>
<h3 id="a1-acos">A.1 <code>acos</code><a class="headerlink" href="A_Built-in_Functions.1#a1-acos" title="Permanent link">&para;</a></h3>
<p>The atomic <code>acos</code> is the mathematical inverse of <code>cos</code>. For a float argument between -1 and 1, <code>acos</code> returns the float between 0 and π whose cosine is the argument.</p>
<pre><code class="q">q)acos 1
0f
q)acos 1.414213562373095
0n
q)acos -1
3.141593
q)acos 0
1.570796
</code></pre>

<h3 id="a2-all">A.2 <code>all</code><a class="headerlink" href="A_Built-in_Functions.1#a2-all" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>all</code> is <code>(&amp;/)</code>, which applies <code>&amp;</code> cumulatively across a numeric list and returns the boolean result.</p>
<pre><code class="q">q)all 100100b
0b
q)all 10 20 30
1b
</code></pre>

<h3 id="a3-and">A.3 <code>and</code><a class="headerlink" href="A_Built-in_Functions.1#a3-and" title="Permanent link">&para;</a></h3>
<p>The function <code>and</code> is the same as <code>&amp;</code> for people who like typing extra characters.</p>
<pre><code class="q">q)1b and 0b
0b
q)42 and 43
42
</code></pre>

<h3 id="a4-any">A.4 <code>any</code><a class="headerlink" href="A_Built-in_Functions.1#a4-any" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>any</code> is <code>(|/)</code>, which applies <code>|</code> cumulatively across a numeric list and returns the boolean result.</p>
<pre><code class="q">q)any 100100b
1b
q)any null til 10
0b
</code></pre>

<h3 id="a5-asc">A.5 <code>asc</code><a class="headerlink" href="A_Built-in_Functions.1#a5-asc" title="Permanent link">&para;</a></h3>
<p>The uniform function <code>asc</code> returns its argument list of comparables sorted in ascending order with the <code>`s#</code> attribute applied. When evaluated on a dictionary, it reorders the key-value pairs (on a copy) so that the values are sorted.</p>
<pre><code class="q">q)asc 3 7 2 8 1 9
`s#1 2 3 7 8 9
q)asc `b`c`a!3 2 1
a| 1
c| 2
b| 3
</code></pre>

<h3 id="a6-asin">A.6 <code>asin</code><a class="headerlink" href="A_Built-in_Functions.1#a6-asin" title="Permanent link">&para;</a></h3>
<p>The atomic <code>asin</code> is the mathematical inverse of <code>sin</code>. For a float argument between -1 and 1, <code>asin</code> returns the float between –π/2 and π/2 whose sine is the argument.</p>
<pre><code class="q">q)asin 0
0f
q)asin 1.414213562373095%2
0.7853982
q)asin 1
1.570796
q)asin -1
-1.570796
</code></pre>

<h3 id="a7-atan">A.7 <code>atan</code><a class="headerlink" href="A_Built-in_Functions.1#a7-atan" title="Permanent link">&para;</a></h3>
<p>The atomic <code>atan</code> is the mathematical inverse of <code>tan</code>. For a float argument, <code>atan</code> returns the float between –π/2 and π/2 whose tangent is the argument.</p>
<pre><code class="q">q)atan 0
0f
q)atan 1.414213562373095
0.9553166
q)atan 1
0.7853982
</code></pre>

<h3 id="a8-attr">A.8 <code>attr</code><a class="headerlink" href="A_Built-in_Functions.1#a8-attr" title="Permanent link">&para;</a></h3>
<p>The function <code>attr</code> returns any attribute of its argument as a symbol. No attributes is the empty symbol</p>
<pre><code class="q">q)attr til 5
`
q)attr asc 30 20 40 10
`s
</code></pre>

<h3 id="a9-avg">A.9 <code>avg</code><a class="headerlink" href="A_Built-in_Functions.1#a9-avg" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>avg</code> returns the float average of a numeric list.</p>
<pre><code class="q">q)avg 1+til 1000
500.5
</code></pre>

<p>The function <code>avg</code> is equivalent to</p>
<p><code>{sum[x]%count x}</code></p>
<p>It is possible to apply <code>avg</code> to a nested list provided the sublists conform. In this context, the result conforms to the sublists and the average is calculated recursively on the sublists.</p>
<pre><code class="q">q)avg (1 2;100 200;1000 2000)
367 734f
</code></pre>

<h3 id="a10-avgs">A.10 <code>avgs</code><a class="headerlink" href="A_Built-in_Functions.1#a10-avgs" title="Permanent link">&para;</a></h3>
<p>The uniform <code>avgs</code> is <code>(avg\)</code>, which computes the running averages of a numeric list.</p>
<pre><code class="q">q)avgs 1+til 10
1 1.5 2 2.5 3 3.5 4 4.5 5 5.5
</code></pre>

<h3 id="a11-bin">A.11 <code>bin</code><a class="headerlink" href="A_Built-in_Functions.1#a11-bin" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>bin</code> takes a simple list of items (<em>target</em>) sorted in strictly increasing order as its first parameter. It is atomic in its second parameter (<em>source</em>). Loosely speaking, the result of <code>bin</code> is the position at which <em>source</em> would fall in <em>target</em>, looking from the left. The type of <em>source</em> must <strong>strictly</strong> match the type of <em>target</em>; no type promotion is performed.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>While the items of the first argument <code>bin</code> should be in strictly increasing order for the result to meaningful, this condition is not enforced. The result of <code>bin</code> when the first argument is not strictly increasing is essentially undefined.</p>
</div>
<p>More precisely, the result is -1 if <em>source</em> is less than the first item in <em>target</em>. Otherwise, the result is the index of the last item of <em>target</em> that is less than or equal to <em>source</em>; this is the found index if <em>source</em> is in <em>target</em>. If <em>source</em> is greater than the last item in <em>target</em>, the result is the last index of <em>target</em></p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>For large sorted lists, the binary search performed by <code>bin</code> can be much faster than the linear search performed by <code>?</code>.</p>
</div>
<p>Here are some examples.</p>
<pre><code class="q">q)L:1.0+til 50000000
q)L bin 25000000.
24999999
q)L?25000000.
24999999
q)\t L bin 25000000.
0
q)\t L?25000000.
33
q)L bin 25000000.5
24999999
62
q)L?25000000.5
50000000
q)\t L bin 25000000.5
0
q)\t L?25000000.5
63
q)L bin 50000000.5
49999999
q)L?50000000.5
50000000
</code></pre>

<h3 id="a12-binr">A.12 <code>binr</code><a class="headerlink" href="A_Built-in_Functions.1#a12-binr" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>binr</code> is closely related to <code>bin</code>. Whereas <code>bin</code> looks from the left, <code>binr</code> looks from the right. The result is the index of the first item of the first parameter that is greater than or equal to the second parameter.</p>
<pre><code class="q">q)L:1.0+til 50000000
q)L bin 25000000.5
24999999
q)L binr 25000000.5
25000000
</code></pre>

<h3 id="a13-choose">A.13 choose <code>?</code><a class="headerlink" href="A_Built-in_Functions.1#a13-choose" title="Permanent link">&para;</a></h3>
<p>The dyadic function <em>choose</em> is a form of <code>?</code> that generates pseudo-random results.</p>
<p>In the case where the first parameter is a non-negative long and the second parameter is a non-negative numeric value (<em>bound</em>), <code>?</code> returns a list of pseudo-random numbers <strong>with replacement</strong> between 0 and <em>bound</em>, not including <em>bound</em>.</p>
<pre><code class="q">q)5?10
2 4 5 4 2
q)5?10
7 8 5 6 4
q)10?100.0
10.24432 86.71096 72.78528 16.27662 68.84756 81.77547 75.20102 10.86824 95.98..
q)10?100.0
64.30982 67.08738 67.89082 41.2317 98.77844 38.67353 72.6781 40.46546 83.5506..
</code></pre>

<p>In the case where the first parameter is a negative long and the second parameter is a non-negative long (<em>bound</em>), <code>?</code> returns a list of pseudo-random numbers <strong>without replacement</strong> between 0 and <em>bound</em>, not including <em>bound</em>.</p>
<pre><code class="q">q)-5?10
1 8 5 7 0
q)5?10
2 4 5 4 2
</code></pre>

<div class="admonition note">
<p class="admonition-title">Zen Moment</p>
<p>The expression <code>–n?n</code> returns a random permutation of <code>til n</code>.</p>
</div>
<p>In a case where the second parameter is a list (<em>source</em>) and the first parameter is a long (<em>count</em>), <code>?</code> returns a list of <em>count</em> items randomly drawn from <em>source</em>, with replacement for positive <em>count</em> and without replacement for negative <em>count</em>.</p>
<pre><code class="q">q)5?`a`b`c`d`e`f
`b`c`f`f`b
q)5?`a`b`c`d`e`f
`e`e`a`e`e
q)-5?`a`b`c`d`e`f
`c`a`d`f`e
q)-5?`a`b`c`d`e`f
`f`a`e`d`c
</code></pre>

<p>In a case where the first parameter is a positive long (<em>count</em>) and the second argument is a symbol of the form `<em>n</em> where <em>n</em> is a positive integer no greater than eight, the result is a random list of <em>count</em> symbols, each comprising exactly <em>n</em> characters. The symbols are distinct when <em>count</em> is negative.</p>
<pre><code class="q">q)10?`1
`c`d`o`m`h`m`n`e`m`m
q)-10?`1
`h`p`j`n`e`o`a`k`l`i
q)-10?`3
`emb`agl`mho`ndm`gmj`egi`gek`hcc`mmb`kbh
</code></pre>

<h3 id="a14-conditionally-enumerate">A.14 Conditionally Enumerate <code>?</code><a class="headerlink" href="A_Built-in_Functions.1#a14-conditionally-enumerate" title="Permanent link">&para;</a></h3>
<p><em>Conditional enumerate</em> <code>?</code> has as first parameter the symbolic name of a (presumably unique) list of symbols (<em>target</em>). It is atomic in the second parameter, which is a symbol (<em>source</em>). The result is the enumeration of <em>source</em> over <em>target</em>, where <em>source</em> is appended to <em>target</em> if it is not already contained therein. As a side effect of the function, symbols from <em>source</em> not in <em>target</em> are appended to <em>target</em>.</p>
<pre><code class="q">q)sym:`a`b`c
q)`sym?`a`x`b`y`z
`sym$`a`x`b`y`z
q)sym
`a`b`c`x`y`z
</code></pre>

<h3 id="a15-cor">A.15 <code>cor</code><a class="headerlink" href="A_Built-in_Functions.1#a15-cor" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>cor</code> takes two numeric lists of the same count and returns the mathematical correlation between the items of the two lists as a float.</p>
<pre><code class="q">q)23 -11 35 0 cor 42 21 73 39
0.9070229
</code></pre>

<p>The function <code>cor</code> is equivalent to</p>
<p><code>{cov[x;y]%dev[x]*dev y}</code></p>
<h3 id="a16-count">A.16 <code>count</code><a class="headerlink" href="A_Built-in_Functions.1#a16-count" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>count</code> returns a long representing the number of items in its atom or list parameter. As with any function defined on lists, it also applies to the value list of a dictionary and hence to tables and keyed tables.</p>
<pre><code class="q">q)count 42
1
q)count til 100
100
q)count `a`b`c`d!10 20 30 40
4
q)count ([] c1:10 20 30; c2:1.1 2.2 3.3)
3
q)count ([k:10 20] c:`one`two)
2
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You cannot use <code>count</code> to determine whether an entity is an atom or list since atoms and singletons both have count 1. Instead test the sign of the type.
<pre><code class="language-q">
q)0&gt;signum type 42
1b
q)0&gt;signum type enlist 42
0b
</code></pre></p>
</div>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Do you know why they call it <code>count</code>? Because it loves to count! Nyah, ha, ha, ha, ha. Vun, and two, and tree, and …</p>
</div>
<h3 id="a17-cov">A.17 <code>cov</code><a class="headerlink" href="A_Built-in_Functions.1#a17-cov" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>cov</code> takes two numeric lists of the same length and returns a float equal to the mathematical covariance between the items of the two lists. If both arguments are lists, they must have the same count; atoms return <code>0f</code>.</p>
<pre><code class="q">q)23 -11 35 0 cov 42 21 73 39
411.25
</code></pre>

<p>The function <code>cov</code> is equivalent to,</p>
<p><code>avg[x*y]-avg[x]*avg y}</code></p>
<h3 id="a18-cross">A.18 <code>cross</code><a class="headerlink" href="A_Built-in_Functions.1#a18-cross" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>cross</code> takes atoms or lists as arguments and returns their Cartesian product – that is, the set of all pairs drawn from the two arguments.</p>
<pre><code class="q">q)1 2 cross `a`b`c
1 `a
1 `b
1 `c
2 `a
2 `b
2 `c
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can also apply <code>cross</code> to dictionaries and tables.</p>
</div>
<p>The function <code>cross</code> is equivalent to,</p>
<p><code>{raze x,\:/:y}</code></p>
<h3 id="a19-cut">A.19 <code>cut</code><a class="headerlink" href="A_Built-in_Functions.1#a19-cut" title="Permanent link">&para;</a></h3>
<p>The dyadic function <code>cut</code> can take a list of long (<em>indices</em>) as its first parameter and a list (<em>source</em>) as it right parameter. It returns the list obtained by splitting <em>source</em> at the positions in <em>indices</em>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If the initial item of indices is not 0, the first sublist split out is dropped.</p>
</div>
<pre><code class="q">q)L:10 20 30 40 50 60 70 80 90 100
q)0 2 5 7 cut L
10 20
30 40 50
60 70
80 90 100
q)2 5 7 cut L
30 40 50
60 70
80 90 100
</code></pre>

<p>When the first parameter is a non-negative integral atom (<em>width</em>), <em>source</em> is split at indices that are multiples of <em>width</em>.</p>
<pre><code class="q">q)2 cut L
10 20
30 40
50 60
70 80
90 100
q)3 cut L
10 20 30
40 50 60
70 80 90
,100
</code></pre>

<h3 id="a20-cut-_">A.20 cut <code>_</code><a class="headerlink" href="A_Built-in_Functions.1#a20-cut-_" title="Permanent link">&para;</a></h3>
<p>The dyadic function <code>_</code> has several forms, depending on the types of its parameters. See also <em>drop</em> and <code>cut</code>.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>When <code>_</code> is used infix, surrounding it with whitespace will avoid it getting mixed up with variable names, since <code>_</code> is a valid q name character.</p>
</div>
<p>When the first parameter is an integral atom (<em>count</em>) and the second parameters is a list (<em>source</em>), the result is <em>source</em> with <em>count</em> items dropped from the head <em>if</em> count is positive and from the tail when <em>count</em> is negative.</p>
<pre><code class="q">q)2 _ 10 20 30 40 50 60 70 80 90 100
30 40 50 60 70 80 90 100
q)-2 _ 10 20 30 40 50 60 70 80 90 100
10 20 30 40 50 60 70 80
</code></pre>

<p>When the first parameter of <code>_</code> is a list of long (<em>indices</em>) and the second parameter as a list (<em>source</em>) , it returns the list obtained by splitting <em>source</em> at the positions in <em>indices</em>. This is the same behavior as <code>cut</code> for this signature.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If the initial item of indices is not 0, the first sublist split out is dropped.</p>
</div>
<pre><code class="q">q)L:10 20 30 40 50 60 70 80 90 100
q)0 2 5 7 _ L
10 20
30 40 50
60 70
80 90 100
q)2 5 7 _ L
30 40 50
60 70
80 90 100
</code></pre>

<p>When the second parameter of <code>_</code> is a dictionary (<em>source</em>) and the first parameter is a list of key values whose type matches <em>source</em>, the result is a dictionary obtained by removing the specified key-value pairs from the target. Since tables and keyed tables are dictionaries, <code>_</code> applies to them by extension.</p>
<pre><code class="q">q)`a`c _ `a`b`c!10 20 30
b| 20
q)`c1`c2 _ ([] c1:`a`b; c2:10 20; c3:1.1 2.2)
c3
---
1.1
2.2
q)([] k:`a`c) _ ([k:`a`b`c] v:10 20 30)
k| v
-| --
b| 20
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The first parameter must be a list, so a single value for the first parameter in this form must be enlisted.</p>
</div>
<pre><code class="q">q)(enlist `b) _ `a`b`c!10 20 30
a| 10
c| 30
</code></pre>

<p>When the first parameter of <code>_</code> is a list or a dictionary (<em>source</em>) and the second parameter is an atom representing an index or key, the result is obtained by deleting the specified item from (a copy of) <em>source</em>.</p>
<pre><code class="q">q)101 102 103 104 105 _ 2
101 102 104 105
q)(`a`b`c!10 20 30) _ `b
a| 10
c| 30
q)([] c1:`a`b; c2:10 20; c3:1.1 2.2) _ 1
c1 c2 c3
---------
a 10 1.1
q)([k:101 102 103] c:`one`two`three) _ 102
k | c
---| -----
101| one
103| three
</code></pre>

<h3 id="a21-deltas">A.21 <code>deltas</code><a class="headerlink" href="A_Built-in_Functions.1#a21-deltas" title="Permanent link">&para;</a></h3>
<p>The uniform <code>deltas</code> is <code>(-':)</code>, which returns the difference of each item in a numeric list with its predecessor.</p>
<pre><code class="q">q)deltas 1 2 3 4 5
1 1 1 1 1
q)deltas 96.25 93.25 58.25 73.25 89.50 84.00 84.25
96.25 -3 -35 15 16.25 -5.5 0.25
</code></pre>

<p>If you are looking to bound the absolute difference between successive elements, the second example shows that the initial item of the result will be troublesome. In this case, you can use,</p>
<p><code>deltas0:{first[x] –': x}</code></p>
<p>In our example above,</p>
<pre><code class="q">q)deltas0 96.25 93.25 58.25 73.25 89.50 84.00 84.25
0 -3 -35 15 16.25 -5.5 0.25
</code></pre>

<h3 id="a22-desc">A.22 <code>desc</code><a class="headerlink" href="A_Built-in_Functions.1#a22-desc" title="Permanent link">&para;</a></h3>
<p>The uniform <code>desc</code> returns (a copy of) its argument list of comparables sorted in descending order. When evaluated on a dictionary, it reorders the key-value pairs (on a copy) so that the values are sorted.</p>
<pre><code class="q">q)desc 3 7 2 8 1 9
9 8 7 3 2 1
q)desc `b`c`a!2 3 1
c| 3
b| 2
a| 1
</code></pre>

<h3 id="a23-dev">A.23 <code>dev</code><a class="headerlink" href="A_Built-in_Functions.1#a23-dev" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>dev</code> returns the float standard deviation of a numeric list.</p>
<pre><code class="q">q)dev 1000?100.
29.40271
</code></pre>

<p>The function <code>dev</code> is equivalent to,</p>
<p><code>{sqrt var x}</code></p>
<h3 id="a24-differ">A.24 <code>differ</code><a class="headerlink" href="A_Built-in_Functions.1#a24-differ" title="Permanent link">&para;</a></h3>
<p>The uniform <code>differ</code> is</p>
<p><code>not (~':)</code></p>
<p>It asks if each item in a list is not identical to its predecessor. The item at index 0 in the result is always <code>1b</code>.</p>
<pre><code class="q">q)differ 0 1 1 2 3 2 2 2 4 1 1 3 4 4 4 4 5
11011100110110001b
q)differ &quot;mississippi&quot;
q)differ (1 2; 1 2; 3 4 5)
101b
</code></pre>

<p>One use of <code>differ</code> is to locate runs of repeated items in a list.</p>
<pre><code class="q">q)L:0 1 1 2 3 2 2 2 4 1 1 3 4 4 4 4 5
q)nd|next nd:not differ L
01100111011011110b
</code></pre>

<h3 id="a25-distinct">A.25 <code>distinct</code><a class="headerlink" href="A_Built-in_Functions.1#a25-distinct" title="Permanent link">&para;</a></h3>
<p>The function <code>distinct</code> returns the unique items in its list argument, in order of first occurrence. Note that it does <strong>not</strong> apply the <code>`u#</code> attribute.</p>
<pre><code class="q">q)distinct 1 2 3 2 3 4 6 4 3 5 6
1 2 3 4 6 5
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Following is a test for existence of duplicates.
<code>{count[x]=count distinct x}</code></p>
</div>
<p>Since a table is a list of records, <code>distinct</code> effectively removes duplicate rows. All fields’ records must be identical for them to be considered identical.</p>
<pre><code class="q">q)distinct ([]a:1 2 3 2 1; b:`washington`adams`jefferson`adams`washington)
a b
------------
1 washington
2 adams
3 jefferson
q)distinct ([]a:1 2 3 2 1; b:`washington`adams`jefferson`adams`wasington)
_
</code></pre>

<h3 id="a26-enlist">A.26 <code>enlist</code><a class="headerlink" href="A_Built-in_Functions.1#a26-enlist" title="Permanent link">&para;</a></h3>
<p>The function <code>enlist</code> returns a list whose items comprise its arguments. The most common use is to create a singleton list from a single argument.</p>
<p>Unlike user-defined functions, the number of arguments to <code>enlist</code> is not restricted to eight.</p>
<pre><code class="q">q)enlist 42
,42
q)count enlist 10 20 30
1
q)enlist[1;2;3;4;5;6;7;8;9;10]
1 2 3 4 5 6 7 8 9 10
</code></pre>

<h3 id="a27-eval">A.27 <code>eval</code><a class="headerlink" href="A_Built-in_Functions.1#a27-eval" title="Permanent link">&para;</a></h3>
<p>The monadic <code>eval</code> evaluates a list that is a valid q parse tree; it is the same code used in the q interpreter. Such a list can be produced using <code>parse</code> on a string containing a valid q expression, or by hand – if you know what you're doing. A full discussion of parse trees is beyond the scope of this tutorial.</p>
<pre><code class="q">q)eval parse &quot;a:6*7&quot;
42
q)a
42
q)eval (+;1;(*;6;7))
43
</code></pre>

<h3 id="a28-except">A.28 <code>except</code><a class="headerlink" href="A_Built-in_Functions.1#a28-except" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>except</code> takes a list (or dictionary) as its first parameter (<em>target</em>) and an atom or list of items (or keys) of the same type as <em>target</em> for its second parameter (<em>source</em>) and returns those items in <em>target</em> that are not specified in <em>source</em>. The returned items are in the order of their first occurrence in <em>target</em>.</p>
<pre><code class="q">q)1 2 3 4 3 2 except 2
1 3 4 3
q)string[2015.01.01] except &quot;.&quot;
&quot;20150101&quot;
q)(`a`b`c`d!10 20 30 40) except `a`d!10 40
20 30
q)([] c1:`a`b`c`d; c2:10 20 30 40) except ([] c1:`a`d; c2:10 40)
c1 c2
-----
b 20
c 30
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The result of <code>except</code> is always a list.</p>
</div>
<h3 id="a29-exit">A.29 <code>exit</code><a class="headerlink" href="A_Built-in_Functions.1#a29-exit" title="Permanent link">&para;</a></h3>
<p>The monadic <code>exit</code> takes a long as its parameter (<em>retval</em>) and causes the q process to exit, returning <em>retval</em> to the OS.</p>
<div class="admonition important">
<p class="admonition-title">Important</p>
<p>There is no prompt for confirmation.</p>
</div>
<h3 id="a30-fill">A.30 fill <code>^</code><a class="headerlink" href="A_Built-in_Functions.1#a30-fill" title="Permanent link">&para;</a></h3>
<p>The dyadic <em>fill</em> <code>^</code> takes a list as its second parameter (<em>target</em>) and an atom of the same type as its first parameter (<em>fillval</em>). It returns (a copy of) <em>target</em> with null values filled with <em>fillval</em>.</p>
<pre><code class="q">q)42^1 2 3 0N 5 0N
1 2 3 42 5 42
q)&quot;_&quot;^&quot;Now is the time&quot;
&quot;Now_is_the_time&quot;
q)`NA^`First`Second``Fourth
`First`Second`NA`Fourth
</code></pre>

<p><em>Fill</em> is atomic in the second parameter.</p>
<pre><code class="q">q)42^(1;0N;(100;200 0N))
1
42
(100;200 42)
</code></pre>

<p>Like all functions, <em>fill</em> operates on the values of a dictionary.</p>
<pre><code class="q">q)42^`a`b`c`d!100 0N 200 0
a| 100
b| 42
c| 200
d| 0
q)0^([]c1:1.0 2.0 0n; c2:0N 2 0N)
c1 c2
-----
1 0
2 2
0 0
</code></pre>

<h3 id="a31-find">A.31 find <code>?</code><a class="headerlink" href="A_Built-in_Functions.1#a31-find" title="Permanent link">&para;</a></h3>
<p>The form of dyadic <code>?</code> called <em>find</em> takes a list (<em>target</em>) as its first parameter and an atom of the same type (<em>source</em>) as its second parameter. It returns the index of the first occurrence of <em>source</em> in <em>target</em> or the count of <em>target</em> if it is not found. It is atomic in the second parameter.</p>
<p>The simplest case is when <em>source</em> is an atom.</p>
<pre><code class="q">q)100 99 98 87 96 98?98
2
q)`one`two`three?`four
3
q)&quot;Now is the time&quot;?&quot;the&quot;
7 8 9
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The first example demonstrates that <em>find</em> returns only the index of the first occurrence of source. To find the indices of all occurrences you could use,</p>
</div>
<pre><code class="q">q){where x=y}[100 99 98 87 96 98;98]
2 5
</code></pre>

<p><em>Find</em> also works on general lists, although if you need this you should probably consider redesigning your program.</p>
<pre><code class="q">q)(1 2; 3 4; `a`b)?`a`b
2
q)((0;1 2);3 4;5 6)?5 6
2
</code></pre>

<p><em>Find</em> can also take a dictionary as its first parameter (<em>target</em>) and a dictionary value as its second parameter <code>*value*</code>. It returns the first key that maps to <em>value</em>. It is atomic in the second parameter.</p>
<pre><code class="q">q)(`a`b`c`d!10 20 30 10)?10
`a
q)(`a`b`c`d!10 20 30 10)?10 30
`a`c
</code></pre>

<p>By extension, find applies to tables and keyed tables.</p>
<pre><code class="q">q)([] c1:`a`b`c; c2:10 20 30)?`c1`c2!(`b;20)
1
q)([] c1:`a`b`c; c2:10 20 30)?(`b;20)
1
q)([k:1 2 3] c:100 101 102)?101
k| 2
</code></pre>

<div class="admonition note">
<p class="admonition-title">Zen Moment</p>
<p>Viewing a list or dictionary as a mapping, <em>find</em> is the inverse mapping.</p>
</div>
<h3 id="a32-fills">A.32 <code>fills</code><a class="headerlink" href="A_Built-in_Functions.1#a32-fills" title="Permanent link">&para;</a></h3>
<p>The uniform <code>fills</code> is <code>^\</code>, which fills forward, meaning that non-null items are filled over succeeding null items.</p>
<pre><code class="q">q)fills 1 0N 3 0N 0N 5
1 1 3 3 3 5
q)fills `x``y```z
`x`x`y`y`y`z
q)update fills c2 from ([] `a`b`c`d`e`f; c2:1 0N 3 0N 0N 5)
x c2
----
a 1
b 1
c 3
d 3
e 3
f 5
</code></pre>

<p>If you need to fill initial nulls, use the dyadic form of <code>^\</code>.</p>
<pre><code class="q">q)fills 0N 0N 3 0N 5
0N 0N 3 3 5
q)0 ^\ 0N 0N 3 0N 5
0 0 3 3 5
</code></pre>

<h3 id="a33-flip">A.33 <code>flip</code><a class="headerlink" href="A_Built-in_Functions.1#a33-flip" title="Permanent link">&para;</a></h3>
<p>The monadic function <code>flip</code> transposes a rectangular list, column dictionary or table (<em>source</em>).</p>
<p>When <em>source</em> is a rectangular list, the items are rearranged, effectively reversing the first two indices in indexing. For example,</p>
<pre><code class="q">q)show m:(1 2 3;10 20 30)
1 2 3
10 20 30
q)flip m
1 10
2 20
3 30
</code></pre>

<p>When <code>flip</code> converts a column dictionary to a table and vice versa, no data is actually rearranged. Only column indexing is reversed.</p>
<pre><code class="q">q)dc:`c1`c2!(`a`b`c;10 20 30)
q)t:([] c1:`a`b`c; c2:10 20 30)
q)dc[`c1;2]~t[2;`c1]
</code></pre>

<h3 id="a34-getenv">A.34 <code>getenv</code><a class="headerlink" href="A_Built-in_Functions.1#a34-getenv" title="Permanent link">&para;</a></h3>
<p>The monadic function <code>getenv</code> takes a symbol argument representing the name of an OS environment variable and returns the value <code>if any</code> of that environment variable as a string.</p>
<pre><code class="q">q)getenv `SHELL
&quot;/bin/bash&quot;
</code></pre>

<h3 id="a35-group">A.35 <code>group</code><a class="headerlink" href="A_Built-in_Functions.1#a35-group" title="Permanent link">&para;</a></h3>
<p>The monadic function <code>group</code> takes a list (<em>source</em>) and returns a dictionary in which each distinct item in <em>source</em> is mapped to the indices of its occurrences in <em>source</em>. The keys of the result are in the order of their first appearance in <em>source</em>.</p>
<pre><code class="q">q)group &quot;i miss mississippi&quot;
i| 0 3 8 11 14 17
 | 1 6
m| 2 7
s| 4 5 9 10 12 13
p| 15 16
</code></pre>

<h3 id="a36-gtime">A.36 <code>gtime</code><a class="headerlink" href="A_Built-in_Functions.1#a36-gtime" title="Permanent link">&para;</a></h3>
<p>The atomic <code>gtime</code> converts local time to UTC time.</p>
<pre><code class="q">q).z.P
2015.04.12D12:10:20.685653000
q)gtime .z.P
2015.04.12D22:10:24.861692000
q).z.p
2015.04.12D22:10:28.597654000
</code></pre>

<h3 id="a37-iasc">A.37 <code>iasc</code><a class="headerlink" href="A_Built-in_Functions.1#a37-iasc" title="Permanent link">&para;</a></h3>
<p>The uniform <code>iasc</code> takes a list or a dictionary (<em>source</em>). Considering <em>source</em> as a mapping, the result of <code>iasc</code> is a list of the indices/keys of source in the order that would sort it ascending. Otherwise put, composing <em>source</em> with the result of <code>iasc</code> sorts in ascending order.</p>
<pre><code class="q">q)L:30 70 20 80 10 90
q)iasc L
4 2 0 1 3 5

q)L iasc L
10 20 30 70 80 90

q)d:`c`a`b!30 10 20
q)iasc d
`a`b`c
q)d iasc d
10 20 30
</code></pre>

<p>This is useful when you want to use one list to control the order of others – e.g., manual sort on the serialized columns of a splayed table (see <a href="14_Introduction_to_Kdb+.1#143-partitioned-tables">§14.3</a>).</p>
<div class="admonition note">
<p class="admonition-title">Zen Moment</p>
<p>The composite <code>iasc iasc</code> provides the list of indices that transforms the sorted entity back to the original.</p>
</div>
<h3 id="a38-identity">A.38 identity <code>::</code><a class="headerlink" href="A_Built-in_Functions.1#a38-identity" title="Permanent link">&para;</a></h3>
<p>The monadic function denoted <code>::</code> is the identity function – i.e., it returns its argument.</p>
<pre><code class="q">q)::[42]
42
q)(::) `Zaphod
`Zaphod
</code></pre>

<p>The identity function <strong>cannot</strong> be used naked with juxtaposition or <code>@</code>. You must either enclose it in parentheses or enclose its argument in square brackets.</p>
<h3 id="a39-idesc">A.39 <code>idesc</code><a class="headerlink" href="A_Built-in_Functions.1#a39-idesc" title="Permanent link">&para;</a></h3>
<p>The monadic function <code>idesc</code> takes a list or a dictionary (<em>source</em>). Considering <em>source</em> as a mapping, the result of <code>idesc</code> is a list of the indices/keys of source in the order that would sort it descending. Otherwise put, composing <em>source</em> with the result of <code>idesc</code> sorts in descending order.</p>
<pre><code class="q">q)L:30 70 20 80 10 90
q)idesc L
5 3 1 0 2 4
q)L idesc L
90 80 70 30 20 10
q)d:`c`a`b!30 10 20
q)idesc d
`c`b`a
q)d idesc d
30 20 10
</code></pre>

<p>This is useful when you want to use one list to control the order of others – e.g., manual sort on the serialized columns of a splayed table (see <a href="14_Introduction_to_Kdb+.1#142-splayed-tables">§14.2</a>).</p>
<div class="admonition note">
<p class="admonition-title">Zen Moment</p>
<p>The composite <code>idesc idesc</code> provides the list of indices that transforms the sorted entity back to the original.</p>
</div>
<h3 id="a40-in">A.40 <code>in</code><a class="headerlink" href="A_Built-in_Functions.1#a40-in" title="Permanent link">&para;</a></h3>
<p>The dyadic function <code>in</code> is atomic in its first parameter (<em>source</em>) and takes an atom or list second parameter (<em>target</em>). It returns a boolean indicating whether <em>source</em> appears in <em>target</em>. The comparison is strict with regard to type.</p>
<pre><code class="q">q)42 in 0 6 7 42 98
1b
q)4 in 42
0b
q)&quot;4&quot; in &quot;42&quot;
1b
q)&quot;cat&quot; in &quot;abcdefg&quot;
110b
</code></pre>

<h3 id="a41-inter">A.41 <code>inter</code><a class="headerlink" href="A_Built-in_Functions.1#a41-inter" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>inter</code> returns the items in its first list parameter that occur in its second list parameter.</p>
<pre><code class="q">q)1 2 3 4 inter 3 4 5
3 4
</code></pre>

<p>Lists differ from sets in that they are ordered and allow duplicates, so <code>inter</code> is not commutative in general.</p>
<pre><code class="q">q)1 2 3 1 inter 4 1
1 1
q)4 1 inter 1 2 3 1
,1
q)1 2 3 inter 4 3 2
2 3
q)4 3 2 inter 1 2 3
3 2
</code></pre>

<p>You can use <code>inter</code> to find common records in tables having identical schemas.</p>
<pre><code class="q">q)t1:([] c1:`a`b`c; c2:10 20 30)
q)t2:([] c1:`c`d; c2:30 40)
q)t1 inter t2
c1 c2
-----
c  30
</code></pre>

<h3 id="a42-inv">A.42 <code>inv</code><a class="headerlink" href="A_Built-in_Functions.1#a42-inv" title="Permanent link">&para;</a></h3>
<p>The monadic <code>inv</code> returns the inverse of a float matrix.</p>
<pre><code class="q">q)m:(1.1 2.1 3.1; 2.3 3.4 4.5; 5.6 7.8 9.8)
q)inv m
-8.165138 16.51376 -5
12.20183 -30.18349 10
-5.045872 14.58716 -5
</code></pre>

<p>An integer matrix must be cast to float.</p>
<h3 id="a43-join">A.43 join <code>,</code><a class="headerlink" href="A_Built-in_Functions.1#a43-join" title="Permanent link">&para;</a></h3>
<p>The dyadic join <code>,</code> appends its second parameter to the first. When both operands are either lists or atoms, the result concatenates the second parameter to the first.</p>
<pre><code class="q">q)1,2 3 4
1 2 3 4

q)1 2 3,4
1 2 3 4

q)1 2,3 4
1 2 3 4
</code></pre>

<p>The result is a general list unless all items are of homogeneous type.</p>
<pre><code class="q">q)1 2 3,4.0
1
2
3
4f
</code></pre>

<p>When both parameters are dictionaries, the result is the merge of the second parameter into the first using upsert semantics. Otherwise put, assignments in the second parameter prevail over those in the first.</p>
<pre><code class="q">q)(`a`b`c!10 20 30),`c`d!300 400
a| 10
b| 20
c| 300
d| 400
</code></pre>

<p>By extension, you can use <code>,</code> on tables and keyed tables with identical schemas.</p>
<h3 id="a44-key">A.44 <code>key</code><a class="headerlink" href="A_Built-in_Functions.1#a44-key" title="Permanent link">&para;</a></h3>
<p>The <code>key</code> operator vies for the title of most overloaded q operator. Its eponymous action is to return the key of a dictionary, including the special case of the key table portion of a keyed table. It can be applied by value or name.</p>
<pre><code class="q">q)key `a`b`c!10 20 30
_
q)kt:([k:`a`b`c] v:10 20 30)
q)key kt
_
q)key `kt
_
</code></pre>

<p>A context – i.e. the content of a namespace – is a dictionary, so <code>key</code> applied to the symbolic name will return the names of its constituents. Observe that contexts below the root all have an initial null name.</p>
<pre><code class="q">q)key `.
_
q).jab.a:42
q)key `.jab
_
</code></pre>

<p>To list all contexts, apply <code>key</code> to the null symbol.</p>
<pre><code class="q">q)key `
`q`Q`h`j`o`jab
</code></pre>

<p>Given a <strong>simple</strong> list, <code>key</code> returns the symbolic name of its type.</p>
<pre><code class="q">q)key 10 20 30
`long
q)key &quot;so long&quot;
_
</code></pre>

<p>Given an enumerated entity, <code>key</code> returns the name of its enumeration domain. This applies to foreign key columns, where it returns the name of the target keyed table.</p>
<pre><code class="q">q)sym:`c`b`a
q)key `sym$`a`b`a`c`a
_

q)kt:([k:`a`b`c] v:10 20 30)
q)t:([] k:`kt$`a`b`a`b`a; v: 10 20 30 49 59)
q)key t `k
_
</code></pre>

<p>Given an I/O handle corresponding to a directory, <code>key</code> returns a list of the symbolic names of entities in that directory, including hidden files.</p>
<pre><code class="q">q)\ls q
&quot;README.txt&quot;
&quot;m32&quot;
&quot;q.k&quot;
&quot;q.q&quot;
&quot;s.k&quot;
&quot;sp.q&quot;
&quot;trade.q&quot;

q)key `:q
`.DS_Store`README.txt`m32`q.k`q.q`s.k`sp.q`trade.q
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>An empty directory returns an empty list of type symbol whereas a non-existent directory returns an empty general list.</p>
</div>
<p>This provides a simple test for the existence of a directory.</p>
<pre><code class="q">q)\ls q/jab
ls: q/jab: No such file or directory
'os
q)()~key `:q/jab
1b
q)\mkdir q/jab
q)key `:q/jab
`symbol$()
</code></pre>

<p>Given an I/O handle corresponding to a file, <code>key</code> returns the symbolic file name if the file exists and the general empty list <code>()</code> if it does not. As above, this provides a test for existence of the file.</p>
<pre><code class="q">q)key `:q/trade.q
`:q/trade.q
q)()~key `:q/quote.q
1b
</code></pre>

<p>Last, but not least, <code>key</code> also acts as a synonym of <code>til</code>.</p>
<pre><code class="q">q)key 10
_
</code></pre>

<h3 id="a45-like">A.45 <code>like</code><a class="headerlink" href="A_Built-in_Functions.1#a45-like" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>like</code> performs pattern matching on its first string parameter (<em>source</em>) according to the pattern in its string second parameter (<em>pattern</em>). It returns a boolean result indicating whether <em>pattern</em> is matched. The pattern is expressed as a mix of regular characters and special formatting characters. The special chars are <code>?,</code>*<code>, the pair</code>[<code>and</code>], and a <code>^</code> that is enclosed in square brackets.</p>
<p>The special char <code>?</code> represents an arbitrary single character in the pattern.</p>
<pre><code class="q">q)&quot;fan&quot; like &quot;f?n&quot;
1b
q)&quot;fun&quot; like &quot;f?n&quot;
1b
q)&quot;foP&quot; like &quot;f?p&quot;
0b
</code></pre>

<p>The special char <code>*</code> represents an arbitrary sequence of characters in the pattern.</p>
<p>As of this writing (Sep 2015), only a single occurrence of <code>*</code> is allowed in the pattern, except that a <code>*</code> can occur at both the beginning and end of the pattern.</p>
<pre><code class="q">q)&quot;how&quot; like &quot;h*&quot;
1b

q)&quot;hercules&quot; like &quot;h*&quot;
1b

q)&quot;wealth&quot; like &quot;*h&quot;
1b

q)&quot;flight&quot; like &quot;*h*&quot;
1b

q)&quot;Jones&quot; like &quot;J?ne*&quot;
1b

q)&quot;Joynes&quot; like &quot;J*ne*&quot;
'nyi
</code></pre>

<p>The special character pair <code>[</code> and <code>[</code> encloses a sequence of alternatives for a single character match.</p>
<pre><code class="q">q)&quot;flap&quot; like &quot;fl[ao]p&quot;
1b

q)&quot;flip&quot; like &quot;fl[ao]p&quot;
0b

q)&quot;459-0609&quot; like &quot;[0-9][0-9][0-9]-0[0-9][0-9][0-9]&quot;
1b

q)&quot;459-0609&quot; like &quot;[0-9][0-9][0-9]-1[0-9][0-9][0-9]&quot;
0b
</code></pre>

<p>The special character <code>^</code> is used in conjunction with <code>[</code> and <code>]</code> to indicate that the enclosed sequence of characters is disallowed. For example, to test whether a string ends in a numeric character,</p>
<pre><code class="q">q)&quot;M26d&quot; like &quot;*[^0-9]&quot;
1b

q)&quot;Joe999&quot; like &quot;*[^0-9]&quot;
0b
</code></pre>

<p>Enclose a special char in square brackets to escape it as a normal char.</p>
<pre><code class="q">q)&quot;a_c&quot; like &quot;a[*]&quot;
0b

q)&quot;a*c&quot; like &quot;a[*]c&quot;
1b
</code></pre>

<h3 id="a46-lower">A.46 <code>lower</code><a class="headerlink" href="A_Built-in_Functions.1#a46-lower" title="Permanent link">&para;</a></h3>
<p>The atomic <code>lower</code> takes a char, string or symbol argument and returns the result of converting all alpha text to lower case.</p>
<pre><code class="q">q)lower `A
`a

q)lower &quot;a Bc42De&quot;
&quot;a bc42de&quot;
</code></pre>

<h3 id="a47-lsq">A.47 <code>lsq</code><a class="headerlink" href="A_Built-in_Functions.1#a47-lsq" title="Permanent link">&para;</a></h3>
<p>The dyadic matrix function <code>lsq</code> takes float matrix parameters A and B and returns the matrix X that solves the following matrix equation, where · is matrix multiplication.</p>
<p>A = X·B</p>
<p>For example,</p>
<pre><code class="q">q)A:(1.1 2.2 3.3;4.4 5.5 6.6;7.7 8.8 9.9)
q)B:(1.1 2.1 3.1; 2.3 3.4 4.5; 5.6 7.8 9.8)
q)A lsq B
1.211009 -0.1009174 2.993439e-12
-2.119266 2.926606 -3.996803e-12
-5.449541 5.954128 -1.758593e-11
</code></pre>

<p>Observe that <code>lsq</code> is equivalent to,</p>
<pre><code class="q">q)A mmu inv B
1.211009 -0.1009174 1.77991e-12
-2.119266 2.926606 -5.81224e-12
-5.449541 5.954128 -1.337952e-11
</code></pre>

<p>Integer matrices must be cast to float.</p>
<h3 id="a48-ltime">A.48 <code>ltime</code><a class="headerlink" href="A_Built-in_Functions.1#a48-ltime" title="Permanent link">&para;</a></h3>
<p>The atomic <code>ltime</code> converts UTC time to local time.</p>
<pre><code class="q">q).z.P
2015.04.12D12:12:42.475837000

q)ltime .z.P
2015.04.12D02:12:45.987860000

q).z.p
2015.04.12D22:12:47.859567000
</code></pre>

<h3 id="a49-ltrim">A.49 <code>ltrim</code><a class="headerlink" href="A_Built-in_Functions.1#a49-ltrim" title="Permanent link">&para;</a></h3>
<p>The monadic <code>ltrim</code> takes a string parameter and returns the result of removing leading blanks.</p>
<pre><code class="q">q)ltrim &quot; abc &quot;
&quot;abc &quot; &quot;
q)ltrim &quot; &quot;
&quot;&quot;
</code></pre>

<p>You can also apply <code>ltrim</code> to a non-blank char but it fails for a blank char.</p>
<pre><code class="q">q)ltrim &quot;a&quot;
&quot;a&quot;
q)ltrim &quot; &quot;
k){$[~t&amp;77h&gt;t:@x;.z.s'x;&quot; &quot;=*x;(+/&amp;\&quot; &quot;=x)_x;x]}
'type
_
1b
&quot; &quot;
</code></pre>

<h3 id="a50-mavg">A.50 <code>mavg</code><a class="headerlink" href="A_Built-in_Functions.1#a50-mavg" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>mavg</code> takes first parameter a long (<em>length</em>) and returns the <em>length</em>-wise moving average of its numeric list second parameter (<em>source</em>). At each position in <em>source</em>, it computes the average of the <em>length</em> preceding items, or as many as are available up to <em>length</em>, ignoring internal nulls. It is uniform in its second argument.</p>
<p>In the following example, the first item in the result is the average of itself only; the second result item is the average of the first two source items; all other items reflect the average of the item at the position along with its two predecessors.</p>
<pre><code class="q">q)3 mavg 10 20 30 40 50
10 15 20 30 40f

q)3 mavg 0N 10 20 30 40 50
0n 10 15 20 30 40
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>For length 1, the result is the source converted to float.</p>
</div>
<h3 id="a51-max">A.51 <code>max</code><a class="headerlink" href="A_Built-in_Functions.1#a51-max" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>max</code> is <code>(|/)</code>, which applies <code>|</code> cumulatively across a list of items of underlying numeric type and returns the final result. It is the same as <code>any</code> on a boolean list.</p>
<pre><code class="q">q)max 100100b
1b

q)max 10?2015.01.01
2013.09.09
</code></pre>

<h3 id="a52-maxs">A.52 <code>maxs</code><a class="headerlink" href="A_Built-in_Functions.1#a52-maxs" title="Permanent link">&para;</a></h3>
<p>The uniform <code>maxs</code> is <code>(|\)</code>, which applies <code>|</code> across a list of comparable items and returns the intermediate results.</p>
<pre><code class="q">q)maxs 1 2 5 4 10
1 2 5 5 10

q)maxs &quot;Beeblebrox&quot;
&quot;Beeelllrrx&quot;
</code></pre>

<h3 id="a53-mcount">A.53 <code>mcount</code><a class="headerlink" href="A_Built-in_Functions.1#a53-mcount" title="Permanent link">&para;</a></h3>
<p>The uniform dyadic <code>mcount</code> takes as first parameter a long (<em>length</em>) and returns a long equal to the <em>length</em>-wise moving count of its list second parameter (<em>source</em>). At each position in <em>source</em>, it counts the number of non-null preceding items up to <em>length</em>. This function is useful in computing other moving quantities, such as moving average, since it correctly reports the number of predecessors at the head of the list and also ignores internal nulls.</p>
<pre><code class="q">q)3 mcount 10 20 30 40 50
1 2 3 3 3i

q)3 mcount 10 20 0N 40 50 60 0N
1 2 2 2 2 3 2i
</code></pre>

<h3 id="a54-md5">A.54 <code>md5</code><a class="headerlink" href="A_Built-in_Functions.1#a54-md5" title="Permanent link">&para;</a></h3>
<p>The monadic function <code>md5</code> computes the MD5 (Message Digest Algorithm 5) hash of a string as a list of 16 bytes.</p>
<pre><code class="q">q)md5 &quot;Life the Universe and Everything&quot;
0x0e9a5631e4db880d43808504d05348df
</code></pre>

<h3 id="a55-mdev">A.55 <code>mdev</code><a class="headerlink" href="A_Built-in_Functions.1#a55-mdev" title="Permanent link">&para;</a></h3>
<p>The uniform dyadic <code>mdev</code> takes first parameter a long (<em>length</em>) and returns the <em>length</em>-wise moving standard deviation of its numeric list second parameter (<em>source</em>). At each position in <em>source</em>, it computes the standard deviation of the <em>length</em> preceding items, or as many as are available at that position up to <em>length</em>. It excludes internal nulls from the calculation.</p>
<pre><code class="q">q)3 mdev 10 20 30 40 50
0 5 8.164966 8.164966 8.164966

q)3 mdev 10 20 30 0N 50
0 5 8.164966 5 10
</code></pre>

<h3 id="a56-med">A.56 <code>med</code><a class="headerlink" href="A_Built-in_Functions.1#a56-med" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>med</code> returns the float median of a numeric list.</p>
<p>For lists and dictionaries, the result is a float.</p>
<pre><code class="q">q)med 1000?1000.
499.1908
</code></pre>

<p>The function <code>med</code> is equivalent to,</p>
<p><code>{avg x (iasc x)@floor .5*-1 0+count x,:()}</code></p>
<h3 id="a57-min">A.57 <code>min</code><a class="headerlink" href="A_Built-in_Functions.1#a57-min" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>min</code> is <code>(&amp;/)</code>, which applies <code>&amp;</code> cumulatively across a list of underlying numeric type and returns the final result. It is the same as <code>and</code> for a boolean list.</p>
<pre><code class="q">q)min 100?100
2

q)min 100100b
0b
</code></pre>

<h3 id="a58-mins">A.58 <code>mins</code><a class="headerlink" href="A_Built-in_Functions.1#a58-mins" title="Permanent link">&para;</a></h3>
<p>The uniform <code>mins</code> is <code>(&amp;\)</code>, which computes the cumulative minimums of a list of comparables and returns the intermediate results.</p>
<pre><code class="q">q)mins 10 4 5 1 2
10 4 4 1 1

q)mins &quot;the cat&quot;
&quot;theecaa&quot;
</code></pre>

<h3 id="a59-mmax">A.59 <code>mmax</code><a class="headerlink" href="A_Built-in_Functions.1#a59-mmax" title="Permanent link">&para;</a></h3>
<p>The uniform dyadic <code>mmax</code> takes as first parameter a long (<em>length</em>) and returns the <em>length</em>-wise moving maximum of its second parameter list of comparables (<em>source</em>). At each position in <em>source</em>, it computes the maximum of the <em>length</em> preceding items, or as many as are available at that position up to <em>length</em>.</p>
<p>In the following example, the first item in the result is the <code>max</code> of itself only; the second result item is the <code>max</code> of the first two source items; all other items reflect the <code>max</code> of the item at the position along with its two predecessors.</p>
<pre><code class="q">q)3 mmax 20 10 30 50 40
20 20 30 50 50

q)3 mmax 20 10 30 0N 40
20 20 30 30 40
</code></pre>

<h3 id="a60-mmin">A.60 <code>mmin</code><a class="headerlink" href="A_Built-in_Functions.1#a60-mmin" title="Permanent link">&para;</a></h3>
<p>The uniform dyadic <code>mmin</code> takes first parameter a long (<em>length</em>) and returns the <em>length</em>-wise moving minimum of its second parameter list of comparables (<em>source</em>). At each position in <em>source</em>, it computes the minimum of the <em>length</em> preceding items, or as many as are available at that position up to <em>length</em>.</p>
<p>In the following example, the first item in the result is the <code>min</code> of itself only; the second result item is the <code>min</code> of the first two source items; all other items reflect the <code>min</code> of the item at the position along with its two predecessors.</p>
<pre><code class="q">q)3 mmin 20 10 30 50 40
20 10 10 10 30
</code></pre>

<p>For <em>length</em> less than or equal to 0 the result is <em>source</em>.</p>
<h3 id="a61-mmu">A.61 <code>mmu</code><a class="headerlink" href="A_Built-in_Functions.1#a61-mmu" title="Permanent link">&para;</a></h3>
<p>The dyadic matrix multiplication <code>mmu</code> returns the matrix product of its two float vector or matrix parameters, which must be of the correct shape. It reduces to dot product on vectors. Integer matrices must be cast to float.</p>
<pre><code class="q">q)m1:(1.1 2.2 3.3;4.4 5.5 6.6;7.7 8.8 9.9)
q)m1 mmu flip m1
16.94 38.72 60.5
38.72 93.17 147.62
60.5 147.62 234.74

q)m2:`float$(0 0 1; 0 1 0; 1 0 0)
q)m2 mmu m2
1 0 0
0 1 0
0 0 1

q)1 2 3f mmu 1 2 3f
14f
</code></pre>

<p>The <code>$</code> operator is overloaded to yield matrix multiplication when its parameters are float vectors or matrices.</p>
<pre><code class="q">q)m2 $ m2
1 0 0
0 1 0
0 0 1
</code></pre>

<h3 id="a62-msum">A.62 <code>msum</code><a class="headerlink" href="A_Built-in_Functions.1#a62-msum" title="Permanent link">&para;</a></h3>
<p>The uniform dyadic <code>msum</code> takes first parameter a long (<em>length</em>) and returns the <em>length</em>-wise moving sum of its numeric list second parameter (<em>source</em>). At each position in <em>source</em>, it computes the sum of the <em>length</em> preceding items, or as many as are available at that position up to <em>length</em>. It excludes internal nulls from the sum.</p>
<p>In the following example, the first item in the result is the sum of itself only; the second result item is the sum of the first two source items; all other items reflect the sum of the item at the position along with its two predecessors.</p>
<pre><code class="q">q)3 msum 10 20 30 40 50
10 30 60 90 120
</code></pre>

<h3 id="a63-next">A.63 <code>next</code><a class="headerlink" href="A_Built-in_Functions.1#a63-next" title="Permanent link">&para;</a></h3>
<p>The uniform <code>next</code> returns its list parameter shifted one position to the left with a null (or empty) in the last item. Otherwise put, each item in the original is replaced with its successor.</p>
<pre><code class="q">q)next 1 2 3 4 5
2 3 4 5 0N

q)next (1 2; 3 4 5; 6 7)
3 4 5
6 7
`long$()
</code></pre>

<h3 id="a64-null">A.64 <code>null</code><a class="headerlink" href="A_Built-in_Functions.1#a64-null" title="Permanent link">&para;</a></h3>
<p>The atomic function <code>null</code> tests its argument for null value. It is preferred to testing for equality as it works for all types.</p>
<pre><code class="q">q)null 42
0b

q)null 0n
1b

q)null &quot;Now is the time&quot;
000100100010000b
</code></pre>

<p>A common idiom combines <code>where</code> with <code>null</code> to obtain the positions of the null items in a list.</p>
<pre><code class="q">q)where null 1 2 3 0N 5 0N
3 5
</code></pre>

<p>Because <code>null</code> is atomic, it picks out null values in all fields.</p>
<pre><code class="q">q)null ([] c1:`a``b; c2:0N 20 30)
c1 c2
-----
0 1
1 0
0 0
</code></pre>

<p>This can be used to identify null columns.</p>
<pre><code class="q">q)where all null ([] c1:`a`b`c; c2:0n 0n 0n; c3:10 0N 30)
,`c2
</code></pre>

<h3 id="a65-or">A.65 <code>or</code><a class="headerlink" href="A_Built-in_Functions.1#a65-or" title="Permanent link">&para;</a></h3>
<p>The function <code>or</code> is the same as <code>|</code> for people who like typing extra characters.</p>
<pre><code class="q">q)1b or 0b
1b

q)42 or 43
43
</code></pre>

<h3 id="a66-over">A.66 <code>over</code><a class="headerlink" href="A_Built-in_Functions.1#a66-over" title="Permanent link">&para;</a></h3>
<p>The function <code>over</code> is a convenience function that renames the monadic form of <code>/</code> for those allergic to k.</p>
<pre><code class="q">q){x+2*y} over 2 3 5 7
32

q)(+) over 2 3 5 7
17
</code></pre>

<h3 id="a67-parse">A.67 <code>parse</code><a class="headerlink" href="A_Built-in_Functions.1#a67-parse" title="Permanent link">&para;</a></h3>
<p>The monadic <code>parse</code> returns the q parse tree for a string representing a q expression. Applying <code>eval</code> to the result of <code>parse</code> effectively evaluates the expression. The composition of <code>eval</code> after <code>parse</code> is essentially the q interpreter. A discussion of q parse trees is beyond the scope of this tutorial.</p>
<pre><code class="q">q)parse &quot;7*4+2&quot;
*
7
(+;4;2)
q)eval parse &quot;7*4+2&quot;
42
</code></pre>

<p>It is useful to apply <code>parse</code> to a string containing a query template for the purpose of expressing the query in functional form. The result will often include k code but it is usually recognizable and you can use it in functional form.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The constraint portion of the resulting parse tree will contain an extra level of nesting displayed in the k form <code>,,</code>.</p>
</div>
<p>You must remove one level for the functional form.</p>
<pre><code class="q">q)t:([]c1:`a`b`c; c2:10 20 30)
q)parse &quot;select c2:2*c2 from t where c1=`c&quot;
?
`t
,,(=;`c1;,`c)
0b
(,`c2)!,(*;2;`c2)
q)?[`t; enlist (=;`c1;enlist `c); 0b; (enlist `c2)!enlist (*;2;`c2)]
c2
--
60
</code></pre>

<h3 id="a68-peach">A.68 <code>peach</code><a class="headerlink" href="A_Built-in_Functions.1#a68-peach" title="Permanent link">&para;</a></h3>
<p>A full discussion of how q handles concurrency and distributed processing is beyond the scope of this text. We provide a description of the essential features in q3.2 as of this writing (Sep 2015) and refer the reader to the <a href="http://code.kx.com/q?ref/peach">Kx site</a> for up-to-date details.</p>
<p>Concurrency in q uses two basic constructs: <code>peach</code> and slaves. Slaves can be either threads spawned by the main q process or independent q processes. How many and which type of slaves are declared to the q process at startup. The function <code>peach</code> is a “parallel” version of <code>each</code> that applies a function over a list by distributing the items of the list across slaves. This is q’s implementation of the “map” portion of the distributed map-reduce paradigm, which is much-ballyhooed in other environments.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If q is not started with slaves, <code>peach</code> reverts to <code>each</code>, meaning function application across the list occurs sequentially in the main q thread.</p>
</div>
<p>Use the command line parameter <code>-s</code> to start a slave-enabled q session. In classic Arthurian fashion, the interpretation of <code>–s</code> depends on the sign of the integer that follows it. A <strong>positive</strong> integer <em>n</em> indicates that the q process should start with <em>n</em> slave <strong>threads</strong> to be used by <code>peach</code>. A <strong>negative</strong> integer –<em>n</em> means that you will provide <em>n</em> independent slave q <strong>processes</strong> for <code>peach</code> to use. The physical implementation of work distribution is different in these two cases, but the logical result is the same.</p>
<h4 id="a681-threads">A.68.1 Threads<a class="headerlink" href="A_Built-in_Functions.1#a681-threads" title="Permanent link">&para;</a></h4>
<p>When q is started with <code>-s <em>n</em></code>, the q process automatically spawns <em>n</em> slave threads in addition to the main thread at startup. When you subsequently use <code>peach</code> to apply a function – i.e., map it – across a list, the application is automatically distributed across the slave threads for you. The result of the application is the same as if you had used <code>each</code> but if q is running on a machine with multiple cores, you should expect a speedup, depending on what the function does, how slave threads are allocated to cores and the load on your machine. For example, on the author’s laptop that has 4 cores and hyperthreading, we find that the benefit of multiple slaves for evaluating a compute-intensive calculation on a list of 8 items plateaus at 4 slaves.</p>
<pre><code class="bash">$ rlwrap q/m32/q -s 2
</code></pre>

<pre><code class="q">q)\t {sum exp x?1.0} each 8#1000000
134
q)\t {sum exp x?1.0} peach 8#1000000
72
</code></pre>

<pre><code class="bash">$ rlwrap q/m32/q -s 4
</code></pre>

<pre><code class="q">q)\t {sum exp x?1.0} each 8#1000000
136
q)\t {sum exp x?1.0} peach 8#1000000
46
</code></pre>

<pre><code class="bash">$ rlwrap q/m32/q -s 8
</code></pre>

<pre><code class="q">q)\t {sum exp x?1.0} each 8#1000000
135
q)\t {sum exp x?1.0} peach 8#1000000
43
</code></pre>

<p>In order to maintain consistency during concurrent application, the following restriction is placed on function evaluation within slave threads. Code executed in a slave thread <strong>cannot</strong> update global variables – i.e., a function can only update local variables.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you use a timer on the main thread or other tricks to update globals that are read by slave threads, you are cruising for a bruising. While these updates are locked, there is no notion of a transaction with attendant rollback. It is unlikely that your function executing on the timer is atomic at the hardware level. Should it fail mid-flight, you should expect the workspace would be in an inconsistent state with no built-in recovery mechanism.</p>
</div>
<p>Now we describe how the slave thread execution is implemented. The items in the list are pre-assigned to slaves in a round-robin fashion. For example, if you <code>peach</code> a function on a list with 9 items in a session with 4 slaves: items 0, 4 and 8 will be executed sequentially on slave 0; items 1, 5 and 9 will be executed sequentially on slave 1; items 2 and 6 will be executed sequentially on slave 2; and items 3 and 7 will be executed sequentially on slave 3. The sequential execution within slaves occurs concurrently across slaves.</p>
<p>The slaves use thread-local heaps and the (partial) results of application within each slave are serialized and copied to the main thread where they are deserialized and assembled into the final result. Since there is overhead associated with serialization/deserialization, we have:</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>A function applied with <code>peach</code> should do enough computation to outweigh the serialization overhead. You can estimate the serialization time and space of a q entity with
<code>\ts:100 -9!-8!entity</code></p>
</div>
<p>We collect here observations on execution within a slave. See the <a href="http://code.kx.com/q/ref/peach">Kx site</a> for more details.</p>
<ol>
<li>
<p>If the list has a <strong>single</strong> item, <code>peach</code> application occurs in the <strong>main</strong> q thread only.</p>
</li>
<li>
<p>If the function applied with <code>peach</code> performs grouping on a symbol list – e.g., a select that groups on a ticker symbol – this will be significantly slower in the slave because the optimized algorithm used in the main thread is not available in the slave.</p>
</li>
<li>
<p>In q3.*, a socket can be used from the main thread only. As there is no locking around a socket descriptor, a communication handle shared between threads would result in garbage due to message interleaving.</p>
</li>
<li>
<p>Each slave thread has its own heap, a minimum of 64MB. Executing <code>.Q.gc[]</code> in the main thread triggers garbage collection in the slave threads too. Automatic garbage collection within each thread is only executed for that particular thread, not across all threads.</p>
</li>
<li>
<p>Symbols are internalized in a single memory area accessible to all threads.</p>
</li>
</ol>
<h4 id="a682-distributed-peach">A.68.2 Distributed <code>peach</code><a class="headerlink" href="A_Built-in_Functions.1#a682-distributed-peach" title="Permanent link">&para;</a></h4>
<p>Starting q with <code>–s –<em>n</em></code> indicates:</p>
<ol>
<li>
<p>In addition to the main q process, you will instantiate <em>n</em> workers, where a worker is an independent q process with an open port</p>
</li>
<li>
<p>You will connect the master q process to each worker</p>
</li>
<li>
<p>You will provide the master process a unique’d list of open handles to the workers</p>
</li>
</ol>
<p>The list of handles to the workers is obtained from the system variable <code>.z.pd</code> upon each invocation of <code>peach</code>. You can set <code>.z.pd</code> either to an integer list of open handles with the <code>`u#</code> attribute applied, or a function that returns the same.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You must apply the <code>`u#</code> attribute or you will get the error:
<code>q
'.z.pd - expected unique vector of int handles</code></p>
</div>
<p>In contrast to the situation with slave threads, where the threads are created for you automatically, with distributed <code>peach</code> it is your responsibility to instantiate the separate worker processes and make them available to the main q process. In production environments this may entail meeting security requirements – e.g., Kerberos. You can start the workers externally to your main process or you can start them from within the process using <code>system</code>.</p>
<p>The workers can be on the same machine as the master process or on any machine on a network so long as it is accessible from the master process. Since they are independent q processes that share no data with the main process, the distributed function is not restricted as to what it can do on the worker. This provides a very flexible framework for distributed computing.</p>
<p>Once you have started the worker processes, you must open a connection to each one, keeping track of the open handles.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You cannot use these handles for other messaging, as <code>peach</code> will close any handle that presents a message not in its expected format.</p>
</div>
<p>You can assign the unique’d list of the open connections to <code>.z.pd</code> or you can return such a list from a function that you assign to <code>.z.pd</code>. In contrast to the slave thread implementation, where the assignment to slaves is determined in advance, individual computations are automatically distributed to workers that become free. Thus we get a simple form of dynamic load balancing.</p>
<p>Following is an example that starts four external workers on the same machine from within the master process, wires the workers directly into <code>.z.pd</code> and then uses <code>peach</code> to distribute work to them.</p>
<pre><code class="bash">~$q -s -4
..
</code></pre>

<pre><code class="q">q){system &quot;q -q -p &quot;,string[x],&quot; &amp;&quot;} each 20000+til 4
q).z.pd:`u#hopen each `$&quot;::&quot;,/:string 20000+til 4
q)\t {sum exp x?1.0} each 8#1000000
134
q)\t {sum exp x?1.0} peach 8#1000000
46
</code></pre>

<p>You can also assign to <code>.z.pd</code> a function that manages the connections. The code below monitors closing connections via <code>.z.pc</code>, which removes the handle of any closed connection from its self-maintained list of active handles. The function assigned to <code>.z.pd</code> checks to see if all expected handles are open and, if not, closes any open handles and then reopens all the specified handles.</p>
<pre><code class="q">q)handles:`u#`int$()
q).z.pd:{
 if[0&gt;=n:neg system &quot;s&quot;;
 '&quot;must start q with -s -n&quot;];
 if[n&lt;&gt;count handles; hclose each handles;
 `handles set `u#hopen each 20000+til n];
 handles}
q).z.pc:{`handles set `u#handles except x;}
</code></pre>

<h3 id="a69-prd">A.69 <code>prd</code><a class="headerlink" href="A_Built-in_Functions.1#a69-prd" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>prd</code> is <code>(*/)</code>, which applies <code>*</code> cumulatively across a numeric list and returns the final result.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Note the missing ‘o’ in the name.</p>
</div>
<pre><code class="q">q)prd 1+til 5

q)prd 1+til 5
120

q)prd 10?100.
2.667807e+13
</code></pre>

<p>It is possible to apply <code>prd</code> to a nested list provided the sublists conform. In this case, the result conforms to the sublists and the product is calculated recursively on the sublists.</p>
<pre><code class="q">q)prd (1 2; 100 200; 1000 2000)
100000 800000
</code></pre>

<h3 id="a70-prds">A.70 <code>prds</code><a class="headerlink" href="A_Built-in_Functions.1#a70-prds" title="Permanent link">&para;</a></h3>
<p>The uniform <code>prds</code> is <code>(*\)</code>, which applies <code>*</code> cumulatively across a list of numeric type and returns the intermediate results.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Note the missing ‘o’ in the name.</p>
</div>
<pre><code class="q">q)prds 1+til 5
1 2 6 24 120
</code></pre>

<h3 id="a71-prev">A.71 <code>prev</code><a class="headerlink" href="A_Built-in_Functions.1#a71-prev" title="Permanent link">&para;</a></h3>
<p>The uniform <code>prev</code> returns a list argument shifted one position to the right with a null (or empty) in the first item. Otherwise put, each item in the original is replaced with its predecessor.</p>
<pre><code class="q">q)prev 1 2 3 4 5
0N 1 2 3 4

q)prev (1 2; 3 4 5; 6 7)
`long$()
1 2
3 4 5
</code></pre>

<h3 id="a72-prior">A.72 <code>prior</code><a class="headerlink" href="A_Built-in_Functions.1#a72-prior" title="Permanent link">&para;</a></h3>
<p>The function <code>prior</code> is a convenience function that renames the monadic form of <code>':</code> for those allergic to k.</p>
<pre><code class="q">q)(-) prior 10 11 12 13 14
10 1 1 1 1
</code></pre>

<h3 id="a73-rank">A.73 <code>rank</code><a class="headerlink" href="A_Built-in_Functions.1#a73-rank" title="Permanent link">&para;</a></h3>
<p>The uniform <code>rank</code> returns the sort order of each item in a list of comparables.</p>
<pre><code class="q">q)rank 50 20 30 10 40
4 1 2 0 3

q)rank `x`a`b`z`c
3 0 1 4 2
</code></pre>

<h3 id="a74-ratios">A.74 <code>ratios</code><a class="headerlink" href="A_Built-in_Functions.1#a74-ratios" title="Permanent link">&para;</a></h3>
<p>The uniform <code>ratios</code> is <code>(%':)</code>, which applies <code>%</code> across a list of numeric type and returns the intermediate results. That is, it returns the ratio of each item with its predecessor. The initial item in the result is 1.0.</p>
<pre><code class="q">q)ratios 10 20 30 40 50
10 2 1.5 1.333333 1.25
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If you are looking to bound the relative difference between successive elements, this example shows that the initial item of the result will be troublesome.</p>
</div>
<p>In this case, you can use,</p>
<p><code>ratios1:{first[x] %': x}</code></p>
<p>For our example above,</p>
<pre><code class="q">q)ratios1 10 20 30 40 50
1 2 1.5 1.333333 1.25
</code></pre>

<h3 id="a75-raze">A.75 <code>raze</code><a class="headerlink" href="A_Built-in_Functions.1#a75-raze" title="Permanent link">&para;</a></h3>
<p>The monadic <code>raze</code> is <code>(,/)</code>. It effectively eliminates the top-most level of nesting from a list by concatenating across it.</p>
<pre><code class="q">q)raze (1 2 3;3; 4 5)
1 2 3 3 4 5
</code></pre>

<p>Observe that <code>raze</code> only removes the top-most level of nesting but you can use <code>each</code> to reach deeper levels.</p>
<pre><code class="q">q)raze ((1 2;3 4);(5;(6 7;8 9)))
1 2
3 4
5
(6 7;8 9)
q)raze each ((1 2;3 4);(5;(6 7;8 9)))
1 2 3 4
(5;6 7;8 9)a
</code></pre>

<h3 id="a76-reval">A.76 <code>reval</code><a class="headerlink" href="A_Built-in_Functions.1#a76-reval" title="Permanent link">&para;</a></h3>
<p>Introduced in q3.3, <code>reval</code> is a version of <code>eval</code> that behaves as if the command line option <code>-b</code> had been set. This means that all updates on the server are blocked for the duration of the evaluation. See <a href="A_Built-in_Functions.1#a27-eval">§A.27</a> and <a href="13_Commands_and_System_Variables.1#1321-block-database-modification-b">§13.2.1</a>.</p>
<h3 id="a77-reverse">A.77 <code>reverse</code><a class="headerlink" href="A_Built-in_Functions.1#a77-reverse" title="Permanent link">&para;</a></h3>
<p>The uniform function <code>reverse</code> inverts the item order of its list argument.</p>
<pre><code class="q">q)reverse 1 2 3 4 5
5 4 3 2 1

q)reverse `a`b`c!10 20 30
c| 30
b| 20
a| 10

q)reverse ([] c1:`a`b`c; c2:10 20 30)
c1 c2
-----
c 30
b 20
a 10

q)reverse ([k:`a`b`c] v:10 20 30)
k| v
-| --
c| 30
b| 20
a| 10
</code></pre>

<p>For nested entities, the reversal takes place only at the topmost level but you can use <code>each</code> to reach lower levels.</p>
<pre><code class="q">q)reverse (1 2 3;&quot;abc&quot;;`Four`Score`and`Seven)
`Four`Score`and`Seven
&quot;abc&quot;
1 2 3

q)reverse each (1 2 3;&quot;abc&quot;;`Four`Score`and`Seven)
3 2 1
&quot;cba&quot;
`Seven`and`Score`Four
</code></pre>

<h3 id="a78-rload">A.78 <code>rload</code><a class="headerlink" href="A_Built-in_Functions.1#a78-rload" title="Permanent link">&para;</a></h3>
<p>The function <code>rload</code> is a convenience function that loads a splayed table into a variable with the same name as the splayed directory. The usual way to do this is with <code>get</code>, whose result can be assigned to an arbitrary variable.</p>
<pre><code class="q">q)`:db/t/ set ([] c1:10 20 30; c2:1.2 2.2 3.3)
`:db/t/
q)rload `:db/t
`t
q)count t
3

q)t1:get `:db/t
q)count t1
3
</code></pre>

<h3 id="a79-rotate">A.79 <code>rotate</code><a class="headerlink" href="A_Built-in_Functions.1#a79-rotate" title="Permanent link">&para;</a></h3>
<p>The uniform dyadic <code>rotate</code> takes as its first parameter a long (<em>length</em>) and returns the result of rotating its second parameter by <em>length</em> positions. The rotation is to the left for positive <em>length</em> and to the right for negative <em>length</em>. For <em>length</em> 0, it returns the source.</p>
<pre><code class="q">q)2 rotate 1 2 3 4 5
3 4 5 1 2

q)22 rotate 1 2 3 4 5
3 4 5 1 2
</code></pre>

<h3 id="a80-rsave">A.80 <code>rsave</code><a class="headerlink" href="A_Built-in_Functions.1#a80-rsave" title="Permanent link">&para;</a></h3>
<p>The function <code>rsave</code> is a convenience function that splays a table variable to a directory with the same name. The preferred way to do this is with <code>set</code>, which allows the directory name to be specified.</p>
<pre><code class="q">q)t:([] c1:10 20 30; c2:1.2 2.2 3.3)
q)rsave `:db/t
`:db/t/
q)`:db/t1/ set t
`:db/t1/
</code></pre>

<h3 id="a81-rtrim">A.81 <code>rtrim</code><a class="headerlink" href="A_Built-in_Functions.1#a81-rtrim" title="Permanent link">&para;</a></h3>
<p>The monadic <code>rtrim</code> takes a string argument and returns the result of removing trailing blanks.</p>
<pre><code class="q">q)rtrim &quot; abc &quot;
&quot; abc&quot;
q)rtrim &quot; &quot;
&quot;&quot;
</code></pre>

<p>You can apply <code>rtrim</code> to a non-blank char but it fails for a blank char.</p>
<pre><code class="q">q)rtrim &quot;a&quot;
&quot;a&quot;
q)rtrim &quot; &quot;
k){$[~t&amp;77h&gt;t:@x;.z.s'x;&quot; &quot;=*x;(+/&amp;\&quot; &quot;=x)_x;x]}
'type
_
1b
&quot; &quot;
</code></pre>

<h3 id="a82-scan">A.82 <code>scan</code><a class="headerlink" href="A_Built-in_Functions.1#a82-scan" title="Permanent link">&para;</a></h3>
<p>The function <code>scan</code> is a convenience function that renames the monadic form of <code>\</code> for those allergic to k.</p>
<pre><code class="q">q){x+2*y} scan 2 3 5 7
2 8 18 32
q)(+) scan 2 3 5 7
2 5 10 17
</code></pre>

<h3 id="a83-scov">A.83 <code>scov</code><a class="headerlink" href="A_Built-in_Functions.1#a83-scov" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>scov</code> returns the statistical covariance of its numeric list arguments of the same length.</p>
<pre><code class="q">q)2 3 5 7 scov 4 3 0 2
-2.416667
</code></pre>

<p>It is equivalent to,</p>
<p><code>{cov[x;y]*count[x]%-1+count x}</code></p>
<h3 id="a84-sdev">A.84 <code>sdev</code><a class="headerlink" href="A_Built-in_Functions.1#a84-sdev" title="Permanent link">&para;</a></h3>
<p>The monadic <code>sdev</code> returns the statistical standard deviation of its numeric list argument.</p>
<pre><code class="q">q)sdev 10 343 232 55
155.1322
</code></pre>

<p>It is equivalent to,</p>
<p><code>{sqrt var[x]*count[x]%-1+count x}</code></p>
<h3 id="a85-setenv">A.85 <code>setenv</code><a class="headerlink" href="A_Built-in_Functions.1#a85-setenv" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>setenv</code> takes as first parameter a symbol representing the name of an OS environment variable and a string second parameter. It calls the underlying OS to set the named environment variable to the specified string value.</p>
<pre><code class="q">q) `FOO setenv &quot;test&quot;
q)getenv `FOO
_
</code></pre>

<h3 id="a86-sin">A.86 <code>sin</code><a class="headerlink" href="A_Built-in_Functions.1#a86-sin" title="Permanent link">&para;</a></h3>
<p>The atomic <code>sin</code> takes a float and returns its mathematical sine.</p>
<pre><code class="q">q)sin 0f
0f

q)pi:3.141592653589793
q)sin pi
1.224647e-16

q)pi%2
1.570796

q)sin pi%4
0.7071068
</code></pre>

<h3 id="a87-ss">A.87 <code>ss</code><a class="headerlink" href="A_Built-in_Functions.1#a87-ss" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>ss</code>, for "string search", performs similar pattern matching as <code>like</code> against its first string parameter (<em>source</em>), looking for matches to its string second parameter (<em>pattern)</em>. However, the result of <code>ss</code> is a list containing the position(s) of the matches of the pattern in <em>source</em>.</p>
<pre><code class="q">q)ss[&quot;Now is the time for all good men to come to&quot;;&quot;me&quot;]
13 29 38

q)&quot;fun&quot; ss &quot;f?n&quot;
,0
</code></pre>

<p>If no matches are found, an empty list of long is returned.</p>
<pre><code class="q">q)ss[&quot;ab&quot;;&quot;z&quot;]
`long$()
</code></pre>

<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You cannot use <code>*</code> to match with <code>ss</code>.</p>
</div>
<pre><code class="q">q)&quot;fun&quot; ss &quot;f*n&quot;
'length
</code></pre>

<h3 id="a88-ssr">A.88 <code>ssr</code><a class="headerlink" href="A_Built-in_Functions.1#a88-ssr" title="Permanent link">&para;</a></h3>
<p>The triadic <code>ssr</code>, for "string search and replace", extends the capability of <code>ss</code> with replacement. The result is a string based on the first string parameter (<em>source</em>) in which all occurrences of the second string parameter (<em>pattern</em>) are replaced with the third string argument.</p>
<pre><code class="q">q)ssr[&quot;suffering succotash&quot;;&quot;s&quot;;&quot;th&quot;]
&quot;thuffering thuccotathh&quot;
</code></pre>

<div class="admonition note">
<p class="admonition-title">Note</p>
<p>You cannot use <code>*</code> to match with <code>ssr</code>.</p>
</div>
<p>You can use the <code>over</code> adverb with <code>ssr</code> to replace multiple items.</p>
<pre><code class="q">q)(ssr/)[&quot;results_%div_%dept.csv&quot;; (&quot;%div&quot;;&quot;%dept&quot;); (&quot;banking&quot;;&quot;m&amp;a&quot;)]
&quot;results_banking_m&amp;a.csv&quot;
</code></pre>

<h3 id="a89-string">A.89 <code>string</code><a class="headerlink" href="A_Built-in_Functions.1#a89-string" title="Permanent link">&para;</a></h3>
<p>The monadic <code>string</code> can be applied to any q entity to produce a textual representation. For atoms, lists and functions, the result of <code>string</code> is a list of char that does not contain any q formatting characters. Following are some examples.</p>
<pre><code class="q">q)string 42
&quot;42&quot;

q)string 6*7
&quot;42&quot;

q)string 424224242i
&quot;424224242&quot;

q)string `Zaphod
&quot;Zaphod&quot;

q)string {[a] a*a}
&quot;{[a] a*a}&quot;
</code></pre>

<p>The first example demonstrates that <code>string</code> is <strong>not</strong> atomic, because the result of applying it to an atom is a <em>list</em> of char.</p>
<p>Although <code>string</code> is not atomic, it is pseudo-atomic, in that it recurses through a list.</p>
<pre><code class="q">q)string 42 98
&quot;42&quot;
&quot;98&quot;
q)(&quot;42&quot;;&quot;98&quot;)
&quot;42&quot;
&quot;98&quot;
</code></pre>

<p>This accounts for the un-intuitive behavior of <code>string</code> on an actual string.</p>
<pre><code class="q">q)string &quot;Beeblebrox&quot;
,&quot;B&quot;
,&quot;e&quot;
,&quot;e&quot;
,&quot;b&quot;
,&quot;l&quot;
,&quot;e&quot;
,&quot;b&quot;
,&quot;r&quot;
,&quot;o&quot;
</code></pre>

<p>Considering a list as a mapping, <code>string</code> acts on the range of the mapping. Viewing a dictionary as a generalized list, we conclude that the action of <code>string</code> on a dictionary should also apply to its range.</p>
<pre><code class="q">q)string 1 2 3!100 101 102
1| &quot;100&quot;
2| &quot;101&quot;
3| &quot;102&quot;
</code></pre>

<p>A table is the flip of a column dictionary, so we expect <code>string</code> to operate on the range of the column dictionary.</p>
<pre><code class="q">q)string ([] a:1 2 3; b:`a`b`c)
a    b
---------
,&quot;1&quot; ,&quot;a&quot;
,&quot;2&quot; ,&quot;b&quot;
,&quot;3&quot; ,&quot;c&quot;
</code></pre>

<p>Finally, a keyed table is a dictionary, so we expect <code>string</code> to operate on the value table.</p>
<pre><code class="q">q)string ([k:1 2 3] c:100 101 102)
k| c
-| -----
1| &quot;100&quot;
2| &quot;101&quot;
3| &quot;102&quot;
</code></pre>

<h3 id="a90-sublist">A.90 <code>sublist</code><a class="headerlink" href="A_Built-in_Functions.1#a90-sublist" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>sublist</code> retrieves a sub-list of contiguous items from a list. The first parameter is a simple list of two non-negative integers: the first item is the starting index (<em>start</em>); the second item is the number of items to retrieve (<em>count</em>). The second parameter (<em>target</em>) is a list or dictionary.</p>
<pre><code class="q">q)0 3 sublist 10 20 30 40 50
10 20 30
q)0 10 sublist &quot;abcdef&quot;
&quot;abcdef&quot;
q)0 2 sublist `a`b`c!10 20 30
a| 10
b| 20
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The construct <code>0 n sublist …</code> is preferred to <code>n# …</code> for extracting the first <code>n</code> items from a list since the latter will repeat the initial items if necessary to reach the specified count. This is ignored surprisingly often in practice.</p>
</div>
<h3 id="a91-sum">A.91 <code>sum</code><a class="headerlink" href="A_Built-in_Functions.1#a91-sum" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>sum</code> is <code>(+/)</code>, which applies <code>+</code> cumulatively across a numeric list and returns the final result.</p>
<pre><code class="q">q)sum 1+til 100
5050

q)sum 100?100.
5387.56
</code></pre>

<p>It is possible to apply <code>sum</code> to a nested list provided the sublists conform. In this case, the result conforms to the sublists and the sum is calculated recursively on the sublists.</p>
<pre><code class="q">q)sum (1 2;100 200;1000 2000)
1101 2202
</code></pre>

<h3 id="a92-sums">A.92 <code>sums</code><a class="headerlink" href="A_Built-in_Functions.1#a92-sums" title="Permanent link">&para;</a></h3>
<p>The uniform <code>sums</code> is <code>(+\)</code>, which applies <code>+</code> cumulatively across a list of numeric type and returns the intermediate results.</p>
<pre><code class="q">q)sums 1+til 10
1 3 6 10 15 21 28 36 45 55
</code></pre>

<h3 id="a93-sv">A.93 <code>sv</code><a class="headerlink" href="A_Built-in_Functions.1#a93-sv" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>sv</code> – "scalar from vector" – has several forms. It is usually written infix since that is easier to read.</p>
<p>The first form takes a char as its first parameter and a list of strings (<em>source</em>) as its second. It returns a string that is the concatenation of the strings in <em>source</em>, separated by the specified char.</p>
<pre><code class="q">q)&quot;,&quot; sv (&quot;Now&quot;;&quot;is&quot;;&quot;the&quot;;&quot;time&quot;;&quot;&quot;)
&quot;Now,is,the,time,&quot;
</code></pre>

<p>When <code>sv</code> is used with an empty symbol as its first parameter and a list of symbols as its second (<em>source</em>), the result is a symbol in which the items in <em>source</em> are concatenated with a separating dot. This is useful for q context names.</p>
<pre><code class="q">q)` sv `qalib`stat
`qalib.stat
</code></pre>

<p>When <code>sv</code> is used with an empty symbol as its first parameter and a symbol second parameter (<em>source</em>) whose first item is a file handle, the result is a symbol in which the items in <em>source</em> are concatenated with a separating <code>/</code>. This is useful for fully qualified path names.</p>
<pre><code class="q">q)` sv `:`q`tutorial`draft`3
`:/q/tutorial/draft/3
</code></pre>

<p>When <code>sv</code> is used with an empty symbol as its first parameter and a list of strings as the second parameter, it concatenates the strings, inserting a new line character after each.</p>
<pre><code class="q">q)` sv (&quot;abc&quot;;&quot;de&quot;)
&quot;abc\nde\n&quot;
</code></pre>

<p>When <code>sv</code> is used with a long first parameter (<em>base</em>) that is greater than 1, together with a second parameter of a simple list of place values expressed in <em>base</em>, the result is a long representing the converted base 10 value.</p>
<pre><code class="q">q)2 sv 101010b
42

q)10 sv 1 2 3 4 2
12342

q)256 sv 0x001092
4242
</code></pre>

<p>More precisely, the last version of <code>sv</code> evaluates the polynomial,</p>
<p>(d[n-1]*b exp n-1) + ... +d[0]</p>
<p>where <em>d</em> is the list of digits, <em>n</em> is the count of <em>d</em>, and <em>b</em> is the base.</p>
<p>Thus, we find,</p>
<pre><code class="q">q)10 sv 1 2 3 11 2
12412

q)-10 sv 2 1 5
195
</code></pre>

<h3 id="a94-svar">A.94 <code>svar</code><a class="headerlink" href="A_Built-in_Functions.1#a94-svar" title="Permanent link">&para;</a></h3>
<p>The monadic <code>svar</code> returns the statistical standard variance of its numeric list argument.</p>
<pre><code class="q">q)svar 2 3 5 7
4.916667
</code></pre>

<p>It is equivalent to,</p>
<p><code>{var[x]*count[x]%-1+count x}</code></p>
<div class="admonition warning">
<p class="admonition-title">Warning</p>
<p>The <code>svar</code> function was added in version 3.2 meaning that finance apps can no longer use a variable name <code>svar</code> for stress value at risk in this and later versions.</p>
</div>
<h3 id="a95-system">A.95 <code>system</code><a class="headerlink" href="A_Built-in_Functions.1#a95-system" title="Permanent link">&para;</a></h3>
<p>The monadic <code>system</code> takes a string argument and executes it as a q command, if recognized, or an OS command otherwise. This is convenient to execute q commands programmatically. The normal result of the command becomes the return value of the evaluation.</p>
<p>Do <strong>not</strong> include the initial <code>\</code> as you would when executing the command from the q session prompt.</p>
<pre><code class="q">q)system &quot;c&quot;
25 80i
q)system &quot;c 40 400&quot;
q)system &quot;c&quot;
40 400i

q)system &quot;cd /data&quot;
q)system &quot;pwd&quot;
&quot;/data&quot;
</code></pre>

<h3 id="a96-takereshape">A.96 take/reshape <code>#</code><a class="headerlink" href="A_Built-in_Functions.1#a96-takereshape" title="Permanent link">&para;</a></h3>
<p>The dyadic function <code>#</code> has several forms.</p>
<p>When the first parameter of <code>#</code> is an integer atom <em>count</em>, it returns <em>count</em> items from the atom or list second parameter (<em>source</em>). The items are extracted from the head when <em>source</em> is positive and from the tail when count is <em>negative</em>. When <em>count</em> is zero, the result is an empty list of the same type as the first item in <em>source</em>. When <em>count</em> is greater than the count of <em>source</em>, items are repeatedly drawn from <em>source</em> as described until <em>count</em> items are obtained.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The result of <em>take</em> is always a list.</p>
</div>
<pre><code class="q">q)2#10 20 30 40 50
10 20

q)-3#10 20 30 40 50
30 40 50

q)0#10 20 30 40 50
`long$()

q)3#42
42 42 42

q)10#10 20 30 40 50
10 20 30 40 50 10 20 30 40 50
</code></pre>

<p>The idiom <code>0#</code> atom is a common way to create an empty list of the type of atom.</p>
<pre><code class="q">q)meta ([] a:0#0; b:0#`)
c| t f a
-| -----
a| j
b| s
</code></pre>

<p>Since a dictionary is ordered, take also applies to dictionaries and, by extension, to tables and keyed tables.</p>
<pre><code class="q">q)2#`a`b`c!10 20 30
a| 10
b| 20

q)-2#([] c1:`a`b`c; c2:10 20 30)
c1 c2
-----
b 20
c 30

q)2#([k:`a`b`c] v:10 20 30)
k| v
-| --
a| 10
b| 20
</code></pre>

<p>Another form of take has first parameter a list of keys and the second parameter a dictionary. The result is the sub-dictionary for these keys.</p>
<pre><code class="q">q)`a`c#`a`b`c!10 20 30
a| 10
c| 30
</code></pre>

<p>Since a table is a column dictionary this form also applies to a table with a list of column names.</p>
<pre><code class="q">q)`c1`c2#([] c1:`a`b`c; c2:10 20 30; c3:1.1 2.2 3.3)
c1 c2
-----
a 10
b 20
c 30
</code></pre>

<p>Using an anonymous table is a nifty way to generate a list of keys for takes with a keyed table.</p>
<pre><code class="q">q)([] k:`a`c)#([k:`a`b`c] v:10 20 30)
k| v
-| --
a| 10
c| 30
</code></pre>

<p>Another form of take has first parameter a list (<em>r</em>; <em>c</em>) of two non-negative integers and second parameter a list or atom (<em>source</em>). The result is a nested list with <em>r</em> items, each having <em>c</em> items, drawn sequentially from the beginning of <em>source</em>, repeatedly if necessary. Otherwise put, the result is an <em>r</em> by <em>c</em> array obtained by reshaping <em>source</em>.</p>
<pre><code class="q">q)2 3#10 20 30 40 50
10 20 30
40 50 10
</code></pre>

<p>If in the previous form either <em>r</em> or <em>c</em> is null, the result is a nested list obtained by reshaping the second parameter into the specified number of rows or columns. This is generally a ragged array.</p>
<pre><code class="q">q)2 0N#10 20 30 40 50
10 20 30
40 50
q)0N 3#10 20 30 40 50
10 20 30
40 5
</code></pre>

<h3 id="a97-tan">A.97 <code>tan</code><a class="headerlink" href="A_Built-in_Functions.1#a97-tan" title="Permanent link">&para;</a></h3>
<p>The atomic <code>tan</code> takes a float and returns its mathematical tangent.</p>
<pre><code class="q">q)tan 0
0f

q)pi:3.141592653589793
q)tan pi
-1.224647e-16

q)tan pi%2
1.633124e+16

q)tan pi%4
1f

q)tan pi%8
0.4142136
</code></pre>

<p>The function <code>tan</code> is equivalent to</p>
<p><code>(sin x)%cos x</code></p>
<h3 id="a98-til">A.98 <code>til</code><a class="headerlink" href="A_Built-in_Functions.1#a98-til" title="Permanent link">&para;</a></h3>
<p>The monadic <code>til</code> takes a non-negative long parameter (<em>n</em>) and returns a list of <em>n</em> consecutive longs starting with 0.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The argument is not including in the result.</p>
</div>
<pre><code class="q">q)til 4
0 1 2 3
q)count til 1000000
1000000
</code></pre>

<p>The result of <code>til</code> is always a list.</p>
<pre><code class="q">q)til 0
`long$()
q)til 1
,0
</code></pre>

<p>To generate other regular numeric sequences, perform vector operations on the result of <code>til</code>.</p>
<pre><code class="q">q)1+til 10
1 2 3 4 5 6 7 8 9 10
q)2*til 10
0 2 4 6 8 10 12 14 16 18
q)1+2*til 10
1 3 5 7 9 11 13 15 17 19
q).5*til 10
0 0.5 1 1.5 2 2.5 3 3.5 4 4.5
q)2015.01.01+til 5
2015.01.01 2015.01.02 2015.01.03 2015.01.04 2015.01.05
</code></pre>

<h3 id="a99-trim">A.99 <code>trim</code><a class="headerlink" href="A_Built-in_Functions.1#a99-trim" title="Permanent link">&para;</a></h3>
<p>The monadic <code>trim</code> takes a string argument and returns the result of removing leading and trailing blanks.</p>
<pre><code class="q">q)trim &quot; abc &quot;
&quot;abc&quot;
</code></pre>

<p>The function <code>trim</code> is equivalent to,</p>
<p><code>{ltrim rtrim x}</code></p>
<h3 id="a100-ungroup">A.100 <code>ungroup</code><a class="headerlink" href="A_Built-in_Functions.1#a100-ungroup" title="Permanent link">&para;</a></h3>
<p>The monadic <code>ungroup</code> flattens tables with nested columns that are the result of a select query that groups without aggregation, or of <code>xgroup</code>. Of course you can also apply it to tables with nested columns of the same form that are otherwise generated.</p>
<p>The action of <code>ungroup</code> expands each key group, resulting in one row for each item in the nested columns. The fields in a result row are drawn from corresponding positions across the nested columns.</p>
<p>We use the distribution example.</p>
<pre><code class="q">q)\l sp.q
+`p`city!(`p$`p1`p2`p3`p4`p5`p6`p1`p2;`london`london`london`london`london`lon..
(`s#+(,`color)!,`s#`blue`green`red)!+(,`qty)!,900 1000 1200
+`s`p`qty!(`s$`s1`s1`s1`s2`s3`s4;`p$`p1`p4`p6`p2`p2`p4;300 200 100 400 200 300)

q)sp
s  p  qty
---------
s1 p1 300
s1 p2 200
s1 p3 400
s1 p4 200
s4 p5 100
s1 p6 100
s2 p1 300
s2 p2 400
s3 p2 200

q)select s, qty by p from sp
p | s               qty
--| -------------------------------
p1| `s$`s1`s2       300 300
p2| `s$`s1`s2`s3`s4 200 400 200 200
p3| `s$,`s1         ,400
p4| `s$`s1`s4       200 300
p5| `s$`s4`s1       100 400
p6| `s$,`s1         ,100

q)ungroup select s, qty by p from sp
p  s  qty
---------
p1 s1 300
p1 s2 300
p2 s1 200
p2 s2 400
p2 s3 200
p2 s4 200
p3 s1 400
p4 s1 200
p4 s4 300
p5 s4 100
p5 s1 400
p6 s1 100

q)`p xgroup sp
p | s               qty
--| -------------------------------
p1| `s$`s1`s2       300 300
p2| `s$`s1`s2`s3`s4 200 400 200 200
p3| `s$,`s1         ,400
p4| `s$`s1`s4       200 300
p5| `s$`s4`s1       100 400
p6| `s$,`s1         ,100

q)ungroup `p xgroup sp
p  s  qty
---------
p1 s1 300
p1 s2 300
p2 s1 200
p2 s2 400
p2 s3 200
p2 s4 200
p3 s1 400
p4 s1 200
p4 s4 300
p5 s4 100
p5 s1 400
p6 s1 100
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Observe that <code>ungroup</code> is not quite the inverse of a grouping operation. Since grouping sorts on the keys, a subsequent <code>ungroup</code> returns the original records sorted by the grouped column(s).</p>
</div>
<h3 id="a101-union">A.101 <code>union</code><a class="headerlink" href="A_Built-in_Functions.1#a101-union" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>union</code> returns the set theoretic union of its two list parameters. The result has the distinct items of the two parameters in order of their first appearance.</p>
<pre><code class="q">q)1 1 2 3 union 2 2 3 4
1 2 3 4
q)&quot;a good time&quot; union &quot;was had by all&quot;
&quot;a godtimewshbyl&quot;
</code></pre>

<p>Since a table is a list of records, <code>union</code> can be used to perform the analogue of SQL <code>UNION</code> for tables having the same schemas.</p>
<pre><code class="q">q)([] c1:`a`b`c; c2:10 20 30) union ([] c1:`c`d; c2:300 400)
c1 c2
------
a  10
b  20
c  30
c  300
d  400
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Use <code>uj</code> for tables that do not have matching schemas – see <a href="9_Queries_q-sql.1#997-union-join">§9.9.7</a>.</p>
</div>
<h3 id="a102-upper">A.102 <code>upper</code><a class="headerlink" href="A_Built-in_Functions.1#a102-upper" title="Permanent link">&para;</a></h3>
<p>The atomic <code>upper</code> takes a char, string or symbol argument and returns the result of converting any alpha characters to upper case.</p>
<pre><code class="q">q)upper `a
`A

q)upper `a`b
`A`B

q)upper &quot;a Bc42De&quot;
&quot;A BC42DE&quot;
</code></pre>

<h3 id="a103-value">A.103 <code>value</code><a class="headerlink" href="A_Built-in_Functions.1#a103-value" title="Permanent link">&para;</a></h3>
<p>The function <code>value</code> also vies for the title as the most overloaded q operator.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The functions <code>value</code> and <code>get</code> are identical. Conventionally <code>get</code> is used with file I/O.</p>
</div>
<p>When <code>value</code> is applied to a symbolic variable name, it returns the associated value.</p>
<pre><code class="q">q)a:42
q)value `a
42
</code></pre>

<p>When applied to a dictionary, <code>value</code> returns the keys of the dictionary. This includes the special case of the value table of a keyed table.</p>
<pre><code class="q">q)value `a`b`c!10 20 30
10 20 30

q)kt:([k:`a`b`c] v:10 20 30)
q)value kt
_
</code></pre>

<p>A common idiom uses <code>value</code> to extract the columns lists from a table.</p>
<pre><code class="q">q)value flip ([] c1:`a`b`c; c2:10 20 30)
a b c
10 20 30
</code></pre>

<p>When <code>value</code> is applied to an enumerated value, it de-enumerates it. This is handy when switching between kdb+ databases having different sym domains.</p>
<pre><code class="q">q)sym:()
q)ev:`sym?`a`x`b`y`a`c`b
q)ev
`sym$`a`x`b`y`a`c`b
q)value ev
`a`x`b`y`a`c`b
</code></pre>

<p>Given a function, <code>value</code> returns the following list,</p>
<p>(bytecode;parms;locals;(context;globals);constants[0];...;constants[n];defn)</p>
<pre><code class="q">q)f:{[a;b]d::neg c:a*b+42;c+e}
q)value f
0xa0794178430316220b048100028276410004
`a`b
,`c
``d`e
42
&quot;{[a;b]d::neg c:a*b+42;c+e}&quot;q)sym:()
</code></pre>

<p>Given an alias (aka “view”), <code>value</code> returns the list</p>
<p>(cached value;parse tree;dependencies;definition)</p>
<p>When the evaluation of the expression in the alias is as yet deferred, the cached value is <code>::</code>.</p>
<pre><code class="q">q)a:42
q)b::a+1            / evaluation is deferred
q)value `.[`b]      / inspect global context
::
(+;`a;1)
,`a
&quot;a+1&quot;

q)b                 / force evaluation
43
q)value `.[`b]
43
(+;`a;1)
,`a
&quot;a+1&quot;
</code></pre>

<p>Given a projection, <code>value</code> returns a list containing the function body followed by the supplied arguments.</p>
<pre><code class="q">q)f:{x+y+z}
q)value f[2;3;]
{x+y+z}
2
3
::
q)value +[2]
_
</code></pre>

<p>Given a function that is the result of applying a k adverb, <code>value</code> returns the argument to the adverb, viewing the latter as a higher-order function.</p>
<pre><code class="q">q)value (+/)
+
q)value (+')
+
q)f:{x+y}
q)value (f')
{x+y}
</code></pre>

<p>The final and most powerful form of <code>value</code> is that it is the q interpreter itself. It will evaluate a string as if it had been typed at the console.</p>
<pre><code class="q">q)value &quot;6*7&quot;
42
q)value &quot;{x*x} til 10&quot;
0 1 4 9 16 25 36 49 64 81
</code></pre>

<p>It will also evaluate a parse tree – i.e., a (potentially) nested list of functions followed by arguments. If the function is specified by name, that name is resolved first.</p>
<pre><code class="q">q)value (*; 6; 7)
42
q)f:{x*y}
q)value (`f; 6; 7)
42
</code></pre>

<div class="admonition important">
<p class="admonition-title">Important</p>
<p>This use of the <code>value</code> function is a powerful feature that allows q code to be written and executed on the fly. This can expose your program to potential attack unless done very carefully. If abused, it can quickly lead to unmaintainable code. (The spellchecker suggests "unmentionable" instead of "unmaintainable." How did it know?)</p>
</div>
<h3 id="a104-var">A.104 <code>var</code><a class="headerlink" href="A_Built-in_Functions.1#a104-var" title="Permanent link">&para;</a></h3>
<p>The aggregate <code>var</code> takes a numeric list and returns the mathematical variance of the items as a float.</p>
<pre><code class="q">q)var 42 45 37 38
13.66667
</code></pre>

<p>The function <code>var</code> is equivalent to</p>
<p><code>{(avg[x*x]) - (avg[x])*(avg[x])}</code></p>
<h3 id="a105-vs">A.105 <code>vs</code><a class="headerlink" href="A_Built-in_Functions.1#a105-vs" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>vs</code> – ”vector from scalar” – has several versions. It is usually written infix for ease of reading.</p>
<p>The first form takes a char as its first parameter and a string (<em>source</em>) as its second parameter. It returns a list of strings containing the tokens of <em>source</em> as delimited by the specified char.</p>
<pre><code class="q">q)&quot; &quot; vs &quot;Now is the time &quot;
&quot;Now&quot;
&quot;is&quot;
&quot;the&quot;
&quot;time&quot;
&quot;&quot;
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You probably want to trim the input in the above example.</p>
</div>
<p>When <code>vs</code> is used with an empty symbol as its first parameter and a symbol second parameter (<em>source</em>) containing dots, it returns a simple symbol list obtained by splitting <em>source</em> along the dots.</p>
<pre><code class="q">q)` vs `qalib.stat
`qalib`stat
</code></pre>

<p>When <code>vs</code> is used with an empty symbol as its first parameter and a symbol representing a fully qualified file name as the second parameter, it returns a simple list of symbols in which the first item is the path and the second item is the file name. Note that in this usage, <code>vs</code> is not quite the inverse of <code>sv</code>.</p>
<pre><code class="q">q)` vs `qalib.stat
`qalib`stat
</code></pre>

<p>When <code>vs</code> is used with a null of binary type as the first parameter and an value of integer type as the second parameter (<em>source</em>), it returns a simple list whose items comprise the digits of the corresponding binary representation of <em>source</em>.</p>
<pre><code class="q">q)0x00 vs 4242
0x0000000000001092

q)10h$0x00 vs 8151631268726338926j
&quot;q is fun&quot;

q)0b vs 42
0000000000000000000000000000000000000000000000000000000000101010b
</code></pre>

<p>The <code>0b</code> version can be used to display the internal representation of special values.</p>
<pre><code class="q">q)0b vs 0W
0111111111111111111111111111111111111111111111111111111111111111b
q)0b vs -0W
1000000000000000000000000000000000000000000000000000000000000001b
</code></pre>

<h3 id="a106-wavg">A.106 <code>wavg</code><a class="headerlink" href="A_Built-in_Functions.1#a106-wavg" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>wavg</code> takes two numeric lists of the same count and returns the float average of the items in the second parameter, weighted by the items of the first.</p>
<pre><code class="q">q)1 2 3 4 wavg 500 400 300 200
300f
</code></pre>

<p>The function <code>wavg</code> is equivalent to,</p>
<p><code>{(sum x*y)%sum x}</code></p>
<p>It is possible to apply <code>wavg</code> to a nested list provided all sublists of both parameters conform. In this context, the result conforms to the sublists and the weighted average is calculated recursively across the sublists.</p>
<pre><code class="q">q)(1 2;3 4) wavg (500 400; 300 200)
350 266.6667
</code></pre>

<h3 id="a107-where">A.107 <code>where</code><a class="headerlink" href="A_Built-in_Functions.1#a107-where" title="Permanent link">&para;</a></h3>
<p>The monadic <code>where</code> has two forms.</p>
<p>The first form returns the indices of <code>1b</code> in a boolean list, or the keys associated to <code>1b</code> in a dictionary with boolean values.</p>
<pre><code class="q">q)where 101010b
0 2 4
q)where `a`b`c`d`e`f!101010b
`a`c`e
</code></pre>

<p>This is useful when the boolean mapping is the result of a predicate.</p>
<pre><code class="q">q)where &quot;,&quot;=&quot;First, second, third&quot;
5 13

q)@[L; where L=&quot;,&quot;; :; &quot;\t&quot;]
&quot;First\t second\t third&quot;

q)where null `a`b`c`d`e`f!1 0n 3 4 0n 6
`b`e
</code></pre>

<p>When the argument of <code>where</code> is a list of non-negative long (<em>c</em>), the result is a list obtained by catenating <em>c</em>[<em>i</em>] copies of <em>i</em>, for each item in <em>c</em>.</p>
<pre><code class="q">q)where 2 1 3
0 0 1 2 2 2
q)where 2 1 0 3 2
0 0 1 3 3 3 4 4
q)where 4#1
0 1 2 3
</code></pre>

<div class="admonition note">
<p class="admonition-title">Zen Moment</p>
<p>The second form of <code>where</code> generalizes the form on a boolean list.</p>
</div>
<h3 id="a108-within">A.108 <code>within</code><a class="headerlink" href="A_Built-in_Functions.1#a108-within" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>within</code> is atomic in its first parameter (<em>source</em>) and takes a second parameter that is a list (<em>b</em>;<em>e</em>) that are comparable. It returns a boolean representing whether <em>source</em> is greater than or equal to <em>b</em> and less than or equal to <em>e</em>. It will do type promotion on arguments.</p>
<pre><code class="q">q)3 within 2 5
1b

q)(til 7)within 2 5
0011110b

q)&quot;c&quot; within &quot;az&quot;
1b

q)2015.03.14 within 2015.02.01 2015
1b

q)`ab within `a`b
1b

q)100 within &quot;aj&quot;
1b
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Ensure the items in the second argument are in increasing order or you will get no matches.</p>
</div>
<h3 id="a109-wsum">A.109 <code>wsum</code><a class="headerlink" href="A_Built-in_Functions.1#a109-wsum" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>wsum</code> takes two numeric lists of the same count and returns the float sum of the items of second parameter weighted by the items of the first.</p>
<pre><code class="q">q)1 2 3 4 wsum 500 400 300 200
3000f
</code></pre>

<p>The function <code>wsum</code> is equivalent to,</p>
<p><code>{sum x*y}</code></p>
<p>It is possible to apply <code>wsum</code> to a nested list provided all sublists of both arguments conform. In this case, the result conforms to the sublists and the weighted sum is calculated recursively across the sublists.</p>
<pre><code class="q">q)(1 2;3 4) wsum (500 400;300 200)
1400 1600
</code></pre>

<h3 id="a110-xbar">A.110 <code>xbar</code><a class="headerlink" href="A_Built-in_Functions.1#a110-xbar" title="Permanent link">&para;</a></h3>
<p>The uniform dyadic <code>xbar</code> takes first parameter a non-negative numeric atom (<em>width</em>) and returns the smallest integral multiple of <em>width</em> that is less than or equal to its second parameter. Visually, the result is the left endpoint of the band of width <em>width</em> that contains the second parameter. Since <code>xbar</code> is atomic in the second parameter, this is an effective way to bin the items in a numeric list.</p>
<pre><code class="q">q)1 xbar 0 .5 1 1.5 2 2.5 3 3.5
0 0 1 1 2 2 3 3f

q)1.5 xbar 0 .5 1 1.5 2 2.5 3 3.5
0 0 0 1.5 1.5 1.5 3 3

q)2 xbar 0 .5 1 1.5 2 2.5 3 3.5
0 0 0 0 2 2 2 2f
</code></pre>

<p>Since a q month is actually the count of months since the millennium, you can use <code>xbar</code> to determine quarters. Recall that a month is equal to the first day of the month.</p>
<pre><code class="q">q)`date$3 xbar `month$2015.11.19 / beginning of that quarter
2015.10.01
q)`date$3+3 xbar `month$2015.11.19 / beginning of next quarter
_
q)-1+`date$3+3 xbar `month$2015.11.19 / end of that quarter
_
</code></pre>

<h3 id="a111-xprev">A.111 <code>xprev</code><a class="headerlink" href="A_Built-in_Functions.1#a111-xprev" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>xprev</code> takes a long as its first parameter (<em>shift</em>) and shifts the list in its second parameter by <em>shift</em> positions. When <em>shift</em> is 0 or positive, the shift is forward; otherwise it is backward. The beginning – respectively end – of the list is filled with <em>shift</em> null (or empty) items.</p>
<pre><code class="q">q)2 xprev 10 20 30 40 50
0N 0N 10 20 30

q)-2 xprev 10 20 30 40 50
30 40 50 0N 0N

q)2 xprev (1 2 3; 4 5; enlist 6; 7 8)
`long$()
`long$()
1 2 3
4 5
</code></pre>

<h3 id="a112-xrank">A.112 <code>xrank</code><a class="headerlink" href="A_Built-in_Functions.1#a112-xrank" title="Permanent link">&para;</a></h3>
<p>The dyadic <code>xrank</code> has first parameter a positive long (<em>n</em>) and is uniform in its second parameter (<em>source</em>). It returns a list of long containing the <em>n</em>-quantile into which each item of <em>source</em> falls, considering <em>source</em> as a distribution. For example, choosing <em>n</em> to be 4 returns quartiles and 100 yields percentiles.</p>
<pre><code class="q">q)4 xrank 30 10 40 20 90
1 0 2 0 3

q)100 xrank 200?1000.
35 14 30 96 19 68 39 21 91 73 27 79 30 66 27 79 75 8 99 84 84 77 ..
</code></pre>
                
                  
                
              
              
                


              
            </article>
          </div>
        </div>
      </main>
      
        
<footer class="md-footer">
  
    <div class="md-footer-nav">
      <nav class="md-footer-nav__inner md-grid">
        
          <a href="14_Introduction_to_Kdb+.1" title="14. Introduction to Kdb+" class="md-flex md-footer-nav__link md-footer-nav__link--prev" rel="prev">
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-back md-footer-nav__button"></i>
            </div>
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Previous
                </span>
                14. Introduction to Kdb+
              </span>
            </div>
          </a>
        
        
          <a href="B_Error_Messages/index.html" title="Appendix B. Error Messages" class="md-flex md-footer-nav__link md-footer-nav__link--next" rel="next">
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Next
                </span>
                Appendix B. Error Messages
              </span>
            </div>
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-forward md-footer-nav__button"></i>
            </div>
          </a>
        
      </nav>
    </div>
  
  <div class="md-footer-meta md-typeset">
    <div class="md-footer-meta__inner md-grid">
      <div class="md-footer-copyright">
        
          <div class="md-footer-copyright__highlight">
            ©2015 Jeffry A. Borror / q4m LLC. Kx® and kdb+ are registered trademarks of Kx Systems, Inc., a subsidiary of First Derivatives plc.
          </div>
        
        powered by
        <a href="http://www.mkdocs.org">MkDocs</a>
        and
        <a href="https://squidfunk.github.io/mkdocs-material/">
          Material for MkDocs</a>
      </div>
      
        
      
    </div>
  </div>
</footer>
      
    </div>
    
      <script src="assets/javascripts/application.b438e6c5.js"></script>
      
      <script>app.initialize({version:"0.17.3",url:{base:".."}})</script>
      
        <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
      
        <script src="https://tracker.mrpfd.com/tracker.js"></script>
      
        <script src="http://code.kx.com/scripts/googleanalytics.js"></script>
      
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"></script>
      
        <script src="https://use.fontawesome.com/3dbf29ed12.js"></script>
      
        <script src="http://code.kx.com/scripts/prism.js"></script>
      
    
    
      
    
  </body>
</html>