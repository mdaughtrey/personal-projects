



<!DOCTYPE html>
<html lang="en" class="no-js">
  <head>
    
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <meta http-equiv="x-ua-compatible" content="ie=edge">
      
        <meta name="description" content="Q for Mortals">
      
      
        <link rel="canonical" href="3_Lists.1">
      
      
        <meta name="author" content="Jeffry Borror">
      
      
        <meta name="lang:clipboard.copy" content="Copy to clipboard">
      
        <meta name="lang:clipboard.copied" content="Copied to clipboard">
      
        <meta name="lang:search.language" content="en">
      
        <meta name="lang:search.pipeline.stopwords" content="True">
      
        <meta name="lang:search.pipeline.trimmer" content="True">
      
        <meta name="lang:search.result.none" content="No matching documents">
      
        <meta name="lang:search.result.one" content="1 matching document">
      
        <meta name="lang:search.result.other" content="# matching documents">
      
        <meta name="lang:search.tokenizer" content="[\s\-]+">
      
      <link rel="shortcut icon" href="img/favicon.ico">
      <meta name="generator" content="mkdocs-0.17.3, mkdocs-material-2.7.2">
    
    
      
        <title>3. Lists - Q for Mortals</title>
      
    
    
      <link rel="stylesheet" href="assets/stylesheets/application.8d40d89b.css">
      
        <link rel="stylesheet" href="assets/stylesheets/application-palette.6079476c.css">
      
    
    
      <script src="assets/javascripts/modernizr.1aa3b519.js"></script>
    
    
      <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
      
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,400i,700|Roboto+Mono">
        <style>body,input{font-family:"Roboto","Helvetica Neue",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:"Roboto Mono","Courier New",Courier,monospace}</style>
      
      <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    
    
      <link rel="stylesheet" href="stylesheets/extra.css">
    
      <link rel="stylesheet" href="http://code.kx.com/stylesheets/prism.css">
    
    
  </head>
  
    
    
    <body dir="ltr" data-md-color-primary="blue" data-md-color-accent="deep-orange">
  
    <svg class="md-svg">
      <defs>
        
        
      </defs>
    </svg>
    <input class="md-toggle" data-md-toggle="drawer" type="checkbox" id="drawer" autocomplete="off">
    <input class="md-toggle" data-md-toggle="search" type="checkbox" id="search" autocomplete="off">
    <label class="md-overlay" data-md-component="overlay" for="drawer"></label>
    
      <a href="3_Lists.1#3-lists" tabindex="1" class="md-skip">
        Skip to content
      </a>
    
    
      <header class="md-header" data-md-component="header">
  <nav class="md-header-nav md-grid">
    <div class="md-flex">
      <div class="md-flex__cell md-flex__cell--shrink">
        <a href="http://code.kx.com/q4m3" title="Q for Mortals" class="md-header-nav__button md-logo">
          
            <img src="img/qfm3.jpg" width="24" height="24">
          
        </a>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        <label class="md-icon md-icon--menu md-header-nav__button" for="drawer"></label>
      </div>
      <div class="md-flex__cell md-flex__cell--stretch">
        <div class="md-flex__ellipsis md-header-nav__title" data-md-component="title">
          
            
              <span class="md-header-nav__topic">
                Q for Mortals
              </span>
              <span class="md-header-nav__topic">
                3. Lists
              </span>
            
          
        </div>
      </div>
      <div class="md-flex__cell md-flex__cell--shrink">
        
          
            <label class="md-icon md-icon--search md-header-nav__button" for="search"></label>
            
<div class="md-search" data-md-component="search" role="dialog">
  <label class="md-search__overlay" for="search"></label>
  <div class="md-search__inner" role="search">
    <form class="md-search__form" name="search">
      <input type="text" class="md-search__input" name="query" placeholder="Search" autocapitalize="off" autocorrect="off" autocomplete="off" spellcheck="false" data-md-component="query" data-md-state="active">
      <label class="md-icon md-search__icon" for="search"></label>
      <button type="reset" class="md-icon md-search__icon" data-md-component="reset" tabindex="-1">
        &#xE5CD;
      </button>
    </form>
    <div class="md-search__output">
      <div class="md-search__scrollwrap" data-md-scrollfix>
        <div class="md-search-result" data-md-component="result">
          <div class="md-search-result__meta">
            Type to start searching
          </div>
          <ol class="md-search-result__list"></ol>
        </div>
      </div>
    </div>
  </div>
</div>
          
        
      </div>
      
    </div>
  </nav>
</header>
    
    <div class="md-container">
      
        
      
      
      <main class="md-main">
        <div class="md-main__inner md-grid" data-md-component="container">
          
            
              <div class="md-sidebar md-sidebar--primary" data-md-component="navigation">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    <nav class="md-nav md-nav--primary" data-md-level="0">
  <label class="md-nav__title md-nav__title--site" for="drawer">
    <span class="md-nav__button md-logo">
      
        <img src="img/qfm3.jpg" width="48" height="48">
      
    </span>
    Q for Mortals
  </label>
  
  <ul class="md-nav__list" data-md-scrollfix>
    
      
      
      


  <li class="md-nav__item">
    <a href="redirect/index.html" title="code.kx.com" class="md-nav__link">
      code.kx.com
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="index.html" title="Contents" class="md-nav__link">
      Contents
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="preface/index.html" title="Preface" class="md-nav__link">
      Preface
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="0_Overview/index.html" title="0. Overview" class="md-nav__link">
      0. Overview
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="1_Q_Shock_and_Awe.1" title="1. Q Shock and Awe" class="md-nav__link">
      1. Q Shock and Awe
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="2_Basic_Data_Types_Atoms/index.html" title="2. Basic Data Types – Atoms" class="md-nav__link">
      2. Basic Data Types – Atoms
    </a>
  </li>

    
      
      
      

  


  <li class="md-nav__item md-nav__item--active">
    
    <input class="md-toggle md-nav__toggle" data-md-toggle="toc" type="checkbox" id="toc">
    
      
    
    
      <label class="md-nav__link md-nav__link--active" for="toc">
        3. Lists
      </label>
    
    <a href="3_Lists.1" title="3. Lists" class="md-nav__link md-nav__link--active">
      3. Lists
    </a>
    
      
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#30-overview" title="3.0 Overview" class="md-nav__link">
    3.0 Overview
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#31-introduction-to-lists" title="3.1 Introduction to Lists" class="md-nav__link">
    3.1 Introduction to Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#311-list-definition-and-assignment" title="3.1.1 List Definition and Assignment" class="md-nav__link">
    3.1.1 List Definition and Assignment
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#312-count" title="3.1.2 count" class="md-nav__link">
    3.1.2 count
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#32-simple-lists" title="3.2 Simple Lists" class="md-nav__link">
    3.2 Simple Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#321-simple-integer-lists" title="3.2.1 Simple Integer Lists" class="md-nav__link">
    3.2.1 Simple Integer Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#322-simple-floating-point-lists" title="3.2.2 Simple Floating Point Lists" class="md-nav__link">
    3.2.2 Simple Floating Point Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#323-simple-binary-lists" title="3.2.3 Simple Binary Lists" class="md-nav__link">
    3.2.3 Simple Binary Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#324-simple-symbol-lists" title="3.2.4 Simple Symbol Lists" class="md-nav__link">
    3.2.4 Simple Symbol Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#325-simple-char-lists-and-strings" title="3.2.5 Simple char Lists and Strings" class="md-nav__link">
    3.2.5 Simple char Lists and Strings
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#326-lists-of-temporal-data" title="3.2.6 Lists of Temporal Data" class="md-nav__link">
    3.2.6 Lists of Temporal Data
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#33-empty-and-singleton-lists" title="3.3 Empty and Singleton Lists" class="md-nav__link">
    3.3 Empty and Singleton Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#331-the-general-empty-list" title="3.3.1 The General Empty List" class="md-nav__link">
    3.3.1 The General Empty List
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#332-singleton-lists" title="3.3.2 Singleton Lists" class="md-nav__link">
    3.3.2 Singleton Lists
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#34-indexing" title="3.4 Indexing" class="md-nav__link">
    3.4 Indexing
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#341-index-notation" title="3.4.1 Index Notation" class="md-nav__link">
    3.4.1 Index Notation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#342-indexed-assignment" title="3.4.2 Indexed Assignment" class="md-nav__link">
    3.4.2 Indexed Assignment
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#343-indexing-domain" title="3.4.3 Indexing Domain" class="md-nav__link">
    3.4.3 Indexing Domain
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#344-empty-index-and-null-item" title="3.4.4 Empty Index and Null Item" class="md-nav__link">
    3.4.4 Empty Index and Null Item
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#345-lists-with-expressions" title="3.4.5 Lists with Expressions" class="md-nav__link">
    3.4.5 Lists with Expressions
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#35-combining-lists" title="3.5 Combining Lists" class="md-nav__link">
    3.5 Combining Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#351-joining-with" title="3.5.1 Joining with ," class="md-nav__link">
    3.5.1 Joining with ,
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#352-merging-with" title="3.5.2 Merging with ^" class="md-nav__link">
    3.5.2 Merging with ^
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#36-lists-as-maps" title="3.6 Lists as Maps" class="md-nav__link">
    3.6 Lists as Maps
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#37-nesting" title="3.7 Nesting" class="md-nav__link">
    3.7 Nesting
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#371-depth" title="3.7.1 Depth" class="md-nav__link">
    3.7.1 Depth
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#372-pictorial-representation" title="3.7.2 Pictorial Representation" class="md-nav__link">
    3.7.2 Pictorial Representation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#373-examples" title="3.7.3 Examples" class="md-nav__link">
    3.7.3 Examples
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#38-iterated-indexing-and-indexing-at-depth" title="3.8 Iterated Indexing and Indexing at Depth" class="md-nav__link">
    3.8 Iterated Indexing and Indexing at Depth
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#381-iterated-item-indexing" title="3.8.1 Iterated Item Indexing" class="md-nav__link">
    3.8.1 Iterated Item Indexing
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#382-indexing-at-depth" title="3.8.2 Indexing at Depth" class="md-nav__link">
    3.8.2 Indexing at Depth
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#39-indexing-with-lists" title="3.9 Indexing with Lists" class="md-nav__link">
    3.9 Indexing with Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#391-retrieving-multiple-items" title="3.9.1 Retrieving Multiple Items" class="md-nav__link">
    3.9.1 Retrieving Multiple Items
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#392-indexing-via-a-variable" title="3.9.2 Indexing via a Variable" class="md-nav__link">
    3.9.2 Indexing via a Variable
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#393-indexing-with-nested-lists" title="3.9.3 Indexing with Nested Lists" class="md-nav__link">
    3.9.3 Indexing with Nested Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#394-assignment-with-list-indexing" title="3.9.4 Assignment with List Indexing" class="md-nav__link">
    3.9.4 Assignment with List Indexing
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#395-juxtaposition" title="3.9.5 Juxtaposition" class="md-nav__link">
    3.9.5 Juxtaposition
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#396-find" title="3.9.6 Find (?)" class="md-nav__link">
    3.9.6 Find (?)
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#310-elided-indices" title="3.10 Elided Indices" class="md-nav__link">
    3.10 Elided Indices
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3101-eliding-indices-for-a-matrix" title="3.10.1 Eliding Indices for a Matrix" class="md-nav__link">
    3.10.1 Eliding Indices for a Matrix
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3102-eliding-indices-for-deeply-nested-lists" title="3.10.2 Eliding Indices for Deeply Nested Lists" class="md-nav__link">
    3.10.2 Eliding Indices for Deeply Nested Lists
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#311-rectangular-lists-and-matrices" title="3.11 Rectangular Lists and Matrices" class="md-nav__link">
    3.11 Rectangular Lists and Matrices
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3111-rectangular-lists" title="3.11.1 Rectangular Lists" class="md-nav__link">
    3.11.1 Rectangular Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3112-formal-definition-of-matrices" title="3.11.2 Formal Definition of Matrices" class="md-nav__link">
    3.11.2 Formal Definition of Matrices
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3113-two-and-three-dimensional-matrices" title="3.11.3 Two- and Three-Dimensional Matrices" class="md-nav__link">
    3.11.3 Two- and Three-Dimensional Matrices
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#3114-matrix-flexibility" title="3.11.4 Matrix Flexibility" class="md-nav__link">
    3.11.4 Matrix Flexibility
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#312-useful-list-operations" title="3.12 Useful List Operations" class="md-nav__link">
    3.12 Useful List Operations
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3121-til" title="3.12.1 til" class="md-nav__link">
    3.12.1 til
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3122-distinct" title="3.12.2 distinct" class="md-nav__link">
    3.12.2 distinct
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3123-where" title="3.12.3 where" class="md-nav__link">
    3.12.3 where
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3124-group" title="3.12.4 group" class="md-nav__link">
    3.12.4 group
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
    
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="4_Operators.1" title="4. Operators" class="md-nav__link">
      4. Operators
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="5_Dictionaries.1" title="5. Dictionaries" class="md-nav__link">
      5. Dictionaries
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="6_Functions.1" title="6. Functions" class="md-nav__link">
      6. Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="7_Transforming_Data/index.html" title="7. Transforming Data" class="md-nav__link">
      7. Transforming Data
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="8_Tables.1" title="8. Tables" class="md-nav__link">
      8. Tables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="9_Queries_q-sql.1" title="9. Queries – q-sql" class="md-nav__link">
      9. Queries – q-sql
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="10_Execution_Control/index.html" title="10. Execution Control" class="md-nav__link">
      10. Execution Control
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="11_IO.1" title="11. I/O" class="md-nav__link">
      11. I/O
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="12_Workspace_Organization.1" title="12. Workspace Organization" class="md-nav__link">
      12. Workspace Organization
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="13_Commands_and_System_Variables.1" title="13. Commands and System Variables" class="md-nav__link">
      13. Commands and System Variables
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="14_Introduction_to_Kdb+.1" title="14. Introduction to Kdb+" class="md-nav__link">
      14. Introduction to Kdb+
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="A_Built-in_Functions.1" title="Appendix A. Built-in Functions" class="md-nav__link">
      Appendix A. Built-in Functions
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="B_Error_Messages/index.html" title="Appendix B. Error Messages" class="md-nav__link">
      Appendix B. Error Messages
    </a>
  </li>

    
      
      
      


  <li class="md-nav__item">
    <a href="colophon/index.html" title="Colophon" class="md-nav__link">
      Colophon
    </a>
  </li>

    
  </ul>
</nav>
                  </div>
                </div>
              </div>
            
            
              <div class="md-sidebar md-sidebar--secondary" data-md-component="toc">
                <div class="md-sidebar__scrollwrap">
                  <div class="md-sidebar__inner">
                    
<nav class="md-nav md-nav--secondary">
  
  
    
  
  
    <label class="md-nav__title" for="toc">Table of contents</label>
    <ul class="md-nav__list" data-md-scrollfix>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#30-overview" title="3.0 Overview" class="md-nav__link">
    3.0 Overview
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#31-introduction-to-lists" title="3.1 Introduction to Lists" class="md-nav__link">
    3.1 Introduction to Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#311-list-definition-and-assignment" title="3.1.1 List Definition and Assignment" class="md-nav__link">
    3.1.1 List Definition and Assignment
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#312-count" title="3.1.2 count" class="md-nav__link">
    3.1.2 count
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#32-simple-lists" title="3.2 Simple Lists" class="md-nav__link">
    3.2 Simple Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#321-simple-integer-lists" title="3.2.1 Simple Integer Lists" class="md-nav__link">
    3.2.1 Simple Integer Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#322-simple-floating-point-lists" title="3.2.2 Simple Floating Point Lists" class="md-nav__link">
    3.2.2 Simple Floating Point Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#323-simple-binary-lists" title="3.2.3 Simple Binary Lists" class="md-nav__link">
    3.2.3 Simple Binary Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#324-simple-symbol-lists" title="3.2.4 Simple Symbol Lists" class="md-nav__link">
    3.2.4 Simple Symbol Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#325-simple-char-lists-and-strings" title="3.2.5 Simple char Lists and Strings" class="md-nav__link">
    3.2.5 Simple char Lists and Strings
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#326-lists-of-temporal-data" title="3.2.6 Lists of Temporal Data" class="md-nav__link">
    3.2.6 Lists of Temporal Data
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#33-empty-and-singleton-lists" title="3.3 Empty and Singleton Lists" class="md-nav__link">
    3.3 Empty and Singleton Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#331-the-general-empty-list" title="3.3.1 The General Empty List" class="md-nav__link">
    3.3.1 The General Empty List
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#332-singleton-lists" title="3.3.2 Singleton Lists" class="md-nav__link">
    3.3.2 Singleton Lists
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#34-indexing" title="3.4 Indexing" class="md-nav__link">
    3.4 Indexing
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#341-index-notation" title="3.4.1 Index Notation" class="md-nav__link">
    3.4.1 Index Notation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#342-indexed-assignment" title="3.4.2 Indexed Assignment" class="md-nav__link">
    3.4.2 Indexed Assignment
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#343-indexing-domain" title="3.4.3 Indexing Domain" class="md-nav__link">
    3.4.3 Indexing Domain
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#344-empty-index-and-null-item" title="3.4.4 Empty Index and Null Item" class="md-nav__link">
    3.4.4 Empty Index and Null Item
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#345-lists-with-expressions" title="3.4.5 Lists with Expressions" class="md-nav__link">
    3.4.5 Lists with Expressions
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#35-combining-lists" title="3.5 Combining Lists" class="md-nav__link">
    3.5 Combining Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#351-joining-with" title="3.5.1 Joining with ," class="md-nav__link">
    3.5.1 Joining with ,
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#352-merging-with" title="3.5.2 Merging with ^" class="md-nav__link">
    3.5.2 Merging with ^
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#36-lists-as-maps" title="3.6 Lists as Maps" class="md-nav__link">
    3.6 Lists as Maps
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#37-nesting" title="3.7 Nesting" class="md-nav__link">
    3.7 Nesting
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#371-depth" title="3.7.1 Depth" class="md-nav__link">
    3.7.1 Depth
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#372-pictorial-representation" title="3.7.2 Pictorial Representation" class="md-nav__link">
    3.7.2 Pictorial Representation
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#373-examples" title="3.7.3 Examples" class="md-nav__link">
    3.7.3 Examples
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#38-iterated-indexing-and-indexing-at-depth" title="3.8 Iterated Indexing and Indexing at Depth" class="md-nav__link">
    3.8 Iterated Indexing and Indexing at Depth
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#381-iterated-item-indexing" title="3.8.1 Iterated Item Indexing" class="md-nav__link">
    3.8.1 Iterated Item Indexing
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#382-indexing-at-depth" title="3.8.2 Indexing at Depth" class="md-nav__link">
    3.8.2 Indexing at Depth
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#39-indexing-with-lists" title="3.9 Indexing with Lists" class="md-nav__link">
    3.9 Indexing with Lists
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#391-retrieving-multiple-items" title="3.9.1 Retrieving Multiple Items" class="md-nav__link">
    3.9.1 Retrieving Multiple Items
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#392-indexing-via-a-variable" title="3.9.2 Indexing via a Variable" class="md-nav__link">
    3.9.2 Indexing via a Variable
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#393-indexing-with-nested-lists" title="3.9.3 Indexing with Nested Lists" class="md-nav__link">
    3.9.3 Indexing with Nested Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#394-assignment-with-list-indexing" title="3.9.4 Assignment with List Indexing" class="md-nav__link">
    3.9.4 Assignment with List Indexing
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#395-juxtaposition" title="3.9.5 Juxtaposition" class="md-nav__link">
    3.9.5 Juxtaposition
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#396-find" title="3.9.6 Find (?)" class="md-nav__link">
    3.9.6 Find (?)
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#310-elided-indices" title="3.10 Elided Indices" class="md-nav__link">
    3.10 Elided Indices
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3101-eliding-indices-for-a-matrix" title="3.10.1 Eliding Indices for a Matrix" class="md-nav__link">
    3.10.1 Eliding Indices for a Matrix
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3102-eliding-indices-for-deeply-nested-lists" title="3.10.2 Eliding Indices for Deeply Nested Lists" class="md-nav__link">
    3.10.2 Eliding Indices for Deeply Nested Lists
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#311-rectangular-lists-and-matrices" title="3.11 Rectangular Lists and Matrices" class="md-nav__link">
    3.11 Rectangular Lists and Matrices
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3111-rectangular-lists" title="3.11.1 Rectangular Lists" class="md-nav__link">
    3.11.1 Rectangular Lists
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3112-formal-definition-of-matrices" title="3.11.2 Formal Definition of Matrices" class="md-nav__link">
    3.11.2 Formal Definition of Matrices
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3113-two-and-three-dimensional-matrices" title="3.11.3 Two- and Three-Dimensional Matrices" class="md-nav__link">
    3.11.3 Two- and Three-Dimensional Matrices
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#3114-matrix-flexibility" title="3.11.4 Matrix Flexibility" class="md-nav__link">
    3.11.4 Matrix Flexibility
  </a>
  
</li>
      
        <li class="md-nav__item">
  <a href="3_Lists.1#312-useful-list-operations" title="3.12 Useful List Operations" class="md-nav__link">
    3.12 Useful List Operations
  </a>
  
    <nav class="md-nav">
      <ul class="md-nav__list">
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3121-til" title="3.12.1 til" class="md-nav__link">
    3.12.1 til
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3122-distinct" title="3.12.2 distinct" class="md-nav__link">
    3.12.2 distinct
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3123-where" title="3.12.3 where" class="md-nav__link">
    3.12.3 where
  </a>
  
</li>
        
          <li class="md-nav__item">
  <a href="3_Lists.1#3124-group" title="3.12.4 group" class="md-nav__link">
    3.12.4 group
  </a>
  
</li>
        
      </ul>
    </nav>
  
</li>
      
      
      
      
      
    </ul>
  
</nav>
                  </div>
                </div>
              </div>
            
          
          <div class="md-content">
            <article class="md-content__inner md-typeset">
              
                
                
                <h1 id="3-lists">3. Lists<a class="headerlink" href="3_Lists.1#3-lists" title="Permanent link">&para;</a></h1>
<h2 id="30-overview">3.0 Overview<a class="headerlink" href="3_Lists.1#30-overview" title="Permanent link">&para;</a></h2>
<p>All data structures in q are ultimately built from lists: a dictionary is a pair of lists; a table is a special dictionary; a keyed table is a pair of tables. Thus it is important to have a thorough grounding in lists.</p>
<p>All lists are equal but some lists are more equal than others. These are the lists of atoms of homogenous type, called <em>simple lists</em> – known in mathematics as vectors. They have optimum storage and performance characteristics.</p>
<p>While q’s list operations are similar to those in other functional languages, lists are stored and processed quite differently.</p>
<ul>
<li>They are not stored as singly-linked lists under the covers. Simple lists occupy contiguous storage and general lists are pointers in contiguous storage.</li>
<li>Appending items to the end rather than “cons”-ing to the front.</li>
<li>Efficient direct item access is available via indexing.</li>
<li>A general list can hold items of different type without resorting to a union (sum) type.</li>
</ul>
<p>It may be instructive to think of q lists as dynamically allocated arrays.</p>
<h2 id="31-introduction-to-lists">3.1 Introduction to Lists<a class="headerlink" href="3_Lists.1#31-introduction-to-lists" title="Permanent link">&para;</a></h2>
<p>A list is an ordered collection. “A collection of what?” you ask. More precisely, a list is recursively defined as an ordered collection of atoms and other lists. We pay special attention to the case in which the list comprises atoms of uniform type.</p>
<h3 id="311-list-definition-and-assignment">3.1.1 List Definition and Assignment<a class="headerlink" href="3_Lists.1#311-list-definition-and-assignment" title="Permanent link">&para;</a></h3>
<p>A (<em>general</em>) <em>list</em> is an ordered collection of q data. The members of the collection are its <em>items</em>. The notation for a general list encloses its items within matching parentheses and separates them with semi-colons.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Whitespace in list notation is optional. In what follows, we shall often insert optional whitespace after the semicolon separators for readability.</p>
</div>
<pre><code class="q">q)(1; 1.1; `1)
_
q)(1;2;3)
_
q)(&quot;a&quot;;&quot;b&quot;;&quot;c&quot;;&quot;d&quot;)
_
q)(`Life;`the;`Universe;`and;`Everything)
_
q)(-10.0; 3.1415e; 1b; `abc; &quot;z&quot;)
_
q)((1; 2; 3); (4; 5))
_
q)((1; 2; 3); (`1; &quot;2&quot;; 3); 4.4)
_
</code></pre>

<p>If you diligently entered each of these examples in your console, you have noticed that q does not always echo what you type. The initial and last three lists are <em>general</em> lists, meaning they are not homogenous atoms. This could mean atoms of mixed type, nested lists of uniform type, or atoms and nested lists of mixed type.</p>
<p>Items in a list are sequenced from left to right, providing an inherent order. The lists <code>1;2</code> and <code>2;1</code> are different. SQL is based on sets, which are inherently unordered. This distinction leads to some subtle differences between the semantics of queries on q tables versus the analogous SQL queries. The inherent ordering of lists makes large time series processing natural and fast in q, while it is cumbersome and slow in standard SQL due to the need to place things in order.</p>
<p>Lists can be assigned to variables exactly like atoms.</p>
<pre><code class="q">q)L1:(1;2;3)
q)L2:(&quot;z&quot;;&quot;a&quot;;&quot;p&quot;;&quot;h&quot;;&quot;o&quot;;&quot;d&quot;)
q)L3:((1; 2; 3); (`1; &quot;2&quot;; 3); 4.4)
</code></pre>

<h3 id="312-count">3.1.2 count<a class="headerlink" href="3_Lists.1#312-count" title="Permanent link">&para;</a></h3>
<p>The number of items in a list is its <em>count</em>. You obtain the count of a list by asking for it with the monadic function <code>count</code>.</p>
<pre><code class="q">q)count (1; 2; 3)
3
q)count L1
_
</code></pre>

<p>This is our first encounter with a q function (or operator), which we will learn about in Chapters 4 and 5. For now, we need only understand that <code>count</code> returns a long equal to the number of items in the list to its right.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The maximum number of items for a list in q3.* is 2<sup>64</sup>-1. In q2.* it was 2 billion.</p>
</div>
<p>Observe that the count of an atom is 1 even though an atom is not a list.</p>
<pre><code class="q">q)count 42
1
q)count `zaphod
_
</code></pre>

<p>Other useful operations are provided by <code>first</code> and <code>last</code> that return the first and last item in a list, respectively.</p>
<pre><code class="q">q)first (1; 2; 3)
1
q)last (1; 2; 3)
3
</code></pre>

<h2 id="32-simple-lists">3.2 Simple Lists<a class="headerlink" href="3_Lists.1#32-simple-lists" title="Permanent link">&para;</a></h2>
<p>A list of atoms of a uniform type, called a <em>simple</em> list, corresponds to the mathematical notion of a <em>vector</em>. Such lists are treated specially in q. They have a simplified notation, take less storage and compute faster than general lists.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You can always use general list notation, even for simple lists.</p>
</div>
<p>Whenever q recognizes that the items of a list are homogenous atoms, it dynamically converts to a simple list without asking for permission. It most cases, the storage and performance advantages justify the imposition. However, in some cases – such as deletion of an outlier item of non-uniform type – this can cause a programming headache because the list will no longer allow appends or updates with items that do not conform to the resulting uniform type.</p>
<h3 id="321-simple-integer-lists">3.2.1 Simple Integer Lists<a class="headerlink" href="3_Lists.1#321-simple-integer-lists" title="Permanent link">&para;</a></h3>
<p>The console display of a simple list of any numeric type omits the enclosing parentheses and replaces the separating semi-colons with (required) blanks. The following two expressions define the same list, as q verifies by testing for identity using <code>~</code>.</p>
<pre><code class="q">q)(100;200;300)
_
q)100 200 300
_
q)100 200 300~(100; 200 ; 300)
1b
</code></pre>

<p>The console display of the first expression demonstrates the automatic conversion to simple lists previously mentioned.</p>
<p>Similar notation, with the addition of a single trailing type indicator, is used for simple lists of short and int.</p>
<pre><code class="q">q)(1h; 2h; 3h)
1 2 3h
q)(100i; 200i; 300i)
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The trailing type indicator in the console display of a simple list applies to the entire list and not just the last item of the list; otherwise, the list would not be simple and would be displayed in general form:
<pre><code class="language-q">
q)(1; 2; 3h)
1
2
3h
</code></pre></p>
</div>
<h3 id="322-simple-floating-point-lists">3.2.2 Simple Floating Point Lists<a class="headerlink" href="3_Lists.1#322-simple-floating-point-lists" title="Permanent link">&para;</a></h3>
<p>Simple lists of float and real are notated the same as integral lists.</p>
<pre><code class="q">q)(123.4567; 9876.543; 99.0)
123.4567 9876.543 99
q)123.4567 9876.543 99
_
</code></pre>

<p>Observe that the q console suppresses the decimal point when displaying a float having zero(es) to the right of the decimal; but the value is not an integer. This notational efficiency for float display means that a list of floats having no decimal parts displays with a trailing ‘f’.</p>
<pre><code class="q">q)1.0 2.0 3.0
1 2 3f
q)1 2 3f~1.0 2.0 3.0
_
</code></pre>

<p>Also observe that if you include what appears to be an integer in a list of float, q assumes that you are following its convention by merely omitting redundant data to the right of the decimal. That is, you get a list of float and not a general list.</p>
<pre><code class="q">q)1.1 2 3.3~1.1 2.0 3.3
_
</code></pre>

<h3 id="323-simple-binary-lists">3.2.3 Simple Binary Lists<a class="headerlink" href="3_Lists.1#323-simple-binary-lists" title="Permanent link">&para;</a></h3>
<p>The abbreviated notation for a simple list of boolean or byte data juxtaposes the individual data values together with <strong>no</strong> whitespace between. The ‘b’ type indicator for boolean trails the list.</p>
<pre><code class="q">q)(0b;1b;0b;1b;1b)
01011b
q)01011b
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>A simple list of boolean atoms requires the same number of bytes to store as it has atoms. While the simplified notation is suggestive of a bit mask, multiple bits are not compressed to fit inside a single byte. The boolean list above uses 5 bytes of storage.</p>
</div>
<p>The ‘0x’ indicator for a simple list of byte precedes the list.</p>
<pre><code class="q">q)(0x20;0xa1;0xff)
0x20a1ff
q)0x20a1ff~(0x20;0xa1;0xff)
_
</code></pre>

<p>The display of a simple list of GUIDs is the same is that of integers – i.e., the values are separated by spaces.</p>
<pre><code class="q">q)3?0Ng
_
</code></pre>

<h3 id="324-simple-symbol-lists">3.2.4 Simple Symbol Lists<a class="headerlink" href="3_Lists.1#324-simple-symbol-lists" title="Permanent link">&para;</a></h3>
<p>The abbreviated notation for simple lists of symbols juxtaposes the individual atoms with no intervening whitespace.</p>
<pre><code class="q">q)(`Life;`the;`Universe;`and;`Everything)
`Life`the`Universe`and`Everything
q)`Life`the`Universe`and`Everything
_
</code></pre>

<p>Inserting spaces between symbol atoms causes an error.</p>
<pre><code class="q">q)`bad `news
'bad
</code></pre>

<h3 id="325-simple-char-lists-and-strings">3.2.5 Simple char Lists and Strings<a class="headerlink" href="3_Lists.1#325-simple-char-lists-and-strings" title="Permanent link">&para;</a></h3>
<p>The simplified notation for a list of char looks just like a string in most languages, with the juxtaposed sequence of characters enclosed in double quotes.</p>
<pre><code class="q">q)(&quot;s&quot;; &quot;t&quot;; &quot;r&quot;; &quot;i&quot;; &quot;n&quot;; &quot;g&quot;)
&quot;string&quot;
q)&quot;string&quot;
_
</code></pre>

<p>A simple list of char is actually called a <em>string</em>; however, it does not have the atomic semantics of a string in most languages. Since it is a list of char, <strong>not</strong> an atom, you cannot ask if two strings of different lengths are equal. You <strong>can</strong> ask if they are identical (as you can with any two q entities).</p>
<pre><code class="q">q)&quot;string&quot;=&quot;text&quot;
'length
q)&quot;string&quot;~&quot;text&quot;
0b
</code></pre>

<h3 id="326-lists-of-temporal-data">3.2.6 Lists of Temporal Data<a class="headerlink" href="3_Lists.1#326-lists-of-temporal-data" title="Permanent link">&para;</a></h3>
<p>Since they are really integers, the abbreviated form for simple temporal lists separates items with a space.</p>
<pre><code class="q">q)(2000.01.01; 2001.01.01; 2002.01.01)
_
q)(00:00:00.000; 00:00:01.000; 00:00:02.000)
_
</code></pre>

<p>Specifying a list of mixed temporal types has a different behavior from that of a list of mixed numeric types. In this case, the list takes the type of the first item in the list; other items are widened or narrowed to match.</p>
<pre><code class="q">q)12:34 01:02:03
12:34:00 01:02:03
q)01:02:03 12:34
_
</code></pre>

<p>To force the type of a mixed list of temporal values, append a type specifier.</p>
<pre><code class="q">q)01:02:03 12:34 11:59:59.999u
01:02 12:34 11:59
</code></pre>

<h2 id="33-empty-and-singleton-lists">3.3 Empty and Singleton Lists<a class="headerlink" href="3_Lists.1#33-empty-and-singleton-lists" title="Permanent link">&para;</a></h2>
<p>Lists with one or zero items merit special consideration, especially since q’s notation and display are not exactly intuitive.</p>
<h3 id="331-the-general-empty-list">3.3.1 The General Empty List<a class="headerlink" href="3_Lists.1#331-the-general-empty-list" title="Permanent link">&para;</a></h3>
<p>It is useful to have lists with no items. A pair of parentheses enclosing nothing (except optional whitespace) denotes the general empty list, which (annoyingly) has no console display.</p>
<pre><code class="q">q)()
q)
</code></pre>

<p>We shall see in <a href="6_Functions.1#62-call-by-name">§6.2</a> that it is possible to define an empty list with a specific type, so that only items of that type can be added to it.</p>
<div class="admonition advanced">
<p class="admonition-title">Advanced</p>
<p>If you want to force the display of an empty list, use the q utility <a href="http://code.kx.com/q/ref/internal/#-3x-qs"><code>-3!</code></a>, which converts any q entity into a string suitable for display. Perhaps this utility should be called the “wizard of Oz” operator since it reveals what’s behind the curtain.
<pre><code class="language-q">
q)L:()
q)L
q)-3!L
"()"
</code></pre></p>
</div>
<h3 id="332-singleton-lists">3.3.2 Singleton Lists<a class="headerlink" href="3_Lists.1#332-singleton-lists" title="Permanent link">&para;</a></h3>
<p>A <em>singleton</em> is a list containing a single item. As any postal clerk will tell you, an item in a box is not the same as an unboxed item. So an atom and a singleton containing that atom are different.</p>
<p>The syntax of a singleton presents a notational conundrum for q. We might expect to write the singleton list containing 42 as <code>(42)</code> but we cannot. The issue arises from q’s use of parentheses both for list demarcation and for the usual mathematical grouping in expressions. The latter leads to the following sequence of arithmetic reductions.</p>
<p><code>(40+2)</code> <code>(42)</code> <code>42</code></p>
<p>This forces <code>(42)</code> to be the <strong>atom</strong> 42.</p>
<p>Unfortunately, there is no way to type a singleton literal. Singletons are created by the function <code>enlist</code>, which “boxes” its argument into a list with one item. Note that it manages to avoid the usual q predilection for aggressively short names.</p>
<pre><code class="q">q)enlist 42
,42
</code></pre>

<p>Observe that the console display of a singleton list uses the k form of enlist – i.e., monadic <code>,</code>. Don’t be fooled: we can’t use this in q.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>A string with a single character cannot be written syntactically as “a” – this is a character atom. Use <code>enlist</code>. This is a common error for qbies.
<pre><code class="language-q">
q)"a"
<em>
q)enlist "a"
</em>
</code></pre></p>
</div>
<p>A singleton need not contain an atom as its sole item; it can be any q entity.</p>
<pre><code class="q">q)enlist 1 2 3
1 2 3
q)enlist (10 20 30; `a`b`c)
10 20 30 a b c
</code></pre>

<p>Observe that the console display is not consistent with showing <code>,</code> and sometimes is downright confusing.</p>
<h2 id="34-indexing">3.4 Indexing<a class="headerlink" href="3_Lists.1#34-indexing" title="Permanent link">&para;</a></h2>
<p>A list is sequenced from left-to-right in the position of its items. The offset of an item from the beginning of the list is called its <em>index</em>. The initial item has index 0, the second item has index 1, etc. Thus a list of count <em>n</em> has items at indices 0 through <em>n</em> - 1.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>There is no item at index <code>n</code>. This is a common qbie mistake.</p>
</div>
<h3 id="341-index-notation">3.4.1 Index Notation<a class="headerlink" href="3_Lists.1#341-index-notation" title="Permanent link">&para;</a></h3>
<p>To access the item at index <em>i</em> in a list, follow the list immediately with <code>[i]</code>. This is called <em>item indexing</em>. For example,</p>
<pre><code class="q">q)(100; 200; 300)[0]
100
q)100 200 300[0]
100
q)L:100 200 300
q)L[0]
100
q)L[1]
_
q)L[3] / index out of bounds returns null value
_
q)L[2]
_
</code></pre>

<h3 id="342-indexed-assignment">3.4.2 Indexed Assignment<a class="headerlink" href="3_Lists.1#342-indexed-assignment" title="Permanent link">&para;</a></h3>
<p>Items in a list can also be assigned via item indexing. Thus,</p>
<pre><code class="q">q)L:1 2 3
q)L[1]:42
q)L
1 42 3
</code></pre>

<div class="admonition important">
<p class="admonition-title">Important</p>
<p>Index assignment into a simple list enforces strict type matching with no type promotion. Otherwise put, when you assign an item into a simple list, the type must match exactly – i.e., a narrower type is not widened.
<pre><code class="language-q">
q)L:100 200 300
q)L[1]:42h
'type
</code></pre></p>
</div>
<p>This may come as a surprise if you are accustomed to numeric values always being promoted in a dynamically typed language – e.g., q itself.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Should you find exceptions to this in some releases of q3.*, do not count on them being there in future releases!</p>
</div>
<h3 id="343-indexing-domain">3.4.3 Indexing Domain<a class="headerlink" href="3_Lists.1#343-indexing-domain" title="Permanent link">&para;</a></h3>
<p>Providing an invalid data type for the index results in an error.</p>
<pre><code class="q">q)L:(-10.0; 3.1415e; 1b; `abc; &quot;z&quot;)
q)L[1.0]
'type
</code></pre>

<p>In contrast, if you index outside the proper bounds of the list, the result is <strong>not</strong> an error. Instead you get a null value, indicating “missing data.” Specifically, indexing outside the range of 0 to <code>(count L) – 1</code> yields a null of the type of the item at index 0. This is the most efficient thing to return in the case of a general list where there is no canonical item type.</p>
<pre><code class="q">q)L1:1 2 3 4
q)L1[4]
0N
q)L2:1.1 2.2 3.3
q)L2[-1]
0n
q)L3:(`1; 2; 3.3)
q)L3[0W]
`
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Pay special attention to the first example above that indexes the list at its count. Indexing one position past the end of the list is easy for qbies, especially if you’re not accustomed to indexing relative to 0.</p>
</div>
<h3 id="344-empty-index-and-null-item">3.4.4 Empty Index and Null Item<a class="headerlink" href="3_Lists.1#344-empty-index-and-null-item" title="Permanent link">&para;</a></h3>
<p>An omitted index returns the entire list.</p>
<pre><code class="q">q)L:10 20 30 40
q)L[]
10 20 30 40
</code></pre>

<p>An omitted index is <strong>not</strong> the same as indexing with an empty list. The latter returns an empty list, so we use the <code>-3!</code> utility to reveal its display.</p>
<pre><code class="q">q)-3!L[()]
&quot;()&quot;
</code></pre>

<p>The syntactic form double-colon <code>::</code> denotes the nil item, which allows explicit notation or programmatic generation of an empty index.</p>
<pre><code class="q">q)L[::]
_
</code></pre>

<div class="admonition advanced">
<p class="admonition-title">Advanced</p>
<p>The type of the nil item does not match any other type in q. Consequently, inclusion of the nil item in a list forces the list to be general.
<pre><code class="language-q">
q)L:(::; 1 ; 2 ; 3)
q)type L
0h
q)-3!L[0]
"::"
</code></pre></p>
</div>
<p>This is one way to avoid a nasty surprise when q would otherwise automatically convert a list to simple type. A simple case is when you reassign the only non-conforming item in the list.</p>
<pre><code class="q">q)L:(1; 2; 3; `a)
q)L[3]:4
q)L
1 2 3 4
q)L[3]:`a
'type
</code></pre>

<p>After the reassignment you can no longer assign <code>`a</code> back into the list in its original position. One way to avoid this is by placing <code>::</code> in the list as a guard.</p>
<pre><code class="q">q)L:(::; 1 ; 2 ; 3; `a)
q)L[4]:4
q)L[4]:`a
q)
</code></pre>

<p>A drawback of this technique is that you must avoid passing <code>::</code> on to expressions that use the actual data in the list.</p>
<h3 id="345-lists-with-expressions">3.4.5 Lists with Expressions<a class="headerlink" href="3_Lists.1#345-lists-with-expressions" title="Permanent link">&para;</a></h3>
<p>Any valid q expression can occur in list construction.</p>
<pre><code class="q">q)a:42
q)b:43
q)(a; b)
42 43
q)L1:1 2 3
q)L2:40 50
q)(L1; L2)
q)(count L1; sum L2)
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>You cannot use the abbreviated notation of simple lists with variables.
<pre><code class="language-q">
q)a:42
q)b:43
q)a b
': Bad file descriptor|
</code></pre></p>
</div>
<p>The reason for this cryptic error message will be apparent when we deal with files later.</p>
<h2 id="35-combining-lists">3.5 Combining Lists<a class="headerlink" href="3_Lists.1#35-combining-lists" title="Permanent link">&para;</a></h2>
<h3 id="351-joining-with">3.5.1 Joining with <code>,</code><a class="headerlink" href="3_Lists.1#351-joining-with" title="Permanent link">&para;</a></h3>
<p>We scoop the presentation on operators in the next chapter to describe the <em>join</em> operator <code>,</code>. Its result is a new list in which (a copy of) the right operand is appended to the end of (a copy of) the left operand. Join accepts an atom in either argument – i.e., as if the corresponding singleton had been supplied.</p>
<pre><code class="q">q)1 2 3,4 5
1 2 3 4 5
q)1,2 3 4
1 2 3 4
q)1 2 3,4
1 2 3 4
</code></pre>

<p>Observe that if the arguments are not of uniform type, the result is a general list.</p>
<pre><code class="q">q)1 2 3,4.4 5.5
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>To ensure that a q entity  becomes a list, use either <code>(),x</code> or <code>x,()</code>. This leaves a list unchanged but effectively enlists an atom. Such a seemingly trivial expression is actually useful and is our first example of a q idiom. You cannot use <code>enlist x</code> for the same purpose. Why not?</p>
</div>
<h3 id="352-merging-with">3.5.2 Merging with <code>^</code><a class="headerlink" href="3_Lists.1#352-merging-with" title="Permanent link">&para;</a></h3>
<p>Another way to combine two lists of the same length is by coalescing them with <code>^</code>. The result is given by the rule that the right item prevails over the corresponding left item except when the right item is null.</p>
<pre><code class="q">q)L1:10 0N 30
q)L2:100 200 0N
q)L1^L2
100 200 30
</code></pre>

<h2 id="36-lists-as-maps">3.6 Lists as Maps<a class="headerlink" href="3_Lists.1#36-lists-as-maps" title="Permanent link">&para;</a></h2>
<p>Thus far, we have considered a list as data – i.e., a static collection of its items. We can also view it as a mathematical mapping provided by item indexing. Specifically, a list provides a map whose domain is integers and whose codomain is the collection of its items (supplemented with a null value). The list map assigns the output value <code>L[i]</code> to the input value <code>i</code>.</p>
<p>i | – &gt; L[i]</p>
<p>Here are the I/O tables for some basic lists.</p>
<pre><code class="q">101 102 103 104
</code></pre>

<table>
<thead>
<tr>
<th><em>I</em></th>
<th><em>O</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>101</td>
</tr>
<tr>
<td>1</td>
<td>102</td>
</tr>
<tr>
<td>2</td>
<td>103</td>
</tr>
<tr>
<td>3</td>
<td>104</td>
</tr>
</tbody>
</table>
<pre><code class="q">(`a; 123.45; 1b)
</code></pre>

<table>
<thead>
<tr>
<th><em>I</em></th>
<th><em>O</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>`a</td>
</tr>
<tr>
<td>1</td>
<td>123.45</td>
</tr>
<tr>
<td>2</td>
<td>1b</td>
</tr>
</tbody>
</table>
<pre><code class="q">(1 2; 3 4)
</code></pre>

<table>
<thead>
<tr>
<th><em>I</em></th>
<th><em>O</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1 2</td>
</tr>
<tr>
<td>1</td>
<td>3 4</td>
</tr>
</tbody>
</table>
<p>The codomains of the first two examples are collection of atoms. The last example has a codomain comprised of lists.</p>
<p>A list not only acts like a map, it <strong>is</strong> a monadic map whose notation is the same as function application. This is a useful way of looking at things. We shall see in <a href="4_Operators.1">Chapter 4</a> that a nested list can be viewed as a multivalent map.</p>
<p>From the perspective of lists as maps, the fact that indexing outside the bounds of a list returns a null means the map is implicitly extended to the domain of all integers with null output value outside the list proper.</p>
<h2 id="37-nesting">3.7 Nesting<a class="headerlink" href="3_Lists.1#37-nesting" title="Permanent link">&para;</a></h2>
<p>Data complexity is built by using lists as items of lists.</p>
<h3 id="371-depth">3.7.1 Depth<a class="headerlink" href="3_Lists.1#371-depth" title="Permanent link">&para;</a></h3>
<p>Now that we’re comfortable with simple lists, we return to general lists. <em>Nested</em> lists have item(s) that are themselves lists. The number of levels of nesting for a list is called its <em>depth</em>. Informally, the depth measures how much repeated indexing is necessary to arrive at only atoms. Atoms have depth 0 and simple lists have depth 1.</p>
<p>The notation of complex lists is reflected in nested parentheses. For pedagogical purposes, in this section only, we shall often use general notation to define even simple lists since the parentheses make things manifest. However, the console always displays lists in the most concise form.</p>
<p>Following is a list of depth 2 that has three items, the first two being atoms and the last a list. We also show its simplified notation.</p>
<pre><code class="q">q)L:(1;2;(100;200))
q)count L
_
q)L:(1;2;100 200)
_
q)count L
3
q)L[0]
_
q)L[1]
_
q)L[2]
100 200
</code></pre>

<h3 id="372-pictorial-representation">3.7.2 Pictorial Representation<a class="headerlink" href="3_Lists.1#372-pictorial-representation" title="Permanent link">&para;</a></h3>
<p>We present a pictorial representation that may help in visualizing levels of nesting. An atom is represented as a circle containing its value. A list is represented as a box containing its items. A general list is a box containing boxes and atoms.</p>
<p><img alt="Atoms and lists" src="img/qfm002.png" /></p>
<h3 id="373-examples">3.7.3 Examples<a class="headerlink" href="3_Lists.1#373-examples" title="Permanent link">&para;</a></h3>
<p>Following is a list of depth 2 with two elements, each of which is a simple list.</p>
<pre><code class="q">q)L2:((1;2;3);(`ab;`c))
q)count L2
_
</code></pre>

<p>Following is a list of depth 2 having three elements, two of which are general lists and one is an atom.</p>
<pre><code class="q">q)L3:((1; 2h; 3j); (&quot;a&quot;; `bc`de); 1.23)
q)count L3
_
q)L3[1]
_
q)count L3[1]
_
</code></pre>

<p>Following is a list of depth 2 having one item that is a simple list.</p>
<pre><code class="q">q)L4:enlist 1 2 3 4
q)count L4
_
q)count L4[0]
_
</code></pre>

<p>Following is a “rectangular” list that can be thought of as the 3×4 matrix its display resembles.</p>
<pre><code class="q">q)m:((11; 12; 13; 14); (21; 22; 23; 24); (31; 32; 33; 34))
q)m
11 12 13 14
21 22 23 24
31 32 33 34
q)m[0]
_
q)m[1]
_
q)m[1][0]
</code></pre>

<h2 id="38-iterated-indexing-and-indexing-at-depth">3.8 Iterated Indexing and Indexing at Depth<a class="headerlink" href="3_Lists.1#38-iterated-indexing-and-indexing-at-depth" title="Permanent link">&para;</a></h2>
<p>In the examples above, we saw that the display of nested lists suggests arrays from other languages. You can indeed think of them as “ragged” arrays, as long you are careful about the iterated indexing. Indexing at depth is an alternate notation that suggests nested lists can also be viewed as higher-dimensional arrays.</p>
<h3 id="381-iterated-item-indexing">3.8.1 Iterated Item Indexing<a class="headerlink" href="3_Lists.1#381-iterated-item-indexing" title="Permanent link">&para;</a></h3>
<p>Retrieving an item in a nested list via a single index retrieves a top-most item.</p>
<pre><code class="q">q)L:(1; (100; 200; (1000; 2000; 3000; 4000)))
q)L[0]
_
q)L[1]
100
200
1000 2000 3000 4000
</code></pre>

<p>Interpreting list indexing as function application for positional retrieval, we can read the last line,</p>
<blockquote>
<p>Retrieve the item at index 1 from L</p>
</blockquote>
<p>Since the result <code>L[1]</code> is itself a list, we can also retrieve its items via indexing. For example,</p>
<pre><code class="q">q)L[1][2]
1000 2000 3000 4000
</code></pre>

<p>Read this as,</p>
<blockquote>
<p>Retrieve the item at index 2 from the item at index 1 in L</p>
</blockquote>
<p>We can once again index into this result.</p>
<pre><code class="q">q)L[1][2][0]
1000
</code></pre>

<p>Read this as,</p>
<blockquote>
<p>Retrieve the item at index 0 from the item at index 2</p>
</blockquote>
<pre><code class="q">in the item at index 1 in L
</code></pre>

<h3 id="382-indexing-at-depth">3.8.2 Indexing at Depth<a class="headerlink" href="3_Lists.1#382-indexing-at-depth" title="Permanent link">&para;</a></h3>
<p>There is an alternate notation for iterated indexing into a nested list. It is strictly syntactic sugar and amounts to the same thing under the covers. This notation is called <em>indexing at depth</em> and it looks exactly like application of a multi-valent function (which, in fact, it is). The previous retrieval can also be written as,</p>
<pre><code class="q">q)L[1;2;0]
_
</code></pre>

<p>From one point of view, indexing at depth simplifies the notation for retrieval of inner items from a nested list.</p>
<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>The semicolons in indexing at depth notation might make it appear that the collection of indices is a list. It is not, although we shall see later a way to perform indexing at depth in which the indices are a list. Also, don’t confuse the semicolons with commas, which is a common qbie mistake.</p>
</div>
<p>Assignment via index at depth works but assignment does <strong>not</strong> work with iterated indexing.</p>
<pre><code class="q">q)L:(1; (100; 200; (1000 2000 3000 4000)))
q)L[1; 2; 0]: 999
q)L
_
q)L[1][2][0]:42
'assign
</code></pre>

<p>The last expression fails essentially because the intermediate retrievals are ephemeral – i.e., they not addressable entities.</p>
<p>To confirm that the notation for indexing at depth is reasonable, we return to our “matrix” example.</p>
<pre><code class="q">q)m:((11; 12; 13; 14); (21; 22; 23; 24); (31; 32; 33; 34))
q)m
_
q)m[0][0]
11
q)m[0; 0]
11
q)m[0; 1]
_
q)m[1; 2]
_
</code></pre>

<p>The indexing at depth notation suggests thinking of <code>m</code> as a multi-dimensional matrix, whereas repeated single indexing suggests thinking of it as an array of arrays. <em>Chacun à son goût</em>.</p>
<div class="admonition advanced">
<p class="admonition-title">Advanced</p>
<p>It is possible to create a (possibly ragged) array of a given number of rows or columns from a flat list using the reshape operator <code>#</code> by specifying <code>0N</code> (missing data) for the number of rows or columns in the left operand.
<pre><code class="language-q">
q)2 0N#til 10
0 1 2 3 4
5 6 7 8 9
q)0N 3#til 10
0 1 2
3 4 5
6 7 8
,9
</code></pre></p>
</div>
<h2 id="39-indexing-with-lists">3.9 Indexing with Lists<a class="headerlink" href="3_Lists.1#39-indexing-with-lists" title="Permanent link">&para;</a></h2>
<p>As a vector language, q prefers to deal with lists whenever possible. To this end, there is no reason to restrict list retrieval to one item at a time. Instead, we can ask for a list of items by passing a list of indices.</p>
<h3 id="391-retrieving-multiple-items">3.9.1 Retrieving Multiple Items<a class="headerlink" href="3_Lists.1#391-retrieving-multiple-items" title="Permanent link">&para;</a></h3>
<p>In this section, we begin to see the power of q as a vector language. We start with,</p>
<pre><code class="q">q)L:100 200 300 400
</code></pre>

<p>We know how to index single items of the list.</p>
<pre><code class="q">q)L[0]
100
q)L[2]
_
</code></pre>

<p>By extension, we can retrieve a list of multiple items via multiple indices. For simplicity we use simple list notation for the indices.</p>
<pre><code class="q">q)L[0 2]
100 300
</code></pre>

<p>The indices can be in any order, or even be duplicated and the corresponding items are retrieved. The shape of the output conforms to the input.</p>
<pre><code class="q">q)L[3 2 0 1]
_
q)L[0 2 0]
_
</code></pre>

<p>Here are some examples of indexing into literal lists.</p>
<pre><code class="q">q)01101011b[0 2 4]
011b
q)&quot;beeblebrox&quot;[0 7 8]
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Using a list as an index demonstrates why getting the semi-colon separators right is essential when indexing at depth. Leaving them out or using commas effectively specifies multiple indices, and you will get a corresponding list of values from the top level.</p>
</div>
<h3 id="392-indexing-via-a-variable">3.9.2 Indexing via a Variable<a class="headerlink" href="3_Lists.1#392-indexing-via-a-variable" title="Permanent link">&para;</a></h3>
<p>When retrieving items via multiple indices, the indices can live in a variable.</p>
<pre><code class="q">q)L
100 200 300 400
q)I:0 2
q)L[I]
100 300
</code></pre>

<h3 id="393-indexing-with-nested-lists">3.9.3 Indexing with Nested Lists<a class="headerlink" href="3_Lists.1#393-indexing-with-nested-lists" title="Permanent link">&para;</a></h3>
<p>Observe that in our examples of list indexing, the result of index retrieval has the same shape as the index. If the index is an atom the result is an atom. When the index list was a simple list, the result was a list of the same count.</p>
<p>More generally, we can retrieve via an arbitrary collection of indices. The retrieved list has the same shape as the index list.</p>
<pre><code class="q">q)L:100 200 300 400
q)L[(0 1; 2 3)]
100 200
300 400
</code></pre>

<p>Do not confuse this with indexing at depth. In the present case all items are retrieved at the top level only</p>
<div class="admonition advanced">
<p class="admonition-title">Advanced</p>
<p>More precisely, the result of indexing via a list conforms to the index list. The notion of <em>conformability</em> of lists is defined recursively. All atoms conform. Two lists conform if they have the same number of items and each of their corresponding items conform. In plain language, two lists conform if they have the same shape.</p>
</div>
<h3 id="394-assignment-with-list-indexing">3.9.4 Assignment with List Indexing<a class="headerlink" href="3_Lists.1#394-assignment-with-list-indexing" title="Permanent link">&para;</a></h3>
<p>Recall that a list item can be (re)assigned via item indexing,</p>
<pre><code class="q">q)L:100 200 300 400
q)L[0]:100
q)L
_
</code></pre>

<p>Assignment via index extends to indexing via a simple list with the proviso that the index list and value list conform.</p>
<pre><code class="q">q)L[1 2 3]:2000 3000 4000
q)L
_
</code></pre>

<p>Assignment via a simple index list is processed in sequence – i.e., from left-to-right. Thus,</p>
<pre><code class="q">q)L[3 2 1]:999 888 777
is equivalent to,
q)L[3]:999
q)L[2]:888
q)L[1]:777
</code></pre>

<p>Consequently, in the case of a repeated item in the index list (not a swell idea), the right-most assignment prevails.</p>
<pre><code class="q">q)L:100 200 300 400
q)L[0 1 0 3]:1000 2000 3000 4000
q)L
_
</code></pre>

<p>You can assign a single value to multiple items in a list by using an atom for the assignment value. This is an example of a general phenomenon in q in which an atom is extended to conform to a list.</p>
<pre><code class="q">q)L:100 200 300 400
q)L[1 3]:999
q)L
_
</code></pre>

<h3 id="395-juxtaposition">3.9.5 Juxtaposition<a class="headerlink" href="3_Lists.1#395-juxtaposition" title="Permanent link">&para;</a></h3>
<p>Now that we’re familiar with retrieving and assigning via an index list, we introduce a simplified notation that is common in functional programming. It is permissible to leave out the brackets and juxtapose the list and index with separating whitespace (usually just a blank). Some examples follow.</p>
<pre><code class="q">q)L:100 200 300 400
q)L[0]
100
q)L 0
100
q)L[2 1]
_
q)L 2 1
_
q)I:2 1
q)L I
_
q)L ::
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>In the colloquial, “We don’t need no stinkin’ brackets!”</p>
</div>
<p>Which notation you use is a matter of personal preference. In this tutorial, we initially use brackets, since this notation is probably most comfortable for qbies coming from traditional programming. Experienced q programmers often use juxtaposition since it reduces notational density, although brackets can eliminate some parentheses.</p>
<h3 id="396-find">3.9.6 Find (?)<a class="headerlink" href="3_Lists.1#396-find" title="Permanent link">&para;</a></h3>
<p>The <em>find</em> operator is (an overload of) dyadic <code>?</code> that returns the index of the first occurrence of the right operand in the left operand.</p>
<pre><code class="q">q)1001 1002 1003?1002
1
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Since <em>find</em> maps an item to its index, it is inverse to indexing – i.e., list positional retrieval thought of as a mapping.</p>
</div>
<p>If you try to find an item that is not in the list, the result is an integer equal to the count of the list.</p>
<pre><code class="q">q)1001 1002 1003?1004
3
</code></pre>

<p>One way to think of this result is that the position of an item that is not in the list is one past the end of the list, which is where it would be if you were to append it to the list.</p>
<p>Find is atomic in the right operand meaning that it extends to lists.</p>
<pre><code class="q">q)1001 1002 1003?1003 1001
_
</code></pre>

<h2 id="310-elided-indices">3.10 Elided Indices<a class="headerlink" href="3_Lists.1#310-elided-indices" title="Permanent link">&para;</a></h2>
<h3 id="3101-eliding-indices-for-a-matrix">3.10.1 Eliding Indices for a Matrix<a class="headerlink" href="3_Lists.1#3101-eliding-indices-for-a-matrix" title="Permanent link">&para;</a></h3>
<p>We return to the situation of indexing at depth for nested lists. For simplicity, we start with a rectangular list that displays as a matrix.</p>
<pre><code class="q">q)m:(1 2 3 4; 100 200 300 400; 1000 2000 3000 4000)
q)m
_
</code></pre>

<p>Analogy with traditional matrix notation suggests that we could retrieve a row or column from <code>m</code> by providing a “partial” index at depth. This indeed works because eliding an index in any slot is equivalent to specifying all legitimate indices for that slot.</p>
<pre><code class="q">q)m[1;]
100 200 300 400
m[;3]
4 400 4000
</code></pre>

<p>Observe that eliding the last index reduces to item indexing at the top level.</p>
<pre><code class="q">q)m[1;]~m[1]
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>Because of this correspondence, it is permissible to drop the trailing semicolon. We recommend against this practice as it makes the purpose of code less evident.</p>
</div>
<p>The situation of eliding the first index is more interesting. It essentially retrieves a “column” as a slice through the top-level lists – i.e., a row.</p>
<h3 id="3102-eliding-indices-for-deeply-nested-lists">3.10.2 Eliding Indices for Deeply Nested Lists<a class="headerlink" href="3_Lists.1#3102-eliding-indices-for-deeply-nested-lists" title="Permanent link">&para;</a></h3>
<p>Let's tackle three levels of nesting. Here we can elide one or two indices in any slots.</p>
<pre><code class="q">q)L:((1 2 3;4 5 6 7);(`a`b`c`d;`z`y`x`;`0`1`2);(&quot;now&quot;;&quot;is&quot;;&quot;the&quot;))
q)L
(1 2 3;4 5 6 7)
(`a`b`c`d;`z`y`x`;`0`1`2)
(&quot;now&quot;;&quot;is&quot;;&quot;the&quot;)
q)L[;1;]
4 5 6 7
`z`y`x`
&quot;is&quot;
q)L[;;2]
3 6
`c`x`2
&quot;w e&quot;
</code></pre>

<p>Interpret <code>L[;1;]</code> as,</p>
<blockquote>
<p>Retrieve all items at index 1 of each top level list</p>
</blockquote>
<p>Interpret <code>L[;;2]</code> as,</p>
<blockquote>
<p>Retrieve the items at index 2 for each list at the second level</p>
</blockquote>
<p>Observe that in <code>L[;;2]</code> the attempt to retrieve the item at index 2 of the string <code>"is"</code> was out of bounds and so resulted in the null value <code>" "</code>. This is the source of the blank in <code>"w e"</code> of the result.</p>
<p>As the final exam for this section, let’s combine an elided index with indexing by lists to retrieve a cross-section of <code>L</code>. Try to predict the result before entering the expression into your console session.</p>
<pre><code class="q">q)L[0 2;;0 1]
_
</code></pre>

<p>Interpret this as,</p>
<blockquote>
<p>Retrieve the items at positions 0 and 1 from all columns in rows 0 and 2</p>
</blockquote>
<div class="admonition recommendation">
<p class="admonition-title">Style Recommendation</p>
<p>In general, it is permissible to elide all trailing semicolons arising from elided indices. We consider this bad practice. Looking at the notation below, would you guess that the expression after the comment arose from that to the left of it? We didn’t think so.
<pre><code class="language-q">
L[1;;] / instead of L[1]
L[;1;] / instead of L[;1]
</code></pre></p>
</div>
<h2 id="311-rectangular-lists-and-matrices">3.11 Rectangular Lists and Matrices<a class="headerlink" href="3_Lists.1#311-rectangular-lists-and-matrices" title="Permanent link">&para;</a></h2>
<h3 id="3111-rectangular-lists">3.11.1 Rectangular Lists<a class="headerlink" href="3_Lists.1#3111-rectangular-lists" title="Permanent link">&para;</a></h3>
<p>In this section, we further investigate matrix-like nested lists. A rectangular list is a list of lists all having the same count. This does not mean that a rectangular list is necessarily a traditional matrix, since there can be additional levels of nesting.</p>
<pre><code class="q">q)L:(1 2 3; (10 20; 100 200; 1000 2000))
q)L
1 2 3
10 20 100 200 1000 2000
</code></pre>

<p>A rectangular list can be transposed with <code>flip</code>, meaning that the rows and columns are reflected across the diagonal. When <code>flip</code> is applied to a rectangular list, it physically transposes the data – i.e., it allocates new storage and copies the original data in column order.</p>
<pre><code class="q">q)L:(1 2 3; 10 20 30; 100 200 300)
q)L
1 2 3
10 20 30
100 200 300
q)flip L
1 10 100
2 20 200
3 30 300
</code></pre>

<p>This effectively reverses the first and second slots in indexing at depth.</p>
<pre><code class="q">q)L:(1 2 3; 10 20 30; 100 200 300)
q)M:flip L
q)L[1;2]
30
q)M[2;1]
30
</code></pre>

<h3 id="3112-formal-definition-of-matrices">3.11.2 Formal Definition of Matrices<a class="headerlink" href="3_Lists.1#3112-formal-definition-of-matrices" title="Permanent link">&para;</a></h3>
<p>Matrices are a special case of rectangular lists and are defined recursively. A matrix of dimension 0 is a scalar. A matrix of dimension 1 is a simple list – i.e., a vector. The count of a vector is usually called its length or dimension in mathematics. Some functional programming languages have tuples, which can be thought of as coordinates of fixed-dimension vectors with respect to a basis; q does not.</p>
<p>In q, vectors do not need to be of numeric type.</p>
<pre><code class="q">q)v1:1 2 3 / vector of integers
q)v2:98.60 99.72 100.34 101.93 / float vector
q)v3:`so`long`and`thanks`for`all`the`fish / symbol vector
</code></pre>

<p>For <em>n</em>&gt;1, we define a <em>matrix of dimension n</em> as a list of matrices of dimension <em>n</em> - 1 all having the same size. Thus, a matrix of dimension 2 is a list of vectors, all having the same size. If all atoms in a matrix have the same type, we call this the <em>type</em> of the matrix.</p>
<h3 id="3113-two-and-three-dimensional-matrices">3.11.3 Two- and Three-Dimensional Matrices<a class="headerlink" href="3_Lists.1#3113-two-and-three-dimensional-matrices" title="Permanent link">&para;</a></h3>
<p>Let <code>m</code> be a two-dimensional matrix as defined in the previous section. The items of <code>m</code> are its <em>rows</em>. As we have already seen, the <em>i<sup>th</sup></em> row of <code>m</code> can be obtained via item indexing as <code>m[i]</code>. Equivalently, we can use an elided index with indexing at depth to obtain the <em>i<sup>th</sup></em> row as <code>m[i;]</code>.</p>
<p>The console display of <code>m</code> in tabular form motivates defining the list <code>m[;j]</code> as the <em>j</em><sup>th</sup> <em>column</em> of m. The notations <code>m[i][j]</code> and <code>m[i;j]</code> both retrieve the same item – namely, the item in row <em>i</em> and column <em>j</em>.</p>
<p>We make one final observation. Matrices are nested lists stored in row order. When the rows are simple, each occupies contiguous storage. This makes row retrieval very fast. On the other hand, columns must be picked out of the rows, so column operations are slower.</p>
<div class="admonition advanced">
<p class="admonition-title">Advanced</p>
<p>By convention we consider a matrix to be a collection of rows. It would be equally valid to consider each vector as a column and a two dimensional array as a collection of columns. As we shall see in <a href="8_Tables.1">Chapter 8</a>, a table is a collection of columns that are logically (not physically) transposed for ease of indexing. The constraints and calculations of q-sql operate on table column lists, so they are fast, especially when the columns are simple lists. In particular, a simple time series can be represented by two parallel lists, one holding temporal values and the other holding the associated values. Retrieving and manipulating the columns in vector operations is faster by orders of magnitude than performing the same operations in an RDBMS that stores data in rows with undefined order.</p>
</div>
<p>Higher-dimensional matrices occur less frequently in q than in its ancestors. For completeness, here is an example of a three-dimensional 2×3×2 matrix – i.e., each of the two top-level items is a 3×2 matrix. Observe that the console display of <code>mm</code> is unenlightening.</p>
<pre><code class="q">q)mm:((1 2;3 4;5 6);(10 20;30 40;50 60))
q)mm
_
q)mm[0]
_
q)mm[1]
_
</code></pre>

<h2 id="3114-matrix-flexibility">3.11.4 Matrix Flexibility<a class="headerlink" href="3_Lists.1#3114-matrix-flexibility" title="Permanent link">&para;</a></h2>
<p>We have seen that although there is no separate construct for matrices in q, rectangular lists look and act like their mathematical matrix counterparts. However, they have features not available in simple mathematical notation or in most traditional languages. We have seen that a rectangular list can be viewed and manipulated both as a multi-dimensional array (i.e., indexing at depth) and as an array of arrays (repeated item indexing). In addition, we can extend individual item indexing with indexing via lists.</p>
<pre><code class="q">q)m:(1 2; 10 20; 100 200; 1000 2000)
q)m 0 2
_
</code></pre>

<h2 id="312-useful-list-operations">3.12 Useful List Operations<a class="headerlink" href="3_Lists.1#312-useful-list-operations" title="Permanent link">&para;</a></h2>
<p>In this section we demonstrate basic use cases for some list operations that are frequently used in following chapters.</p>
<h3 id="3121-til">3.12.1 til<a class="headerlink" href="3_Lists.1#3121-til" title="Permanent link">&para;</a></h3>
<p>The monadic <code>til</code> takes a non-negative integer n and returns a list of n consecutive natural numbers starting at 0. It is useful for constructing regular lists of integers.</p>
<pre><code class="q">q)til 10
0 1 2 3 4 5 6 7 8 9
q)1+til 10
_
q)2*til 10
_
q)1+2*til 10
_
q)-5+4*til 3
_
</code></pre>

<div class="admonition tip">
<p class="admonition-title">Tip</p>
<p>If your code includes constructs of the form <em>function</em> <code>each til count …</code>you are almost certainly writing loopy – i.e., non-vector – code, otherwise known as VBQ.</p>
</div>
<h3 id="3122-distinct">3.12.2 distinct<a class="headerlink" href="3_Lists.1#3122-distinct" title="Permanent link">&para;</a></h3>
<p>The monadic function <code>distinct</code> returns the unique items in its list argument, in order of first occurrence.</p>
<pre><code class="q">q)distinct 1 2 3 2 3 4 6 4 3 5 6
1 2 3 4 6 5
</code></pre>

<h3 id="3123-where">3.12.3 where<a class="headerlink" href="3_Lists.1#3123-where" title="Permanent link">&para;</a></h3>
<p>The basic form of <code>where</code> returns the indices of <code>1b</code> in a boolean list – i.e., it reports where the ones are.</p>
<pre><code class="q">q)where 101010b
0 2 4
</code></pre>

<p>This is useful to operate at positions that are indentified by a predicate.</p>
<pre><code class="q">q)L:10 20 30 40 50
q)L[where L&gt;20]:42
q)L
_
</code></pre>

<h3 id="3124-group">3.12.4 group<a class="headerlink" href="3_Lists.1#3124-group" title="Permanent link">&para;</a></h3>
<p>The monadic function <code>group</code> takes a list and returns a dictionary in which each distinct item of the argument is mapped to the indices of its occurrences, in order of occurrence.</p>
<pre><code class="q">q)group &quot;i miss mississippi&quot;
i| 0 3 8 11 14 17
 | 1 6
m| 2 7
s| 4 5 9 10 12 13
p| 15 16
</code></pre>
                
                  
                
              
              
                


              
            </article>
          </div>
        </div>
      </main>
      
        
<footer class="md-footer">
  
    <div class="md-footer-nav">
      <nav class="md-footer-nav__inner md-grid">
        
          <a href="2_Basic_Data_Types_Atoms/index.html" title="2. Basic Data Types – Atoms" class="md-flex md-footer-nav__link md-footer-nav__link--prev" rel="prev">
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-back md-footer-nav__button"></i>
            </div>
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Previous
                </span>
                2. Basic Data Types – Atoms
              </span>
            </div>
          </a>
        
        
          <a href="4_Operators.1" title="4. Operators" class="md-flex md-footer-nav__link md-footer-nav__link--next" rel="next">
            <div class="md-flex__cell md-flex__cell--stretch md-footer-nav__title">
              <span class="md-flex__ellipsis">
                <span class="md-footer-nav__direction">
                  Next
                </span>
                4. Operators
              </span>
            </div>
            <div class="md-flex__cell md-flex__cell--shrink">
              <i class="md-icon md-icon--arrow-forward md-footer-nav__button"></i>
            </div>
          </a>
        
      </nav>
    </div>
  
  <div class="md-footer-meta md-typeset">
    <div class="md-footer-meta__inner md-grid">
      <div class="md-footer-copyright">
        
          <div class="md-footer-copyright__highlight">
            ©2015 Jeffry A. Borror / q4m LLC. Kx® and kdb+ are registered trademarks of Kx Systems, Inc., a subsidiary of First Derivatives plc.
          </div>
        
        powered by
        <a href="http://www.mkdocs.org">MkDocs</a>
        and
        <a href="https://squidfunk.github.io/mkdocs-material/">
          Material for MkDocs</a>
      </div>
      
        
      
    </div>
  </div>
</footer>
      
    </div>
    
      <script src="assets/javascripts/application.b438e6c5.js"></script>
      
      <script>app.initialize({version:"0.17.3",url:{base:".."}})</script>
      
        <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
      
        <script src="https://tracker.mrpfd.com/tracker.js"></script>
      
        <script src="http://code.kx.com/scripts/googleanalytics.js"></script>
      
        <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"></script>
      
        <script src="https://use.fontawesome.com/3dbf29ed12.js"></script>
      
        <script src="http://code.kx.com/scripts/prism.js"></script>
      
    
    
      
    
  </body>
</html>