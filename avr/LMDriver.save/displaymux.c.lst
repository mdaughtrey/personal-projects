
displaymux.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c10  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00001c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00001c44  2**0
                  ALLOC
  3 .stab         00002214  00000000  00000000  00001c44  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001521  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000072  00000000  00000000  00005379  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
Disassembly of section .text:

00000000 <dm_timerHandler>:
u08 msgCount[] PROGMEM = " cnt ";
#endif /* DEBUG */

void dm_timerHandler(void)
{
       0:	cf 93       	push	r28
       2:	df 93       	push	r29
       4:	cd b7       	in	r28, 0x3d	; 61
       6:	de b7       	in	r29, 0x3e	; 62
       8:	ac 97       	sbiw	r28, 0x2c	; 44
       a:	0f b6       	in	r0, 0x3f	; 63
       c:	f8 94       	cli
       e:	de bf       	out	0x3e, r29	; 62
      10:	0f be       	out	0x3f, r0	; 63
      12:	cd bf       	out	0x3d, r28	; 61
    u08 whichIndex = 0;
      14:	1c a6       	std	Y+44, r1	; 0x2c

    for (whichIndex = 0; whichIndex < NUM_DISPLAYS; whichIndex++)
      16:	1c a6       	std	Y+44, r1	; 0x2c
      18:	00 c0       	rjmp	.+0      	; 0x1a <dm_timerHandler+0x1a>
    {
        struct _display * disp = &display[whichIndex];
      1a:	8c a5       	ldd	r24, Y+44	; 0x2c
      1c:	48 2f       	mov	r20, r24
      1e:	55 27       	eor	r21, r21
      20:	ca 01       	movw	r24, r20
      22:	88 0f       	add	r24, r24
      24:	99 1f       	adc	r25, r25
      26:	88 0f       	add	r24, r24
      28:	99 1f       	adc	r25, r25
      2a:	88 0f       	add	r24, r24
      2c:	99 1f       	adc	r25, r25
      2e:	9c 01       	movw	r18, r24
      30:	22 0f       	add	r18, r18
      32:	33 1f       	adc	r19, r19
      34:	22 0f       	add	r18, r18
      36:	33 1f       	adc	r19, r19
      38:	82 0f       	add	r24, r18
      3a:	93 1f       	adc	r25, r19
      3c:	84 0f       	add	r24, r20
      3e:	95 1f       	adc	r25, r21
      40:	80 50       	subi	r24, 0x00	; 0
      42:	90 40       	sbci	r25, 0x00	; 0
      44:	9b a7       	std	Y+43, r25	; 0x2b
      46:	8a a7       	std	Y+42, r24	; 0x2a
        u08 flags = disp->flags;
      48:	ea a5       	ldd	r30, Y+42	; 0x2a
      4a:	fb a5       	ldd	r31, Y+43	; 0x2b
      4c:	82 81       	ldd	r24, Z+2	; 0x02
      4e:	89 a7       	std	Y+41, r24	; 0x29
        u08 litBitIndex = disp->currentColumnBit;
      50:	ea a5       	ldd	r30, Y+42	; 0x2a
      52:	fb a5       	ldd	r31, Y+43	; 0x2b
      54:	87 8d       	ldd	r24, Z+31	; 0x1f
      56:	88 a7       	std	Y+40, r24	; 0x28
        u08 colIndex = disp->colIndex;
      58:	ea a5       	ldd	r30, Y+42	; 0x2a
      5a:	fb a5       	ldd	r31, Y+43	; 0x2b
      5c:	81 81       	ldd	r24, Z+1	; 0x01
      5e:	8f a3       	std	Y+39, r24	; 0x27
        u08 senseCol = disp->senseRowColumn & 0x0f;
      60:	ea a5       	ldd	r30, Y+42	; 0x2a
      62:	fb a5       	ldd	r31, Y+43	; 0x2b
      64:	80 a5       	ldd	r24, Z+40	; 0x28
      66:	8f 70       	andi	r24, 0x0F	; 15
      68:	8e a3       	std	Y+38, r24	; 0x26

        /* SENSE */
        if (7 == litBitIndex && colIndex == senseCol)
      6a:	88 a5       	ldd	r24, Y+40	; 0x28
      6c:	87 30       	cpi	r24, 0x07	; 7
      6e:	01 f4       	brne	.+0      	; 0x70 <dm_timerHandler+0x70>
      70:	9f a1       	ldd	r25, Y+39	; 0x27
      72:	8e a1       	ldd	r24, Y+38	; 0x26
      74:	98 17       	cp	r25, r24
      76:	01 f4       	brne	.+0      	; 0x78 <dm_timerHandler+0x78>
        {
            if (++colIndex == NUM_COLUMNS)
      78:	8f a1       	ldd	r24, Y+39	; 0x27
      7a:	8f 5f       	subi	r24, 0xFF	; 255
      7c:	8f a3       	std	Y+39, r24	; 0x27
      7e:	8f a1       	ldd	r24, Y+39	; 0x27
      80:	85 30       	cpi	r24, 0x05	; 5
      82:	01 f4       	brne	.+0      	; 0x84 <dm_timerHandler+0x84>
            {
                colIndex = 0;
      84:	1f a2       	std	Y+39, r1	; 0x27
            }
        }

        const u08 * colCtlPtr = &columnCtl[whichIndex][colIndex];
      86:	8c a5       	ldd	r24, Y+44	; 0x2c
      88:	28 2f       	mov	r18, r24
      8a:	33 27       	eor	r19, r19
      8c:	c9 01       	movw	r24, r18
      8e:	88 0f       	add	r24, r24
      90:	99 1f       	adc	r25, r25
      92:	82 0f       	add	r24, r18
      94:	93 1f       	adc	r25, r19
      96:	9c 01       	movw	r18, r24
      98:	22 0f       	add	r18, r18
      9a:	33 1f       	adc	r19, r19
      9c:	22 0f       	add	r18, r18
      9e:	33 1f       	adc	r19, r19
      a0:	82 0f       	add	r24, r18
      a2:	93 1f       	adc	r25, r19
      a4:	ac 01       	movw	r20, r24
      a6:	8f a1       	ldd	r24, Y+39	; 0x27
      a8:	28 2f       	mov	r18, r24
      aa:	33 27       	eor	r19, r19
      ac:	c9 01       	movw	r24, r18
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	82 0f       	add	r24, r18
      b4:	93 1f       	adc	r25, r19
      b6:	9a 01       	movw	r18, r20
      b8:	28 0f       	add	r18, r24
      ba:	39 1f       	adc	r19, r25
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	82 0f       	add	r24, r18
      c2:	93 1f       	adc	r25, r19
      c4:	9d a3       	std	Y+37, r25	; 0x25
      c6:	8c a3       	std	Y+36, r24	; 0x24
        u08 * rowCtlPtr = disp->rowCtlPtr;
      c8:	ea a5       	ldd	r30, Y+42	; 0x2a
      ca:	fb a5       	ldd	r31, Y+43	; 0x2b
      cc:	81 a1       	ldd	r24, Z+33	; 0x21
      ce:	92 a1       	ldd	r25, Z+34	; 0x22
      d0:	9b a3       	std	Y+35, r25	; 0x23
      d2:	8a a3       	std	Y+34, r24	; 0x22
        u08 * oldRowCtlPtr = disp->oldRowCtlPtr;
      d4:	ea a5       	ldd	r30, Y+42	; 0x2a
      d6:	fb a5       	ldd	r31, Y+43	; 0x2b
      d8:	83 a1       	ldd	r24, Z+35	; 0x23
      da:	94 a1       	ldd	r25, Z+36	; 0x24
      dc:	99 a3       	std	Y+33, r25	; 0x21
      de:	88 a3       	std	Y+32, r24	; 0x20
        u08 senseRow = disp->senseRowColumn >> 4;
      e0:	ea a5       	ldd	r30, Y+42	; 0x2a
      e2:	fb a5       	ldd	r31, Y+43	; 0x2b
      e4:	80 a5       	ldd	r24, Z+40	; 0x28
      e6:	82 95       	swap	r24
      e8:	8f 70       	andi	r24, 0x0F	; 15
      ea:	8f 8f       	std	Y+31, r24	; 0x1f

        /* If we're at the start of a new frame... */
        if (litBitIndex == 7 &&
      ec:	88 a5       	ldd	r24, Y+40	; 0x28
      ee:	87 30       	cpi	r24, 0x07	; 7
      f0:	01 f0       	breq	.+0      	; 0xf2 <dm_timerHandler+0xf2>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <dm_timerHandler+0xf4>
      f4:	8f a1       	ldd	r24, Y+39	; 0x27
      f6:	88 23       	and	r24, r24
      f8:	01 f0       	breq	.+0      	; 0xfa <dm_timerHandler+0xfa>
      fa:	00 c0       	rjmp	.+0      	; 0xfc <dm_timerHandler+0xfc>
            colIndex == 0)
        {
            //	  oldRowCtlPtr = rowCtlPtr;
            /* Set up the color choice for this frame */
#ifdef PALETTE
            if (disp->paletteCountdown < disp->paletteSelected)
#else
                if (0 == disp->paletteSelected) /* palette zero = orange */
      fc:	ea a5       	ldd	r30, Y+42	; 0x2a
      fe:	fb a5       	ldd	r31, Y+43	; 0x2b
     100:	80 a1       	ldd	r24, Z+32	; 0x20
     102:	88 23       	and	r24, r24
     104:	01 f4       	brne	.+0      	; 0x106 <dm_timerHandler+0x106>
#endif
                {
                    disp->rowCtlPtr = &rowCtlOrange[whichIndex][0]; 
     106:	8c a5       	ldd	r24, Y+44	; 0x2c
     108:	28 2f       	mov	r18, r24
     10a:	33 27       	eor	r19, r19
     10c:	c9 01       	movw	r24, r18
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	82 0f       	add	r24, r18
     114:	93 1f       	adc	r25, r19
     116:	9c 01       	movw	r18, r24
     118:	22 0f       	add	r18, r18
     11a:	33 1f       	adc	r19, r19
     11c:	22 0f       	add	r18, r18
     11e:	33 1f       	adc	r19, r19
     120:	22 0f       	add	r18, r18
     122:	33 1f       	adc	r19, r19
     124:	a9 01       	movw	r20, r18
     126:	48 1b       	sub	r20, r24
     128:	59 0b       	sbc	r21, r25
     12a:	ca 01       	movw	r24, r20
     12c:	80 50       	subi	r24, 0x00	; 0
     12e:	90 40       	sbci	r25, 0x00	; 0
     130:	ea a5       	ldd	r30, Y+42	; 0x2a
     132:	fb a5       	ldd	r31, Y+43	; 0x2b
     134:	92 a3       	std	Z+34, r25	; 0x22
     136:	81 a3       	std	Z+33, r24	; 0x21
     138:	00 c0       	rjmp	.+0      	; 0x13a <dm_timerHandler+0x13a>
                }
                else
                {
                    disp->rowCtlPtr = &rowCtlGreen[whichIndex][0]; /* palette 1 == green */
     13a:	8c a5       	ldd	r24, Y+44	; 0x2c
     13c:	28 2f       	mov	r18, r24
     13e:	33 27       	eor	r19, r19
     140:	c9 01       	movw	r24, r18
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	82 0f       	add	r24, r18
     148:	93 1f       	adc	r25, r19
     14a:	9c 01       	movw	r18, r24
     14c:	22 0f       	add	r18, r18
     14e:	33 1f       	adc	r19, r19
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	a9 01       	movw	r20, r18
     15a:	48 1b       	sub	r20, r24
     15c:	59 0b       	sbc	r21, r25
     15e:	ca 01       	movw	r24, r20
     160:	80 50       	subi	r24, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	ea a5       	ldd	r30, Y+42	; 0x2a
     166:	fb a5       	ldd	r31, Y+43	; 0x2b
     168:	92 a3       	std	Z+34, r25	; 0x22
     16a:	81 a3       	std	Z+33, r24	; 0x21
                }
            if (rowCtlPtr != disp->rowCtlPtr) /*  If we changed palettes... */
     16c:	ea a5       	ldd	r30, Y+42	; 0x2a
     16e:	fb a5       	ldd	r31, Y+43	; 0x2b
     170:	21 a1       	ldd	r18, Z+33	; 0x21
     172:	32 a1       	ldd	r19, Z+34	; 0x22
     174:	8a a1       	ldd	r24, Y+34	; 0x22
     176:	9b a1       	ldd	r25, Y+35	; 0x23
     178:	28 17       	cp	r18, r24
     17a:	39 07       	cpc	r19, r25
     17c:	01 f0       	breq	.+0      	; 0x17e <dm_timerHandler+0x17e>
            {
                oldRowCtlPtr = rowCtlPtr; /* get the old palette pointer */
     17e:	8a a1       	ldd	r24, Y+34	; 0x22
     180:	9b a1       	ldd	r25, Y+35	; 0x23
     182:	99 a3       	std	Y+33, r25	; 0x21
     184:	88 a3       	std	Y+32, r24	; 0x20
                rowCtlPtr = disp->rowCtlPtr; /* get the new palette pointer */
     186:	ea a5       	ldd	r30, Y+42	; 0x2a
     188:	fb a5       	ldd	r31, Y+43	; 0x2b
     18a:	81 a1       	ldd	r24, Z+33	; 0x21
     18c:	92 a1       	ldd	r25, Z+34	; 0x22
     18e:	9b a3       	std	Y+35, r25	; 0x23
     190:	8a a3       	std	Y+34, r24	; 0x22
                disp->oldRowCtlPtr = oldRowCtlPtr; /* store the old palette pointer */
     192:	ea a5       	ldd	r30, Y+42	; 0x2a
     194:	fb a5       	ldd	r31, Y+43	; 0x2b
     196:	88 a1       	ldd	r24, Y+32	; 0x20
     198:	99 a1       	ldd	r25, Y+33	; 0x21
     19a:	94 a3       	std	Z+36, r25	; 0x24
     19c:	83 a3       	std	Z+35, r24	; 0x23
            }
#ifdef PALETTE
            if (disp->paletteCountdown-- == 0)
            {
                disp->paletteCountdown = PALETTE_COUNTDOWN_INIT;
            }
#endif
        }
        u08 data;
        if (litBitIndex < 7)		/* if we're in a frame, restore the current data */
     19e:	88 a5       	ldd	r24, Y+40	; 0x28
     1a0:	87 30       	cpi	r24, 0x07	; 7
     1a2:	00 f4       	brcc	.+0      	; 0x1a4 <dm_timerHandler+0x1a4>
        {
            data = disp->currentColumn;
     1a4:	ea a5       	ldd	r30, Y+42	; 0x2a
     1a6:	fb a5       	ldd	r31, Y+43	; 0x2b
     1a8:	86 8d       	ldd	r24, Z+30	; 0x1e
     1aa:	8e 8f       	std	Y+30, r24	; 0x1e
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <dm_timerHandler+0x1ae>
        }
        else
        {
            data = disp->bitsOut[colIndex]; /* else read from frame buffer */
     1ae:	8f a1       	ldd	r24, Y+39	; 0x27
     1b0:	28 2f       	mov	r18, r24
     1b2:	33 27       	eor	r19, r19
     1b4:	8a a5       	ldd	r24, Y+42	; 0x2a
     1b6:	9b a5       	ldd	r25, Y+43	; 0x2b
     1b8:	82 0f       	add	r24, r18
     1ba:	93 1f       	adc	r25, r19
     1bc:	fc 01       	movw	r30, r24
     1be:	79 96       	adiw	r30, 0x19	; 25
     1c0:	80 81       	ld	r24, Z
     1c2:	8e 8f       	std	Y+30, r24	; 0x1e
            litBitIndex = 0;
     1c4:	18 a6       	std	Y+40, r1	; 0x28
        }
      
        u08 * colOnPort = pgm_read_byte_near(colCtlPtr + offsetof(PortPin, port));
     1c6:	8c a1       	ldd	r24, Y+36	; 0x24
     1c8:	9d a1       	ldd	r25, Y+37	; 0x25
     1ca:	98 8f       	std	Y+24, r25	; 0x18
     1cc:	8f 8b       	std	Y+23, r24	; 0x17
     1ce:	ef 89       	ldd	r30, Y+23	; 0x17
     1d0:	f8 8d       	ldd	r31, Y+24	; 0x18
     1d2:	84 91       	lpm	r24, Z
     1d4:	8e 8b       	std	Y+22, r24	; 0x16
     1d6:	8e 89       	ldd	r24, Y+22	; 0x16
     1d8:	99 27       	eor	r25, r25
     1da:	9d 8f       	std	Y+29, r25	; 0x1d
     1dc:	8c 8f       	std	Y+28, r24	; 0x1c
        u08 colOnBit = pgm_read_byte_near(colCtlPtr + offsetof(PortPin, pin));
     1de:	8c a1       	ldd	r24, Y+36	; 0x24
     1e0:	9d a1       	ldd	r25, Y+37	; 0x25
     1e2:	02 96       	adiw	r24, 0x02	; 2
     1e4:	9d 8b       	std	Y+21, r25	; 0x15
     1e6:	8c 8b       	std	Y+20, r24	; 0x14
     1e8:	ec 89       	ldd	r30, Y+20	; 0x14
     1ea:	fd 89       	ldd	r31, Y+21	; 0x15
     1ec:	84 91       	lpm	r24, Z
     1ee:	8b 8b       	std	Y+19, r24	; 0x13
     1f0:	8b 89       	ldd	r24, Y+19	; 0x13
     1f2:	8b 8f       	std	Y+27, r24	; 0x1b
      
        /* If we're starting a new frame... */
        if (litBitIndex == 0)
     1f4:	88 a5       	ldd	r24, Y+40	; 0x28
     1f6:	88 23       	and	r24, r24
     1f8:	01 f4       	brne	.+0      	; 0x1fa <dm_timerHandler+0x1fa>
        {
            (*disp->litPort) |= _BV(disp->litBit); /* turn off the previous column */
     1fa:	ea a5       	ldd	r30, Y+42	; 0x2a
     1fc:	fb a5       	ldd	r31, Y+43	; 0x2b
     1fe:	a5 a1       	ldd	r26, Z+37	; 0x25
     200:	b6 a1       	ldd	r27, Z+38	; 0x26
     202:	ea a5       	ldd	r30, Y+42	; 0x2a
     204:	fb a5       	ldd	r31, Y+43	; 0x2b
     206:	05 a0       	ldd	r0, Z+37	; 0x25
     208:	f6 a1       	ldd	r31, Z+38	; 0x26
     20a:	e0 2d       	mov	r30, r0
     20c:	80 81       	ld	r24, Z
     20e:	48 2f       	mov	r20, r24
     210:	ea a5       	ldd	r30, Y+42	; 0x2a
     212:	fb a5       	ldd	r31, Y+43	; 0x2b
     214:	87 a1       	ldd	r24, Z+39	; 0x27
     216:	28 2f       	mov	r18, r24
     218:	33 27       	eor	r19, r19
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	02 2e       	mov	r0, r18
     220:	00 c0       	rjmp	.+0      	; 0x222 <dm_timerHandler+0x222>
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	0a 94       	dec	r0
     228:	02 f4       	brpl	.+0      	; 0x22a <dm_timerHandler+0x22a>
     22a:	84 2b       	or	r24, r20
     22c:	8c 93       	st	X, r24
            disp->litPort = colOnPort;		 /* store the new column port */
     22e:	ea a5       	ldd	r30, Y+42	; 0x2a
     230:	fb a5       	ldd	r31, Y+43	; 0x2b
     232:	8c 8d       	ldd	r24, Y+28	; 0x1c
     234:	9d 8d       	ldd	r25, Y+29	; 0x1d
     236:	96 a3       	std	Z+38, r25	; 0x26
     238:	85 a3       	std	Z+37, r24	; 0x25
            disp->litBit = colOnBit;		 /* store the new column bit */
     23a:	ea a5       	ldd	r30, Y+42	; 0x2a
     23c:	fb a5       	ldd	r31, Y+43	; 0x2b
     23e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     240:	87 a3       	std	Z+39, r24	; 0x27
        }

        /* Turn off the old row value, turn on the new row value */
        u08 litBits = 0;
     242:	1a 8e       	std	Y+26, r1	; 0x1a
        u08 count;
        //            u08 newDataBit = 0;

        /* run through the current columns respecting BITSPERSCAN */
        /* run through bits 0-6 (all LEDs in the current lit column). */
        /* Turn them all off at every run. Once count > litBitIndex, illuminate up to */
        /* BITSPERSCAN LEDs. */
        for (count = 0; count < 7; count++)
     244:	19 8e       	std	Y+25, r1	; 0x19
     246:	00 c0       	rjmp	.+0      	; 0x248 <dm_timerHandler+0x248>
        {
            u08 * newPort = pgm_read_byte_near(rowCtlPtr + offsetof(PortPin, port));
     248:	8a a1       	ldd	r24, Y+34	; 0x22
     24a:	9b a1       	ldd	r25, Y+35	; 0x23
     24c:	9c 87       	std	Y+12, r25	; 0x0c
     24e:	8b 87       	std	Y+11, r24	; 0x0b
     250:	eb 85       	ldd	r30, Y+11	; 0x0b
     252:	fc 85       	ldd	r31, Y+12	; 0x0c
     254:	84 91       	lpm	r24, Z
     256:	8a 87       	std	Y+10, r24	; 0x0a
     258:	8a 85       	ldd	r24, Y+10	; 0x0a
     25a:	99 27       	eor	r25, r25
     25c:	9a 8b       	std	Y+18, r25	; 0x12
     25e:	89 8b       	std	Y+17, r24	; 0x11
            u08 newBit = pgm_read_byte_near(rowCtlPtr + offsetof(PortPin, pin));
     260:	8a a1       	ldd	r24, Y+34	; 0x22
     262:	9b a1       	ldd	r25, Y+35	; 0x23
     264:	02 96       	adiw	r24, 0x02	; 2
     266:	99 87       	std	Y+9, r25	; 0x09
     268:	88 87       	std	Y+8, r24	; 0x08
     26a:	e8 85       	ldd	r30, Y+8	; 0x08
     26c:	f9 85       	ldd	r31, Y+9	; 0x09
     26e:	84 91       	lpm	r24, Z
     270:	8f 83       	std	Y+7, r24	; 0x07
     272:	8f 81       	ldd	r24, Y+7	; 0x07
     274:	88 8b       	std	Y+16, r24	; 0x10
            u08 * oldPort = pgm_read_byte_near(oldRowCtlPtr + offsetof(PortPin, port));
     276:	88 a1       	ldd	r24, Y+32	; 0x20
     278:	99 a1       	ldd	r25, Y+33	; 0x21
     27a:	9e 83       	std	Y+6, r25	; 0x06
     27c:	8d 83       	std	Y+5, r24	; 0x05
     27e:	ed 81       	ldd	r30, Y+5	; 0x05
     280:	fe 81       	ldd	r31, Y+6	; 0x06
     282:	84 91       	lpm	r24, Z
     284:	8c 83       	std	Y+4, r24	; 0x04
     286:	8c 81       	ldd	r24, Y+4	; 0x04
     288:	99 27       	eor	r25, r25
     28a:	9f 87       	std	Y+15, r25	; 0x0f
     28c:	8e 87       	std	Y+14, r24	; 0x0e
            u08 oldBit = pgm_read_byte_near(oldRowCtlPtr + offsetof(PortPin, pin));
     28e:	88 a1       	ldd	r24, Y+32	; 0x20
     290:	99 a1       	ldd	r25, Y+33	; 0x21
     292:	02 96       	adiw	r24, 0x02	; 2
     294:	9b 83       	std	Y+3, r25	; 0x03
     296:	8a 83       	std	Y+2, r24	; 0x02
     298:	ea 81       	ldd	r30, Y+2	; 0x02
     29a:	fb 81       	ldd	r31, Y+3	; 0x03
     29c:	84 91       	lpm	r24, Z
     29e:	89 83       	std	Y+1, r24	; 0x01
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	8d 87       	std	Y+13, r24	; 0x0d
          
            (*oldPort) &= ~_BV(oldBit); /* turn off the bit of the previous column */
     2a4:	ee 85       	ldd	r30, Y+14	; 0x0e
     2a6:	ff 85       	ldd	r31, Y+15	; 0x0f
     2a8:	80 81       	ld	r24, Z
     2aa:	48 2f       	mov	r20, r24
     2ac:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ae:	28 2f       	mov	r18, r24
     2b0:	33 27       	eor	r19, r19
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	02 2e       	mov	r0, r18
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <dm_timerHandler+0x2ba>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	0a 94       	dec	r0
     2c0:	02 f4       	brpl	.+0      	; 0x2c2 <dm_timerHandler+0x2c2>
     2c2:	80 95       	com	r24
     2c4:	84 23       	and	r24, r20
     2c6:	ee 85       	ldd	r30, Y+14	; 0x0e
     2c8:	ff 85       	ldd	r31, Y+15	; 0x0f
     2ca:	80 83       	st	Z, r24
      
            if (litBits >= BITSPERSCAN ||
     2cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	00 f4       	brcc	.+0      	; 0x2d2 <dm_timerHandler+0x2d2>
     2d2:	99 8d       	ldd	r25, Y+25	; 0x19
     2d4:	88 a5       	ldd	r24, Y+40	; 0x28
     2d6:	98 17       	cp	r25, r24
     2d8:	00 f4       	brcc	.+0      	; 0x2da <dm_timerHandler+0x2da>
                count < litBitIndex)
            {
                    (*newPort) &= ~_BV(newBit); /* turn off the bit on this column */
     2da:	e9 89       	ldd	r30, Y+17	; 0x11
     2dc:	fa 89       	ldd	r31, Y+18	; 0x12
     2de:	80 81       	ld	r24, Z
     2e0:	48 2f       	mov	r20, r24
     2e2:	88 89       	ldd	r24, Y+16	; 0x10
     2e4:	28 2f       	mov	r18, r24
     2e6:	33 27       	eor	r19, r19
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	02 2e       	mov	r0, r18
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <dm_timerHandler+0x2f0>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	0a 94       	dec	r0
     2f6:	02 f4       	brpl	.+0      	; 0x2f8 <dm_timerHandler+0x2f8>
     2f8:	80 95       	com	r24
     2fa:	84 23       	and	r24, r20
     2fc:	e9 89       	ldd	r30, Y+17	; 0x11
     2fe:	fa 89       	ldd	r31, Y+18	; 0x12
     300:	80 83       	st	Z, r24
     302:	00 c0       	rjmp	.+0      	; 0x304 <dm_timerHandler+0x304>
            }
            else
            {
                if (data & (1 << count))
     304:	8e 8d       	ldd	r24, Y+30	; 0x1e
     306:	28 2f       	mov	r18, r24
     308:	33 27       	eor	r19, r19
     30a:	89 8d       	ldd	r24, Y+25	; 0x19
     30c:	99 27       	eor	r25, r25
     30e:	a9 01       	movw	r20, r18
     310:	00 c0       	rjmp	.+0      	; 0x312 <dm_timerHandler+0x312>
     312:	55 95       	asr	r21
     314:	47 95       	ror	r20
     316:	8a 95       	dec	r24
     318:	02 f4       	brpl	.+0      	; 0x31a <dm_timerHandler+0x31a>
     31a:	ca 01       	movw	r24, r20
     31c:	81 70       	andi	r24, 0x01	; 1
     31e:	90 70       	andi	r25, 0x00	; 0
     320:	88 23       	and	r24, r24
     322:	01 f0       	breq	.+0      	; 0x324 <dm_timerHandler+0x324>
                {
                    (*newPort) |= _BV(newBit);
     324:	e9 89       	ldd	r30, Y+17	; 0x11
     326:	fa 89       	ldd	r31, Y+18	; 0x12
     328:	80 81       	ld	r24, Z
     32a:	48 2f       	mov	r20, r24
     32c:	88 89       	ldd	r24, Y+16	; 0x10
     32e:	28 2f       	mov	r18, r24
     330:	33 27       	eor	r19, r19
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	00 c0       	rjmp	.+0      	; 0x338 <dm_timerHandler+0x338>
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	2a 95       	dec	r18
     33e:	02 f4       	brpl	.+0      	; 0x340 <dm_timerHandler+0x340>
     340:	84 2b       	or	r24, r20
     342:	e9 89       	ldd	r30, Y+17	; 0x11
     344:	fa 89       	ldd	r31, Y+18	; 0x12
     346:	80 83       	st	Z, r24
                    litBitIndex = count;
     348:	89 8d       	ldd	r24, Y+25	; 0x19
     34a:	88 a7       	std	Y+40, r24	; 0x28
                    litBits++;
     34c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     34e:	8f 5f       	subi	r24, 0xFF	; 255
     350:	8a 8f       	std	Y+26, r24	; 0x1a
                    data &= ~(1 << count);
     352:	89 8d       	ldd	r24, Y+25	; 0x19
     354:	28 2f       	mov	r18, r24
     356:	33 27       	eor	r19, r19
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 2e       	mov	r0, r18
     35e:	00 c0       	rjmp	.+0      	; 0x360 <dm_timerHandler+0x360>
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	0a 94       	dec	r0
     366:	02 f4       	brpl	.+0      	; 0x368 <dm_timerHandler+0x368>
     368:	98 2f       	mov	r25, r24
     36a:	90 95       	com	r25
     36c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     36e:	89 23       	and	r24, r25
     370:	8e 8f       	std	Y+30, r24	; 0x1e
     372:	00 c0       	rjmp	.+0      	; 0x374 <dm_timerHandler+0x374>
                }
                else
                {
                    (*newPort) &= ~_BV(newBit);
     374:	e9 89       	ldd	r30, Y+17	; 0x11
     376:	fa 89       	ldd	r31, Y+18	; 0x12
     378:	80 81       	ld	r24, Z
     37a:	48 2f       	mov	r20, r24
     37c:	88 89       	ldd	r24, Y+16	; 0x10
     37e:	28 2f       	mov	r18, r24
     380:	33 27       	eor	r19, r19
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	02 2e       	mov	r0, r18
     388:	00 c0       	rjmp	.+0      	; 0x38a <dm_timerHandler+0x38a>
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	0a 94       	dec	r0
     390:	02 f4       	brpl	.+0      	; 0x392 <dm_timerHandler+0x392>
     392:	80 95       	com	r24
     394:	84 23       	and	r24, r20
     396:	e9 89       	ldd	r30, Y+17	; 0x11
     398:	fa 89       	ldd	r31, Y+18	; 0x12
     39a:	80 83       	st	Z, r24
                }
            }

            rowCtlPtr += sizeof(PortPin); /* point to the next row */
     39c:	8a a1       	ldd	r24, Y+34	; 0x22
     39e:	9b a1       	ldd	r25, Y+35	; 0x23
     3a0:	03 96       	adiw	r24, 0x03	; 3
     3a2:	9b a3       	std	Y+35, r25	; 0x23
     3a4:	8a a3       	std	Y+34, r24	; 0x22
            oldRowCtlPtr += sizeof(PortPin); /* point to the next row */
     3a6:	88 a1       	ldd	r24, Y+32	; 0x20
     3a8:	99 a1       	ldd	r25, Y+33	; 0x21
     3aa:	03 96       	adiw	r24, 0x03	; 3
     3ac:	99 a3       	std	Y+33, r25	; 0x21
     3ae:	88 a3       	std	Y+32, r24	; 0x20
     3b0:	89 8d       	ldd	r24, Y+25	; 0x19
     3b2:	8f 5f       	subi	r24, 0xFF	; 255
     3b4:	89 8f       	std	Y+25, r24	; 0x19
     3b6:	89 8d       	ldd	r24, Y+25	; 0x19
     3b8:	87 30       	cpi	r24, 0x07	; 7
     3ba:	00 f4       	brcc	.+0      	; 0x3bc <dm_timerHandler+0x3bc>
     3bc:	00 c0       	rjmp	.+0      	; 0x3be <dm_timerHandler+0x3be>
        }
        //      litBitIndex = newDataBit;	/* store the index of the bit to light next */

        /* If display is not blanked, turn on the current column */
        if ((flags & FLAG_BLANK) == 0)
     3be:	89 a5       	ldd	r24, Y+41	; 0x29
     3c0:	99 27       	eor	r25, r25
     3c2:	80 72       	andi	r24, 0x20	; 32
     3c4:	90 70       	andi	r25, 0x00	; 0
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	01 f4       	brne	.+0      	; 0x3ca <dm_timerHandler+0x3ca>
        {
            (*colOnPort) &= ~_BV(colOnBit);
     3ca:	ec 8d       	ldd	r30, Y+28	; 0x1c
     3cc:	fd 8d       	ldd	r31, Y+29	; 0x1d
     3ce:	80 81       	ld	r24, Z
     3d0:	48 2f       	mov	r20, r24
     3d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3d4:	28 2f       	mov	r18, r24
     3d6:	33 27       	eor	r19, r19
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	02 2e       	mov	r0, r18
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <dm_timerHandler+0x3e0>
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	0a 94       	dec	r0
     3e6:	02 f4       	brpl	.+0      	; 0x3e8 <dm_timerHandler+0x3e8>
     3e8:	80 95       	com	r24
     3ea:	84 23       	and	r24, r20
     3ec:	ec 8d       	ldd	r30, Y+28	; 0x1c
     3ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
     3f0:	80 83       	st	Z, r24
        }
      
        disp->currentColumn = data;
     3f2:	ea a5       	ldd	r30, Y+42	; 0x2a
     3f4:	fb a5       	ldd	r31, Y+43	; 0x2b
     3f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3f8:	86 8f       	std	Z+30, r24	; 0x1e
      
        //      if ((data >> litBitIndex) == 0)
        if (0 == data)
     3fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3fc:	88 23       	and	r24, r24
     3fe:	01 f4       	brne	.+0      	; 0x400 <dm_timerHandler+0x400>
        {
            litBitIndex = 7;
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	88 a7       	std	Y+40, r24	; 0x28
            ++colIndex;
     404:	8f a1       	ldd	r24, Y+39	; 0x27
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	8f a3       	std	Y+39, r24	; 0x27
	  
            if (colIndex == NUM_COLUMNS)
     40a:	8f a1       	ldd	r24, Y+39	; 0x27
     40c:	85 30       	cpi	r24, 0x05	; 5
     40e:	01 f4       	brne	.+0      	; 0x410 <dm_timerHandler+0x410>
            {
                colIndex = 0;
     410:	1f a2       	std	Y+39, r1	; 0x27
            }
        }
        disp->currentColumnBit = litBitIndex;
     412:	ea a5       	ldd	r30, Y+42	; 0x2a
     414:	fb a5       	ldd	r31, Y+43	; 0x2b
     416:	88 a5       	ldd	r24, Y+40	; 0x28
     418:	87 8f       	std	Z+31, r24	; 0x1f
        disp->colIndex = colIndex;
     41a:	ea a5       	ldd	r30, Y+42	; 0x2a
     41c:	fb a5       	ldd	r31, Y+43	; 0x2b
     41e:	8f a1       	ldd	r24, Y+39	; 0x27
     420:	81 83       	std	Z+1, r24	; 0x01
        /* If display is dimmed, turn column off immediately */
        if (litBitIndex == 7 && flags & FLAG_DIM)
     422:	88 a5       	ldd	r24, Y+40	; 0x28
     424:	87 30       	cpi	r24, 0x07	; 7
     426:	01 f4       	brne	.+0      	; 0x428 <dm_timerHandler+0x428>
     428:	89 a5       	ldd	r24, Y+41	; 0x29
     42a:	99 27       	eor	r25, r25
     42c:	88 70       	andi	r24, 0x08	; 8
     42e:	90 70       	andi	r25, 0x00	; 0
     430:	00 97       	sbiw	r24, 0x00	; 0
     432:	01 f0       	breq	.+0      	; 0x434 <dm_timerHandler+0x434>
        {
            (*colOnPort) |= _BV(colOnBit);
     434:	ec 8d       	ldd	r30, Y+28	; 0x1c
     436:	fd 8d       	ldd	r31, Y+29	; 0x1d
     438:	80 81       	ld	r24, Z
     43a:	48 2f       	mov	r20, r24
     43c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     43e:	28 2f       	mov	r18, r24
     440:	33 27       	eor	r19, r19
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 2e       	mov	r0, r18
     448:	00 c0       	rjmp	.+0      	; 0x44a <dm_timerHandler+0x44a>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	0a 94       	dec	r0
     450:	02 f4       	brpl	.+0      	; 0x452 <dm_timerHandler+0x452>
     452:	84 2b       	or	r24, r20
     454:	ec 8d       	ldd	r30, Y+28	; 0x1c
     456:	fd 8d       	ldd	r31, Y+29	; 0x1d
     458:	80 83       	st	Z, r24
     45a:	8c a5       	ldd	r24, Y+44	; 0x2c
     45c:	8f 5f       	subi	r24, 0xFF	; 255
     45e:	8c a7       	std	Y+44, r24	; 0x2c
     460:	8c a5       	ldd	r24, Y+44	; 0x2c
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	00 f4       	brcc	.+0      	; 0x466 <dm_timerHandler+0x466>
     466:	00 c0       	rjmp	.+0      	; 0x468 <dm_timerHandler+0x468>
     468:	ac 96       	adiw	r28, 0x2c	; 44
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <dm_init>:
        }
    }
}

void dm_init(void)
{
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
    memset(display, 0, sizeof(display));
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	42 e5       	ldi	r20, 0x52	; 82
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    display[0].txList[0] = TRANSFORM_EOL;
     492:	8f e0       	ldi	r24, 0x0F	; 15
     494:	80 93 00 00 	sts	0x0000, r24
    display[1].txList[0] = TRANSFORM_EOL;
     498:	8f e0       	ldi	r24, 0x0F	; 15
     49a:	80 93 00 00 	sts	0x0000, r24

    MCUCR |= PUD;
     49e:	a5 e5       	ldi	r26, 0x55	; 85
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	e5 e5       	ldi	r30, 0x55	; 85
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	84 60       	ori	r24, 0x04	; 4
     4aa:	8c 93       	st	X, r24

#ifdef KB_TBC12
    /* Enable pullup resistors for row drivers */
/*   PORTE = 0x0c; */

    /* Set direction */
    DDRA = 0xff; /*76543210 1111 1111  */
     4ac:	e1 e2       	ldi	r30, 0x21	; 33
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	80 83       	st	Z, r24
    DDRB |= 0xf0;  /*7654 1111 0000 */
     4b4:	a4 e2       	ldi	r26, 0x24	; 36
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	e4 e2       	ldi	r30, 0x24	; 36
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	80 6f       	ori	r24, 0xF0	; 240
     4c0:	8c 93       	st	X, r24
    DDRC = 0xff; /*76543210 1111 1111  */
     4c2:	e7 e2       	ldi	r30, 0x27	; 39
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	80 83       	st	Z, r24
    DDRD = 0x07; /* 210 0000 0111*/
     4ca:	ea e2       	ldi	r30, 0x2A	; 42
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	87 e0       	ldi	r24, 0x07	; 7
     4d0:	80 83       	st	Z, r24
    DDRE = 0x0c; /* 32 0000 1100*/
     4d2:	ed e2       	ldi	r30, 0x2D	; 45
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	80 83       	st	Z, r24
    DDRF = 0xff; /* 76543210 11111111*/
     4da:	e0 e3       	ldi	r30, 0x30	; 48
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	8f ef       	ldi	r24, 0xFF	; 255
     4e0:	80 83       	st	Z, r24
    DDRG = 0x1f; /* 43210 0001 1111*/
     4e2:	e3 e3       	ldi	r30, 0x33	; 51
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	8f e1       	ldi	r24, 0x1F	; 31
     4e8:	80 83       	st	Z, r24

    PORTB |= 0xc0; /* 1100 0000 */
     4ea:	a5 e2       	ldi	r26, 0x25	; 37
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	e5 e2       	ldi	r30, 0x25	; 37
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	80 6c       	ori	r24, 0xC0	; 192
     4f6:	8c 93       	st	X, r24
    PORTC = 0x1f; /* 0001 1111 */
     4f8:	e8 e2       	ldi	r30, 0x28	; 40
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	8f e1       	ldi	r24, 0x1F	; 31
     4fe:	80 83       	st	Z, r24
    PORTD = 0xf9; /* 1111 1001 */
     500:	eb e2       	ldi	r30, 0x2B	; 43
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	89 ef       	ldi	r24, 0xF9	; 249
     506:	80 83       	st	Z, r24
    PORTE &= 0xf3;
     508:	ae e2       	ldi	r26, 0x2E	; 46
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	ee e2       	ldi	r30, 0x2E	; 46
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	90 81       	ld	r25, Z
     512:	83 ef       	ldi	r24, 0xF3	; 243
     514:	89 23       	and	r24, r25
     516:	8c 93       	st	X, r24
    PORTG = 0x18; /* 0001 1000 */
     518:	e4 e3       	ldi	r30, 0x34	; 52
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	88 e1       	ldi	r24, 0x18	; 24
     51e:	80 83       	st	Z, r24
    PORTF = 0;
     520:	e1 e3       	ldi	r30, 0x31	; 49
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	10 82       	st	Z, r1

    display[0].colIndex = 4;
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	80 93 00 00 	sts	0x0000, r24
    display[1].colIndex = 4;
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	80 93 00 00 	sts	0x0000, r24
    display[0].rowCtlPtr = &rowCtlGreen[0][0];
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	90 93 00 00 	sts	0x0000, r25
     53a:	80 93 00 00 	sts	0x0000, r24
    display[1].rowCtlPtr = &rowCtlGreen[1][0];
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	90 93 00 00 	sts	0x0000, r25
     546:	80 93 00 00 	sts	0x0000, r24
    display[0].oldRowCtlPtr = &rowCtlGreen[0][0];
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	90 93 00 00 	sts	0x0000, r25
     552:	80 93 00 00 	sts	0x0000, r24
    display[1].oldRowCtlPtr = &rowCtlGreen[1][0];
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	90 93 00 00 	sts	0x0000, r25
     55e:	80 93 00 00 	sts	0x0000, r24
    display[0].currentColumnBit = 7;
     562:	87 e0       	ldi	r24, 0x07	; 7
     564:	80 93 00 00 	sts	0x0000, r24
    display[1].currentColumnBit = 7;
     568:	87 e0       	ldi	r24, 0x07	; 7
     56a:	80 93 00 00 	sts	0x0000, r24

#endif
#ifdef LTP1157
    DDRA = 0x67; /*65210 0110 0111 */
    DDRB = 0xf0; /*4567  1111 0000 */
    DDRC = 0x7f; /*0123456 0111 1111 */
    DDRD = 0x00; /* */
    DDRE = 0x80; /* 7 1000 0000*/
    DDRF = 0xce; /* 76321 1100 1110 */
    DDRG = 0x18; /* 34 0001 1000 */
    display[0].litPort = PORTA;
    display[0].litBit = 5;
#endif
#ifdef LTP1157 
    DDRA  = 0xff;		/* 76543210 1111 1111 */
    PORTA = 0xff;
    DDRB  = 0xf0;		/* 7654 1111 0000 */
    PORTB = 0xf0;
    DDRC  = 0xff;		/* 76543210 1111 1111 */
    PORTC = 0xff;
    DDRD  = 0x07;		/* 210 0000 0111 */
    PORTD = 0x07;
    DDRE  = 0x0c;		/* 32 0000 1100 */
    PORTE = 0x0c;
    DDRF  = 0xff;		/* 76543210 1111 1111 */
    PORTF = 0xff;
    DDRG  = 0x1f;		/* 43210 0001 1111 */
    PORTG = 0x1f;
    display[0].litPort = PORTC;
    display[0].litBit = 4;
    display[1].litPort = PORTB;
    display[1].litBit = 6;
#endif
    dm_setsense(0, 0, 0);       /* disable sense */
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    dm_setsense(0, 5, 0);       /* disable sense */
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	65 e0       	ldi	r22, 0x05	; 5
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <dm_setChar>:
/*   TCCR0A = _BV(CS01);		/* Timer 0 prescaler =CLK/256 */ 
/*   TIMSK0 |= _BV(TOIE0); */

    SDEBUG(msgBoot);
    SDEBUG(msgCR);

}


void dm_setChar(u08 which, u08 set)
{
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	22 97       	sbiw	r28, 0x02	; 2
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	6a 83       	std	Y+2, r22	; 0x02
    display[which].charIndex = set;
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	48 2f       	mov	r20, r24
     5a4:	55 27       	eor	r21, r21
     5a6:	ca 01       	movw	r24, r20
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	9c 01       	movw	r18, r24
     5b6:	22 0f       	add	r18, r18
     5b8:	33 1f       	adc	r19, r19
     5ba:	22 0f       	add	r18, r18
     5bc:	33 1f       	adc	r19, r19
     5be:	82 0f       	add	r24, r18
     5c0:	93 1f       	adc	r25, r19
     5c2:	84 0f       	add	r24, r20
     5c4:	95 1f       	adc	r25, r21
     5c6:	fc 01       	movw	r30, r24
     5c8:	e0 50       	subi	r30, 0x00	; 0
     5ca:	f0 40       	sbci	r31, 0x00	; 0
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	80 83       	st	Z, r24
    dm_applyTransforms(which);
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     5d6:	22 96       	adiw	r28, 0x02	; 2
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <dm_applyTransforms>:
}

static void dm_applyTransforms(u08 which)
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	69 97       	sbiw	r28, 0x19	; 25
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	89 8b       	std	Y+17, r24	; 0x11
    u08 count;
    u08 transform;
    struct _display * disp = &display[which];
     5fe:	89 89       	ldd	r24, Y+17	; 0x11
     600:	48 2f       	mov	r20, r24
     602:	55 27       	eor	r21, r21
     604:	ca 01       	movw	r24, r20
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	9c 01       	movw	r18, r24
     614:	22 0f       	add	r18, r18
     616:	33 1f       	adc	r19, r19
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	84 0f       	add	r24, r20
     622:	95 1f       	adc	r25, r21
     624:	80 50       	subi	r24, 0x00	; 0
     626:	90 40       	sbci	r25, 0x00	; 0
     628:	9e 87       	std	Y+14, r25	; 0x0e
     62a:	8d 87       	std	Y+13, r24	; 0x0d
    u08 * dataPtr = font5x7 + (disp->charIndex * NUM_COLUMNS);
     62c:	ed 85       	ldd	r30, Y+13	; 0x0d
     62e:	fe 85       	ldd	r31, Y+14	; 0x0e
     630:	80 81       	ld	r24, Z
     632:	28 2f       	mov	r18, r24
     634:	33 27       	eor	r19, r19
     636:	c9 01       	movw	r24, r18
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	82 0f       	add	r24, r18
     642:	93 1f       	adc	r25, r19
     644:	80 50       	subi	r24, 0x00	; 0
     646:	90 40       	sbci	r25, 0x00	; 0
     648:	9c 87       	std	Y+12, r25	; 0x0c
     64a:	8b 87       	std	Y+11, r24	; 0x0b

/*   cbi(TIMSK0, TOIE0); */
/*   TIMSK0 &= ~_BV(TOIE0); */

    if (disp->flags & FLAG_PROGCOLS)
     64c:	ed 85       	ldd	r30, Y+13	; 0x0d
     64e:	fe 85       	ldd	r31, Y+14	; 0x0e
     650:	82 81       	ldd	r24, Z+2	; 0x02
     652:	99 27       	eor	r25, r25
     654:	80 71       	andi	r24, 0x10	; 16
     656:	90 70       	andi	r25, 0x00	; 0
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	01 f0       	breq	.+0      	; 0x65c <dm_applyTransforms+0x74>
    {
        for (count = 0; count < NUM_COLUMNS; count++)
     65c:	18 8a       	std	Y+16, r1	; 0x10
     65e:	00 c0       	rjmp	.+0      	; 0x660 <dm_applyTransforms+0x78>
        {
            disp->bitsOut[count] = disp->progColumn[count];
     660:	88 89       	ldd	r24, Y+16	; 0x10
     662:	48 2f       	mov	r20, r24
     664:	55 27       	eor	r21, r21
     666:	88 89       	ldd	r24, Y+16	; 0x10
     668:	28 2f       	mov	r18, r24
     66a:	33 27       	eor	r19, r19
     66c:	8d 85       	ldd	r24, Y+13	; 0x0d
     66e:	9e 85       	ldd	r25, Y+14	; 0x0e
     670:	82 0f       	add	r24, r18
     672:	93 1f       	adc	r25, r19
     674:	fc 01       	movw	r30, r24
     676:	74 96       	adiw	r30, 0x14	; 20
     678:	20 81       	ld	r18, Z
     67a:	8d 85       	ldd	r24, Y+13	; 0x0d
     67c:	9e 85       	ldd	r25, Y+14	; 0x0e
     67e:	84 0f       	add	r24, r20
     680:	95 1f       	adc	r25, r21
     682:	fc 01       	movw	r30, r24
     684:	79 96       	adiw	r30, 0x19	; 25
     686:	20 83       	st	Z, r18
     688:	88 89       	ldd	r24, Y+16	; 0x10
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	88 8b       	std	Y+16, r24	; 0x10
     68e:	88 89       	ldd	r24, Y+16	; 0x10
     690:	85 30       	cpi	r24, 0x05	; 5
     692:	00 f0       	brcs	.+0      	; 0x694 <dm_applyTransforms+0xac>
     694:	00 c0       	rjmp	.+0      	; 0x696 <dm_applyTransforms+0xae>
        }
    }
    else
    {
        for (count = 0; count < NUM_COLUMNS; count++)
     696:	18 8a       	std	Y+16, r1	; 0x10
     698:	00 c0       	rjmp	.+0      	; 0x69a <dm_applyTransforms+0xb2>
        {
            disp->bitsOut[count] = pgm_read_byte_near(dataPtr++);
     69a:	88 89       	ldd	r24, Y+16	; 0x10
     69c:	48 2f       	mov	r20, r24
     69e:	55 27       	eor	r21, r21
     6a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6a4:	9a 87       	std	Y+10, r25	; 0x0a
     6a6:	89 87       	std	Y+9, r24	; 0x09
     6a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	9c 87       	std	Y+12, r25	; 0x0c
     6b0:	8b 87       	std	Y+11, r24	; 0x0b
     6b2:	e9 85       	ldd	r30, Y+9	; 0x09
     6b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     6b6:	84 91       	lpm	r24, Z
     6b8:	88 87       	std	Y+8, r24	; 0x08
     6ba:	28 85       	ldd	r18, Y+8	; 0x08
     6bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     6be:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c0:	84 0f       	add	r24, r20
     6c2:	95 1f       	adc	r25, r21
     6c4:	fc 01       	movw	r30, r24
     6c6:	79 96       	adiw	r30, 0x19	; 25
     6c8:	20 83       	st	Z, r18
     6ca:	88 89       	ldd	r24, Y+16	; 0x10
     6cc:	8f 5f       	subi	r24, 0xFF	; 255
     6ce:	88 8b       	std	Y+16, r24	; 0x10
     6d0:	88 89       	ldd	r24, Y+16	; 0x10
     6d2:	85 30       	cpi	r24, 0x05	; 5
     6d4:	00 f0       	brcs	.+0      	; 0x6d6 <dm_applyTransforms+0xee>
        }
    }
  
    disp->colIndex = 0;
     6d6:	ed 85       	ldd	r30, Y+13	; 0x0d
     6d8:	fe 85       	ldd	r31, Y+14	; 0x0e
     6da:	11 82       	std	Z+1, r1	; 0x01
    /* test */
    disp->currentColumnBit = 8;
     6dc:	ed 85       	ldd	r30, Y+13	; 0x0d
     6de:	fe 85       	ldd	r31, Y+14	; 0x0e
     6e0:	88 e0       	ldi	r24, 0x08	; 8
     6e2:	87 8f       	std	Z+31, r24	; 0x1f

    dm_dumpTxList(display);
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>

    transform = dm_findFirstTransform(disp);
     6ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     6f0:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     6f4:	8f 87       	std	Y+15, r24	; 0x0f
    while ((transform & 0x0f) != TRANSFORM_EOL)
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <dm_applyTransforms+0x110>
    {
        int tmp = (int)disp;
     6f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     6fc:	9f 83       	std	Y+7, r25	; 0x07
     6fe:	8e 83       	std	Y+6, r24	; 0x06
        u08 data;
        u08 count2;
        //      SDEBUG(msgTransformIs);
        //      SNUMBER(transform & 0x0f);
        //      SDEBUG(msgCR);
        switch (transform & 0x0f)
     700:	8f 85       	ldd	r24, Y+15	; 0x0f
     702:	99 27       	eor	r25, r25
     704:	9c 01       	movw	r18, r24
     706:	2f 70       	andi	r18, 0x0F	; 15
     708:	30 70       	andi	r19, 0x00	; 0
     70a:	39 8f       	std	Y+25, r19	; 0x19
     70c:	28 8f       	std	Y+24, r18	; 0x18
     70e:	88 8d       	ldd	r24, Y+24	; 0x18
     710:	99 8d       	ldd	r25, Y+25	; 0x19
     712:	85 30       	cpi	r24, 0x05	; 5
     714:	91 05       	cpc	r25, r1
     716:	04 f4       	brge	.+0      	; 0x718 <dm_applyTransforms+0x130>
     718:	28 8d       	ldd	r18, Y+24	; 0x18
     71a:	39 8d       	ldd	r19, Y+25	; 0x19
     71c:	23 30       	cpi	r18, 0x03	; 3
     71e:	31 05       	cpc	r19, r1
     720:	04 f0       	brlt	.+0      	; 0x722 <dm_applyTransforms+0x13a>
     722:	00 c0       	rjmp	.+0      	; 0x724 <dm_applyTransforms+0x13c>
     724:	88 8d       	ldd	r24, Y+24	; 0x18
     726:	99 8d       	ldd	r25, Y+25	; 0x19
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	91 05       	cpc	r25, r1
     72c:	01 f4       	brne	.+0      	; 0x72e <dm_applyTransforms+0x146>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <dm_applyTransforms+0x148>
     730:	28 8d       	ldd	r18, Y+24	; 0x18
     732:	39 8d       	ldd	r19, Y+25	; 0x19
     734:	22 30       	cpi	r18, 0x02	; 2
     736:	31 05       	cpc	r19, r1
     738:	04 f0       	brlt	.+0      	; 0x73a <dm_applyTransforms+0x152>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <dm_applyTransforms+0x154>
     73c:	88 8d       	ldd	r24, Y+24	; 0x18
     73e:	99 8d       	ldd	r25, Y+25	; 0x19
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	01 f0       	breq	.+0      	; 0x744 <dm_applyTransforms+0x15c>
     744:	00 c0       	rjmp	.+0      	; 0x746 <dm_applyTransforms+0x15e>
     746:	28 8d       	ldd	r18, Y+24	; 0x18
     748:	39 8d       	ldd	r19, Y+25	; 0x19
     74a:	25 30       	cpi	r18, 0x05	; 5
     74c:	31 05       	cpc	r19, r1
     74e:	01 f4       	brne	.+0      	; 0x750 <dm_applyTransforms+0x168>
     750:	00 c0       	rjmp	.+0      	; 0x752 <dm_applyTransforms+0x16a>
     752:	88 8d       	ldd	r24, Y+24	; 0x18
     754:	99 8d       	ldd	r25, Y+25	; 0x19
     756:	86 30       	cpi	r24, 0x06	; 6
     758:	91 05       	cpc	r25, r1
     75a:	01 f4       	brne	.+0      	; 0x75c <dm_applyTransforms+0x174>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <dm_applyTransforms+0x176>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <dm_applyTransforms+0x178>
        {

        case TRANSFORM_FLIP:
        {
            for (count2 = 0; count2 < NUM_COLUMNS; count2++)
     760:	1c 82       	std	Y+4, r1	; 0x04
     762:	00 c0       	rjmp	.+0      	; 0x764 <dm_applyTransforms+0x17c>
            {
                data = disp->bitsOut[count2];
     764:	8c 81       	ldd	r24, Y+4	; 0x04
     766:	28 2f       	mov	r18, r24
     768:	33 27       	eor	r19, r19
     76a:	8d 85       	ldd	r24, Y+13	; 0x0d
     76c:	9e 85       	ldd	r25, Y+14	; 0x0e
     76e:	82 0f       	add	r24, r18
     770:	93 1f       	adc	r25, r19
     772:	fc 01       	movw	r30, r24
     774:	79 96       	adiw	r30, 0x19	; 25
     776:	80 81       	ld	r24, Z
     778:	8d 83       	std	Y+5, r24	; 0x05
                data = ((data & 0xAA) >>  1) | ((data & 0x55) <<  1);
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	99 27       	eor	r25, r25
     77e:	8a 7a       	andi	r24, 0xAA	; 170
     780:	90 70       	andi	r25, 0x00	; 0
     782:	95 95       	asr	r25
     784:	87 95       	ror	r24
     786:	28 2f       	mov	r18, r24
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	99 27       	eor	r25, r25
     78c:	85 75       	andi	r24, 0x55	; 85
     78e:	90 70       	andi	r25, 0x00	; 0
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	82 2b       	or	r24, r18
     796:	8d 83       	std	Y+5, r24	; 0x05
                data = ((data & 0xCC) >>  2) | ((data & 0x33) <<  2);
     798:	8d 81       	ldd	r24, Y+5	; 0x05
     79a:	99 27       	eor	r25, r25
     79c:	8c 7c       	andi	r24, 0xCC	; 204
     79e:	90 70       	andi	r25, 0x00	; 0
     7a0:	95 95       	asr	r25
     7a2:	87 95       	ror	r24
     7a4:	95 95       	asr	r25
     7a6:	87 95       	ror	r24
     7a8:	28 2f       	mov	r18, r24
     7aa:	8d 81       	ldd	r24, Y+5	; 0x05
     7ac:	99 27       	eor	r25, r25
     7ae:	83 73       	andi	r24, 0x33	; 51
     7b0:	90 70       	andi	r25, 0x00	; 0
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	82 2b       	or	r24, r18
     7bc:	8d 83       	std	Y+5, r24	; 0x05
                data = (data >> 4) | (data << 4);
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	82 95       	swap	r24
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	28 2f       	mov	r18, r24
     7c6:	8d 81       	ldd	r24, Y+5	; 0x05
     7c8:	99 27       	eor	r25, r25
     7ca:	82 95       	swap	r24
     7cc:	92 95       	swap	r25
     7ce:	90 7f       	andi	r25, 0xF0	; 240
     7d0:	98 27       	eor	r25, r24
     7d2:	80 7f       	andi	r24, 0xF0	; 240
     7d4:	98 27       	eor	r25, r24
     7d6:	82 2b       	or	r24, r18
     7d8:	8d 83       	std	Y+5, r24	; 0x05
                data = data >> 1;
     7da:	8d 81       	ldd	r24, Y+5	; 0x05
     7dc:	86 95       	lsr	r24
     7de:	8d 83       	std	Y+5, r24	; 0x05
                disp->bitsOut[count2] = data;
     7e0:	8c 81       	ldd	r24, Y+4	; 0x04
     7e2:	28 2f       	mov	r18, r24
     7e4:	33 27       	eor	r19, r19
     7e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	fc 01       	movw	r30, r24
     7f0:	79 96       	adiw	r30, 0x19	; 25
     7f2:	8d 81       	ldd	r24, Y+5	; 0x05
     7f4:	80 83       	st	Z, r24
     7f6:	8c 81       	ldd	r24, Y+4	; 0x04
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
     7fa:	8c 83       	std	Y+4, r24	; 0x04
     7fc:	8c 81       	ldd	r24, Y+4	; 0x04
     7fe:	85 30       	cpi	r24, 0x05	; 5
     800:	00 f4       	brcc	.+0      	; 0x802 <dm_applyTransforms+0x21a>
     802:	00 c0       	rjmp	.+0      	; 0x804 <dm_applyTransforms+0x21c>
            }
        }
        break;
     804:	00 c0       	rjmp	.+0      	; 0x806 <dm_applyTransforms+0x21e>

        case TRANSFORM_MIRROR:
        {
            u08 temp;
            temp = disp->bitsOut[0];
     806:	ed 85       	ldd	r30, Y+13	; 0x0d
     808:	fe 85       	ldd	r31, Y+14	; 0x0e
     80a:	81 8d       	ldd	r24, Z+25	; 0x19
     80c:	8b 83       	std	Y+3, r24	; 0x03
            disp->bitsOut[0] = disp->bitsOut[4];
     80e:	ed 85       	ldd	r30, Y+13	; 0x0d
     810:	fe 85       	ldd	r31, Y+14	; 0x0e
     812:	85 8d       	ldd	r24, Z+29	; 0x1d
     814:	ed 85       	ldd	r30, Y+13	; 0x0d
     816:	fe 85       	ldd	r31, Y+14	; 0x0e
     818:	81 8f       	std	Z+25, r24	; 0x19
            disp->bitsOut[4] = disp->bitsOut[1];
     81a:	ed 85       	ldd	r30, Y+13	; 0x0d
     81c:	fe 85       	ldd	r31, Y+14	; 0x0e
     81e:	82 8d       	ldd	r24, Z+26	; 0x1a
     820:	ed 85       	ldd	r30, Y+13	; 0x0d
     822:	fe 85       	ldd	r31, Y+14	; 0x0e
     824:	85 8f       	std	Z+29, r24	; 0x1d
            disp->bitsOut[1] = disp->bitsOut[3];
     826:	ed 85       	ldd	r30, Y+13	; 0x0d
     828:	fe 85       	ldd	r31, Y+14	; 0x0e
     82a:	84 8d       	ldd	r24, Z+28	; 0x1c
     82c:	ed 85       	ldd	r30, Y+13	; 0x0d
     82e:	fe 85       	ldd	r31, Y+14	; 0x0e
     830:	82 8f       	std	Z+26, r24	; 0x1a
            disp->bitsOut[3] = disp->bitsOut[4];
     832:	ed 85       	ldd	r30, Y+13	; 0x0d
     834:	fe 85       	ldd	r31, Y+14	; 0x0e
     836:	85 8d       	ldd	r24, Z+29	; 0x1d
     838:	ed 85       	ldd	r30, Y+13	; 0x0d
     83a:	fe 85       	ldd	r31, Y+14	; 0x0e
     83c:	84 8f       	std	Z+28, r24	; 0x1c
            disp->bitsOut[4] = temp;
     83e:	ed 85       	ldd	r30, Y+13	; 0x0d
     840:	fe 85       	ldd	r31, Y+14	; 0x0e
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	85 8f       	std	Z+29, r24	; 0x1d
        }
        break;
     846:	00 c0       	rjmp	.+0      	; 0x848 <dm_applyTransforms+0x260>
	  
        case TRANSFORM_REVERSE: 
        { 
            for (count2 = 0; count2 < NUM_COLUMNS; count2++) 
     848:	1c 82       	std	Y+4, r1	; 0x04
     84a:	00 c0       	rjmp	.+0      	; 0x84c <dm_applyTransforms+0x264>
            { 
                disp->bitsOut[count2] = ~disp->bitsOut[count2] & 0x7f;
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	48 2f       	mov	r20, r24
     850:	55 27       	eor	r21, r21
     852:	8c 81       	ldd	r24, Y+4	; 0x04
     854:	28 2f       	mov	r18, r24
     856:	33 27       	eor	r19, r19
     858:	8d 85       	ldd	r24, Y+13	; 0x0d
     85a:	9e 85       	ldd	r25, Y+14	; 0x0e
     85c:	82 0f       	add	r24, r18
     85e:	93 1f       	adc	r25, r19
     860:	fc 01       	movw	r30, r24
     862:	79 96       	adiw	r30, 0x19	; 25
     864:	80 81       	ld	r24, Z
     866:	80 95       	com	r24
     868:	28 2f       	mov	r18, r24
     86a:	2f 77       	andi	r18, 0x7F	; 127
     86c:	8d 85       	ldd	r24, Y+13	; 0x0d
     86e:	9e 85       	ldd	r25, Y+14	; 0x0e
     870:	84 0f       	add	r24, r20
     872:	95 1f       	adc	r25, r21
     874:	fc 01       	movw	r30, r24
     876:	79 96       	adiw	r30, 0x19	; 25
     878:	20 83       	st	Z, r18
     87a:	8c 81       	ldd	r24, Y+4	; 0x04
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	8c 83       	std	Y+4, r24	; 0x04
     880:	8c 81       	ldd	r24, Y+4	; 0x04
     882:	85 30       	cpi	r24, 0x05	; 5
     884:	00 f0       	brcs	.+0      	; 0x886 <dm_applyTransforms+0x29e>
            } 
        } 
        break; 
     886:	00 c0       	rjmp	.+0      	; 0x888 <dm_applyTransforms+0x2a0>

        case TRANSFORM_ROLL_VERT:
        case TRANSFORM_ROLL_HORZ:
        {
            u08 data;
            data = dm_getTransformData(disp, 0);
     888:	8d 85       	ldd	r24, Y+13	; 0x0d
     88a:	9e 85       	ldd	r25, Y+14	; 0x0e
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     892:	8a 83       	std	Y+2, r24	; 0x02
            switch (data & 0xf0)
     894:	8a 81       	ldd	r24, Y+2	; 0x02
     896:	99 27       	eor	r25, r25
     898:	9c 01       	movw	r18, r24
     89a:	20 7f       	andi	r18, 0xF0	; 240
     89c:	30 70       	andi	r19, 0x00	; 0
     89e:	3f 8b       	std	Y+23, r19	; 0x17
     8a0:	2e 8b       	std	Y+22, r18	; 0x16
     8a2:	8e 89       	ldd	r24, Y+22	; 0x16
     8a4:	9f 89       	ldd	r25, Y+23	; 0x17
     8a6:	80 32       	cpi	r24, 0x20	; 32
     8a8:	91 05       	cpc	r25, r1
     8aa:	01 f0       	breq	.+0      	; 0x8ac <dm_applyTransforms+0x2c4>
     8ac:	2e 89       	ldd	r18, Y+22	; 0x16
     8ae:	3f 89       	ldd	r19, Y+23	; 0x17
     8b0:	21 32       	cpi	r18, 0x21	; 33
     8b2:	31 05       	cpc	r19, r1
     8b4:	04 f4       	brge	.+0      	; 0x8b6 <dm_applyTransforms+0x2ce>
     8b6:	8e 89       	ldd	r24, Y+22	; 0x16
     8b8:	9f 89       	ldd	r25, Y+23	; 0x17
     8ba:	80 31       	cpi	r24, 0x10	; 16
     8bc:	91 05       	cpc	r25, r1
     8be:	01 f0       	breq	.+0      	; 0x8c0 <dm_applyTransforms+0x2d8>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <dm_applyTransforms+0x2da>
     8c2:	2e 89       	ldd	r18, Y+22	; 0x16
     8c4:	3f 89       	ldd	r19, Y+23	; 0x17
     8c6:	20 33       	cpi	r18, 0x30	; 48
     8c8:	31 05       	cpc	r19, r1
     8ca:	01 f0       	breq	.+0      	; 0x8cc <dm_applyTransforms+0x2e4>
     8cc:	8e 89       	ldd	r24, Y+22	; 0x16
     8ce:	9f 89       	ldd	r25, Y+23	; 0x17
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	01 f0       	breq	.+0      	; 0x8d6 <dm_applyTransforms+0x2ee>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <dm_applyTransforms+0x2f0>
            {
            case DIR_UP: dm_rollUp(disp, data & 0x0f); break;
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	28 2f       	mov	r18, r24
     8dc:	2f 70       	andi	r18, 0x0F	; 15
     8de:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e2:	62 2f       	mov	r22, r18
     8e4:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <dm_applyTransforms+0x302>
            case DIR_DOWN: dm_rollUp(disp, NUM_ROWS - (data & 0x0f)); break;
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	98 2f       	mov	r25, r24
     8ee:	9f 70       	andi	r25, 0x0F	; 15
     8f0:	87 e0       	ldi	r24, 0x07	; 7
     8f2:	28 2f       	mov	r18, r24
     8f4:	29 1b       	sub	r18, r25
     8f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8fa:	62 2f       	mov	r22, r18
     8fc:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     900:	00 c0       	rjmp	.+0      	; 0x902 <dm_applyTransforms+0x31a>
            case DIR_LEFT: dm_rollLeft(disp, data & 0x0f); break;
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	28 2f       	mov	r18, r24
     906:	2f 70       	andi	r18, 0x0F	; 15
     908:	8d 85       	ldd	r24, Y+13	; 0x0d
     90a:	9e 85       	ldd	r25, Y+14	; 0x0e
     90c:	62 2f       	mov	r22, r18
     90e:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     912:	00 c0       	rjmp	.+0      	; 0x914 <dm_applyTransforms+0x32c>
            case DIR_RIGHT: dm_rollLeft(disp, NUM_COLUMNS - (data & 0x0f)); break;
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	98 2f       	mov	r25, r24
     918:	9f 70       	andi	r25, 0x0F	; 15
     91a:	85 e0       	ldi	r24, 0x05	; 5
     91c:	28 2f       	mov	r18, r24
     91e:	29 1b       	sub	r18, r25
     920:	8d 85       	ldd	r24, Y+13	; 0x0d
     922:	9e 85       	ldd	r25, Y+14	; 0x0e
     924:	62 2f       	mov	r22, r18
     926:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            }
        }
        break;
     92a:	00 c0       	rjmp	.+0      	; 0x92c <dm_applyTransforms+0x344>

        case TRANSFORM_SHIFT_VERT:
        {
            u08 data;
            data = dm_getTransformData(disp, 0);
     92c:	8d 85       	ldd	r24, Y+13	; 0x0d
     92e:	9e 85       	ldd	r25, Y+14	; 0x0e
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     936:	89 83       	std	Y+1, r24	; 0x01
            switch (data & 0xf0)
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	99 27       	eor	r25, r25
     93c:	9c 01       	movw	r18, r24
     93e:	20 7f       	andi	r18, 0xF0	; 240
     940:	30 70       	andi	r19, 0x00	; 0
     942:	3d 8b       	std	Y+21, r19	; 0x15
     944:	2c 8b       	std	Y+20, r18	; 0x14
     946:	8c 89       	ldd	r24, Y+20	; 0x14
     948:	9d 89       	ldd	r25, Y+21	; 0x15
     94a:	80 31       	cpi	r24, 0x10	; 16
     94c:	91 05       	cpc	r25, r1
     94e:	01 f0       	breq	.+0      	; 0x950 <dm_applyTransforms+0x368>
     950:	2c 89       	ldd	r18, Y+20	; 0x14
     952:	3d 89       	ldd	r19, Y+21	; 0x15
     954:	20 32       	cpi	r18, 0x20	; 32
     956:	31 05       	cpc	r19, r1
     958:	01 f0       	breq	.+0      	; 0x95a <dm_applyTransforms+0x372>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <dm_applyTransforms+0x374>
            {
            case DIR_UP:
                data &= 0x0f;
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	8f 70       	andi	r24, 0x0F	; 15
     960:	89 83       	std	Y+1, r24	; 0x01
                dm_rollUp(disp, data);
     962:	8d 85       	ldd	r24, Y+13	; 0x0d
     964:	9e 85       	ldd	r25, Y+14	; 0x0e
     966:	69 81       	ldd	r22, Y+1	; 0x01
     968:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                dm_clearRows(disp, NUM_ROWS - data, data);
     96c:	97 e0       	ldi	r25, 0x07	; 7
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	29 2f       	mov	r18, r25
     972:	28 1b       	sub	r18, r24
     974:	8d 85       	ldd	r24, Y+13	; 0x0d
     976:	9e 85       	ldd	r25, Y+14	; 0x0e
     978:	49 81       	ldd	r20, Y+1	; 0x01
     97a:	62 2f       	mov	r22, r18
     97c:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                break;
     980:	00 c0       	rjmp	.+0      	; 0x982 <dm_applyTransforms+0x39a>
		
            case DIR_DOWN:
                data &= 0x0f;
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	8f 70       	andi	r24, 0x0F	; 15
     986:	89 83       	std	Y+1, r24	; 0x01
                dm_rollUp(disp, NUM_ROWS - data);
     988:	97 e0       	ldi	r25, 0x07	; 7
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	29 2f       	mov	r18, r25
     98e:	28 1b       	sub	r18, r24
     990:	8d 85       	ldd	r24, Y+13	; 0x0d
     992:	9e 85       	ldd	r25, Y+14	; 0x0e
     994:	62 2f       	mov	r22, r18
     996:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                dm_clearRows(disp, 0, data);
     99a:	8d 85       	ldd	r24, Y+13	; 0x0d
     99c:	9e 85       	ldd	r25, Y+14	; 0x0e
     99e:	49 81       	ldd	r20, Y+1	; 0x01
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                break;
            }
            break;
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <dm_applyTransforms+0x3c0>
        }

        case TRANSFORM_SHIFT_HORZ:
        {
            data = dm_getTransformData(disp, 0);
     9a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     9b2:	8d 83       	std	Y+5, r24	; 0x05
            switch (data & 0xf0)
     9b4:	8d 81       	ldd	r24, Y+5	; 0x05
     9b6:	99 27       	eor	r25, r25
     9b8:	9c 01       	movw	r18, r24
     9ba:	20 7f       	andi	r18, 0xF0	; 240
     9bc:	30 70       	andi	r19, 0x00	; 0
     9be:	3b 8b       	std	Y+19, r19	; 0x13
     9c0:	2a 8b       	std	Y+18, r18	; 0x12
     9c2:	8a 89       	ldd	r24, Y+18	; 0x12
     9c4:	9b 89       	ldd	r25, Y+19	; 0x13
     9c6:	80 33       	cpi	r24, 0x30	; 48
     9c8:	91 05       	cpc	r25, r1
     9ca:	01 f0       	breq	.+0      	; 0x9cc <dm_applyTransforms+0x3e4>
     9cc:	2a 89       	ldd	r18, Y+18	; 0x12
     9ce:	3b 89       	ldd	r19, Y+19	; 0x13
     9d0:	20 34       	cpi	r18, 0x40	; 64
     9d2:	31 05       	cpc	r19, r1
     9d4:	01 f0       	breq	.+0      	; 0x9d6 <dm_applyTransforms+0x3ee>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <dm_applyTransforms+0x3f0>
            {
            case DIR_LEFT:
                data &= 0x0f;
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	8d 83       	std	Y+5, r24	; 0x05
                dm_rollLeft(disp, data);
     9de:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e2:	6d 81       	ldd	r22, Y+5	; 0x05
     9e4:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                dm_clearColumns(disp, NUM_COLUMNS - data, data);
     9e8:	95 e0       	ldi	r25, 0x05	; 5
     9ea:	8d 81       	ldd	r24, Y+5	; 0x05
     9ec:	29 2f       	mov	r18, r25
     9ee:	28 1b       	sub	r18, r24
     9f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9f4:	4d 81       	ldd	r20, Y+5	; 0x05
     9f6:	62 2f       	mov	r22, r18
     9f8:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                break;
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <dm_applyTransforms+0x416>
		
            case DIR_RIGHT:
                data &= 0x0f;
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	8f 70       	andi	r24, 0x0F	; 15
     a02:	8d 83       	std	Y+5, r24	; 0x05
                dm_rollLeft(disp, NUM_COLUMNS - data);
     a04:	95 e0       	ldi	r25, 0x05	; 5
     a06:	8d 81       	ldd	r24, Y+5	; 0x05
     a08:	29 2f       	mov	r18, r25
     a0a:	28 1b       	sub	r18, r24
     a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a10:	62 2f       	mov	r22, r18
     a12:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                dm_clearColumns(disp, 0, data);
     a16:	8d 85       	ldd	r24, Y+13	; 0x0d
     a18:	9e 85       	ldd	r25, Y+14	; 0x0e
     a1a:	4d 81       	ldd	r20, Y+5	; 0x05
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                break;
            }
        }
        break;

        }
        SDEBUG(msgCR);
        transform = dm_findNextTransform(disp);
     a22:	8d 85       	ldd	r24, Y+13	; 0x0d
     a24:	9e 85       	ldd	r25, Y+14	; 0x0e
     a26:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     a2a:	8f 87       	std	Y+15, r24	; 0x0f
     a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a2e:	99 27       	eor	r25, r25
     a30:	8f 70       	andi	r24, 0x0F	; 15
     a32:	90 70       	andi	r25, 0x00	; 0
     a34:	8f 30       	cpi	r24, 0x0F	; 15
     a36:	91 05       	cpc	r25, r1
     a38:	01 f0       	breq	.+0      	; 0xa3a <dm_applyTransforms+0x452>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <dm_applyTransforms+0x454>
     a3c:	69 96       	adiw	r28, 0x19	; 25
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <dm_setReverse>:
    }
/*   sei(); */
/*   TIMSK0 |= _BV(TOIE0); */
}

void dm_setReverse(u08 which, u08 set)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	24 97       	sbiw	r28, 0x04	; 4
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	6a 83       	std	Y+2, r22	; 0x02
    switch (set)
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	28 2f       	mov	r18, r24
     a6a:	33 27       	eor	r19, r19
     a6c:	3c 83       	std	Y+4, r19	; 0x04
     a6e:	2b 83       	std	Y+3, r18	; 0x03
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	9c 81       	ldd	r25, Y+4	; 0x04
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	01 f0       	breq	.+0      	; 0xa78 <dm_setReverse+0x2a>
     a78:	2b 81       	ldd	r18, Y+3	; 0x03
     a7a:	3c 81       	ldd	r19, Y+4	; 0x04
     a7c:	21 30       	cpi	r18, 0x01	; 1
     a7e:	31 05       	cpc	r19, r1
     a80:	01 f0       	breq	.+0      	; 0xa82 <dm_setReverse+0x34>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <dm_setReverse+0x36>
    {
    case 0: dm_deleteTransform(which, TRANSFORM_REVERSE); break;
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <dm_setReverse+0x40>
    case 1: dm_setTransform(which, TRANSFORM_REVERSE); break;
     a8e:	62 e0       	ldi	r22, 0x02	; 2
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    }
    dm_applyTransforms(which);
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     a9c:	24 96       	adiw	r28, 0x04	; 4
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <dm_setFlip>:
}

void dm_setFlip(u08 which, u08 set)
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	24 97       	sbiw	r28, 0x04	; 4
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	6a 83       	std	Y+2, r22	; 0x02
    switch (set)
     ac6:	8a 81       	ldd	r24, Y+2	; 0x02
     ac8:	28 2f       	mov	r18, r24
     aca:	33 27       	eor	r19, r19
     acc:	3c 83       	std	Y+4, r19	; 0x04
     ace:	2b 83       	std	Y+3, r18	; 0x03
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	9c 81       	ldd	r25, Y+4	; 0x04
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	01 f0       	breq	.+0      	; 0xad8 <dm_setFlip+0x2a>
     ad8:	2b 81       	ldd	r18, Y+3	; 0x03
     ada:	3c 81       	ldd	r19, Y+4	; 0x04
     adc:	21 30       	cpi	r18, 0x01	; 1
     ade:	31 05       	cpc	r19, r1
     ae0:	01 f0       	breq	.+0      	; 0xae2 <dm_setFlip+0x34>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <dm_setFlip+0x36>
    {
    case 0: dm_deleteTransform(which, TRANSFORM_FLIP); break;
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <dm_setFlip+0x40>
    case 1: dm_setTransform(which, TRANSFORM_FLIP); break;
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    }
    dm_applyTransforms(which);
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     afc:	24 96       	adiw	r28, 0x04	; 4
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <dm_setMirror>:
}

void dm_setMirror(u08 which, u08 set)
{
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	24 97       	sbiw	r28, 0x04	; 4
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	6a 83       	std	Y+2, r22	; 0x02
    switch (set)
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	28 2f       	mov	r18, r24
     b2a:	33 27       	eor	r19, r19
     b2c:	3c 83       	std	Y+4, r19	; 0x04
     b2e:	2b 83       	std	Y+3, r18	; 0x03
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	01 f0       	breq	.+0      	; 0xb38 <dm_setMirror+0x2a>
     b38:	2b 81       	ldd	r18, Y+3	; 0x03
     b3a:	3c 81       	ldd	r19, Y+4	; 0x04
     b3c:	21 30       	cpi	r18, 0x01	; 1
     b3e:	31 05       	cpc	r19, r1
     b40:	01 f0       	breq	.+0      	; 0xb42 <dm_setMirror+0x34>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <dm_setMirror+0x36>
    {
    case 0: dm_deleteTransform(which, TRANSFORM_MIRROR); break;
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <dm_setMirror+0x40>
    case 1: dm_setTransform(which, TRANSFORM_MIRROR); break;
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    }
    dm_applyTransforms(which);
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     b5c:	24 96       	adiw	r28, 0x04	; 4
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <dm_setDim>:
}

void dm_setDim(u08 which, u08 set)
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	24 97       	sbiw	r28, 0x04	; 4
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	6a 83       	std	Y+2, r22	; 0x02
    switch (set)
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	28 2f       	mov	r18, r24
     b8a:	33 27       	eor	r19, r19
     b8c:	3c 83       	std	Y+4, r19	; 0x04
     b8e:	2b 83       	std	Y+3, r18	; 0x03
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	9c 81       	ldd	r25, Y+4	; 0x04
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	01 f0       	breq	.+0      	; 0xb98 <dm_setDim+0x2a>
     b98:	2b 81       	ldd	r18, Y+3	; 0x03
     b9a:	3c 81       	ldd	r19, Y+4	; 0x04
     b9c:	21 30       	cpi	r18, 0x01	; 1
     b9e:	31 05       	cpc	r19, r1
     ba0:	01 f0       	breq	.+0      	; 0xba2 <dm_setDim+0x34>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <dm_setDim+0x36>
    {
    case 0: display[which].flags &= ~FLAG_DIM; break;
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	68 2f       	mov	r22, r24
     ba8:	77 27       	eor	r23, r23
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	48 2f       	mov	r20, r24
     bae:	55 27       	eor	r21, r21
     bb0:	ca 01       	movw	r24, r20
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	9c 01       	movw	r18, r24
     bc0:	22 0f       	add	r18, r18
     bc2:	33 1f       	adc	r19, r19
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	84 0f       	add	r24, r20
     bce:	95 1f       	adc	r25, r21
     bd0:	fc 01       	movw	r30, r24
     bd2:	e0 50       	subi	r30, 0x00	; 0
     bd4:	f0 40       	sbci	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	47 7f       	andi	r20, 0xF7	; 247
     bdc:	cb 01       	movw	r24, r22
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	9c 01       	movw	r18, r24
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	86 0f       	add	r24, r22
     bfa:	97 1f       	adc	r25, r23
     bfc:	fc 01       	movw	r30, r24
     bfe:	e0 50       	subi	r30, 0x00	; 0
     c00:	f0 40       	sbci	r31, 0x00	; 0
     c02:	40 83       	st	Z, r20
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <dm_setDim+0x98>
    case 1: display[which].flags |= FLAG_DIM; break;
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	68 2f       	mov	r22, r24
     c0a:	77 27       	eor	r23, r23
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	48 2f       	mov	r20, r24
     c10:	55 27       	eor	r21, r21
     c12:	ca 01       	movw	r24, r20
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	9c 01       	movw	r18, r24
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	84 0f       	add	r24, r20
     c30:	95 1f       	adc	r25, r21
     c32:	fc 01       	movw	r30, r24
     c34:	e0 50       	subi	r30, 0x00	; 0
     c36:	f0 40       	sbci	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	48 60       	ori	r20, 0x08	; 8
     c3e:	cb 01       	movw	r24, r22
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	9c 01       	movw	r18, r24
     c4e:	22 0f       	add	r18, r18
     c50:	33 1f       	adc	r19, r19
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	82 0f       	add	r24, r18
     c58:	93 1f       	adc	r25, r19
     c5a:	86 0f       	add	r24, r22
     c5c:	97 1f       	adc	r25, r23
     c5e:	fc 01       	movw	r30, r24
     c60:	e0 50       	subi	r30, 0x00	; 0
     c62:	f0 40       	sbci	r31, 0x00	; 0
     c64:	40 83       	st	Z, r20
     c66:	24 96       	adiw	r28, 0x04	; 4
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <dm_displayProgrammed>:
    }
}


void dm_displayProgrammed(u08 which, u08 set)
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	24 97       	sbiw	r28, 0x04	; 4
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	6a 83       	std	Y+2, r22	; 0x02
    switch (set)
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	28 2f       	mov	r18, r24
     c94:	33 27       	eor	r19, r19
     c96:	3c 83       	std	Y+4, r19	; 0x04
     c98:	2b 83       	std	Y+3, r18	; 0x03
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	01 f0       	breq	.+0      	; 0xca2 <dm_displayProgrammed+0x2a>
     ca2:	2b 81       	ldd	r18, Y+3	; 0x03
     ca4:	3c 81       	ldd	r19, Y+4	; 0x04
     ca6:	21 30       	cpi	r18, 0x01	; 1
     ca8:	31 05       	cpc	r19, r1
     caa:	01 f0       	breq	.+0      	; 0xcac <dm_displayProgrammed+0x34>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <dm_displayProgrammed+0x36>
    {
    case 0: display[which].flags &= ~FLAG_PROGCOLS; break;
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	68 2f       	mov	r22, r24
     cb2:	77 27       	eor	r23, r23
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	48 2f       	mov	r20, r24
     cb8:	55 27       	eor	r21, r21
     cba:	ca 01       	movw	r24, r20
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	9c 01       	movw	r18, r24
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	84 0f       	add	r24, r20
     cd8:	95 1f       	adc	r25, r21
     cda:	fc 01       	movw	r30, r24
     cdc:	e0 50       	subi	r30, 0x00	; 0
     cde:	f0 40       	sbci	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	4f 7e       	andi	r20, 0xEF	; 239
     ce6:	cb 01       	movw	r24, r22
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	9c 01       	movw	r18, r24
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	86 0f       	add	r24, r22
     d04:	97 1f       	adc	r25, r23
     d06:	fc 01       	movw	r30, r24
     d08:	e0 50       	subi	r30, 0x00	; 0
     d0a:	f0 40       	sbci	r31, 0x00	; 0
     d0c:	40 83       	st	Z, r20
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <dm_displayProgrammed+0x98>
    case 1: display[which].flags |= FLAG_PROGCOLS; break;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	68 2f       	mov	r22, r24
     d14:	77 27       	eor	r23, r23
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	48 2f       	mov	r20, r24
     d1a:	55 27       	eor	r21, r21
     d1c:	ca 01       	movw	r24, r20
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	9c 01       	movw	r18, r24
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	84 0f       	add	r24, r20
     d3a:	95 1f       	adc	r25, r21
     d3c:	fc 01       	movw	r30, r24
     d3e:	e0 50       	subi	r30, 0x00	; 0
     d40:	f0 40       	sbci	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	40 61       	ori	r20, 0x10	; 16
     d48:	cb 01       	movw	r24, r22
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	9c 01       	movw	r18, r24
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	22 0f       	add	r18, r18
     d5e:	33 1f       	adc	r19, r19
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	86 0f       	add	r24, r22
     d66:	97 1f       	adc	r25, r23
     d68:	fc 01       	movw	r30, r24
     d6a:	e0 50       	subi	r30, 0x00	; 0
     d6c:	f0 40       	sbci	r31, 0x00	; 0
     d6e:	40 83       	st	Z, r20
    }
    dm_applyTransforms(which);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     d76:	24 96       	adiw	r28, 0x04	; 4
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <dm_blank>:
}

void dm_blank(u08 which, u08 set)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	22 97       	sbiw	r28, 0x02	; 2
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	6a 83       	std	Y+2, r22	; 0x02
    if (set)
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	88 23       	and	r24, r24
     da4:	01 f0       	breq	.+0      	; 0xda6 <dm_blank+0x1e>
    {
        display[which].flags |= FLAG_BLANK;
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	68 2f       	mov	r22, r24
     daa:	77 27       	eor	r23, r23
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	48 2f       	mov	r20, r24
     db0:	55 27       	eor	r21, r21
     db2:	ca 01       	movw	r24, r20
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	9c 01       	movw	r18, r24
     dc2:	22 0f       	add	r18, r18
     dc4:	33 1f       	adc	r19, r19
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	82 0f       	add	r24, r18
     dcc:	93 1f       	adc	r25, r19
     dce:	84 0f       	add	r24, r20
     dd0:	95 1f       	adc	r25, r21
     dd2:	fc 01       	movw	r30, r24
     dd4:	e0 50       	subi	r30, 0x00	; 0
     dd6:	f0 40       	sbci	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	40 62       	ori	r20, 0x20	; 32
     dde:	cb 01       	movw	r24, r22
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	9c 01       	movw	r18, r24
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	86 0f       	add	r24, r22
     dfc:	97 1f       	adc	r25, r23
     dfe:	fc 01       	movw	r30, r24
     e00:	e0 50       	subi	r30, 0x00	; 0
     e02:	f0 40       	sbci	r31, 0x00	; 0
     e04:	40 83       	st	Z, r20
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <dm_blank+0x80>
    }
    else
    {
        display[which].flags &= ~FLAG_BLANK;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	68 2f       	mov	r22, r24
     e0c:	77 27       	eor	r23, r23
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	48 2f       	mov	r20, r24
     e12:	55 27       	eor	r21, r21
     e14:	ca 01       	movw	r24, r20
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	9c 01       	movw	r18, r24
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	22 0f       	add	r18, r18
     e2a:	33 1f       	adc	r19, r19
     e2c:	82 0f       	add	r24, r18
     e2e:	93 1f       	adc	r25, r19
     e30:	84 0f       	add	r24, r20
     e32:	95 1f       	adc	r25, r21
     e34:	fc 01       	movw	r30, r24
     e36:	e0 50       	subi	r30, 0x00	; 0
     e38:	f0 40       	sbci	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	4f 7d       	andi	r20, 0xDF	; 223
     e40:	cb 01       	movw	r24, r22
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	9c 01       	movw	r18, r24
     e50:	22 0f       	add	r18, r18
     e52:	33 1f       	adc	r19, r19
     e54:	22 0f       	add	r18, r18
     e56:	33 1f       	adc	r19, r19
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	86 0f       	add	r24, r22
     e5e:	97 1f       	adc	r25, r23
     e60:	fc 01       	movw	r30, r24
     e62:	e0 50       	subi	r30, 0x00	; 0
     e64:	f0 40       	sbci	r31, 0x00	; 0
     e66:	40 83       	st	Z, r20
     e68:	22 96       	adiw	r28, 0x02	; 2
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <dm_shift>:
    }
}

void dm_shift(u08 which, u08 direction, u08 count)
{
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	29 97       	sbiw	r28, 0x09	; 9
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	8b 83       	std	Y+3, r24	; 0x03
     e90:	6c 83       	std	Y+4, r22	; 0x04
     e92:	4d 83       	std	Y+5, r20	; 0x05
    struct _display * disp = &display[which];
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	48 2f       	mov	r20, r24
     e98:	55 27       	eor	r21, r21
     e9a:	ca 01       	movw	r24, r20
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	9c 01       	movw	r18, r24
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	82 0f       	add	r24, r18
     eb4:	93 1f       	adc	r25, r19
     eb6:	84 0f       	add	r24, r20
     eb8:	95 1f       	adc	r25, r21
     eba:	80 50       	subi	r24, 0x00	; 0
     ebc:	90 40       	sbci	r25, 0x00	; 0
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
    switch (count)
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	99 27       	eor	r25, r25
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	01 f0       	breq	.+0      	; 0xeca <dm_shift+0x50>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <dm_shift+0x52>
    {
    case 0:
        switch (direction)
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	28 2f       	mov	r18, r24
     ed0:	33 27       	eor	r19, r19
     ed2:	39 87       	std	Y+9, r19	; 0x09
     ed4:	28 87       	std	Y+8, r18	; 0x08
     ed6:	88 85       	ldd	r24, Y+8	; 0x08
     ed8:	99 85       	ldd	r25, Y+9	; 0x09
     eda:	8c 36       	cpi	r24, 0x6C	; 108
     edc:	91 05       	cpc	r25, r1
     ede:	01 f0       	breq	.+0      	; 0xee0 <dm_shift+0x66>
     ee0:	28 85       	ldd	r18, Y+8	; 0x08
     ee2:	39 85       	ldd	r19, Y+9	; 0x09
     ee4:	2d 36       	cpi	r18, 0x6D	; 109
     ee6:	31 05       	cpc	r19, r1
     ee8:	04 f4       	brge	.+0      	; 0xeea <dm_shift+0x70>
     eea:	88 85       	ldd	r24, Y+8	; 0x08
     eec:	99 85       	ldd	r25, Y+9	; 0x09
     eee:	84 36       	cpi	r24, 0x64	; 100
     ef0:	91 05       	cpc	r25, r1
     ef2:	01 f0       	breq	.+0      	; 0xef4 <dm_shift+0x7a>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <dm_shift+0x7c>
     ef6:	28 85       	ldd	r18, Y+8	; 0x08
     ef8:	39 85       	ldd	r19, Y+9	; 0x09
     efa:	22 37       	cpi	r18, 0x72	; 114
     efc:	31 05       	cpc	r19, r1
     efe:	01 f0       	breq	.+0      	; 0xf00 <dm_shift+0x86>
     f00:	88 85       	ldd	r24, Y+8	; 0x08
     f02:	99 85       	ldd	r25, Y+9	; 0x09
     f04:	85 37       	cpi	r24, 0x75	; 117
     f06:	91 05       	cpc	r25, r1
     f08:	01 f0       	breq	.+0      	; 0xf0a <dm_shift+0x90>
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <dm_shift+0x92>
        {
        case 'u':
        case 'd':
            dm_deleteTransform(which, TRANSFORM_SHIFT_VERT);
     f0c:	65 e0       	ldi	r22, 0x05	; 5
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <dm_shift+0x9c>

        case 'l':
        case 'r':
            dm_deleteTransform(which, TRANSFORM_SHIFT_HORZ);
     f16:	66 e0       	ldi	r22, 0x06	; 6
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
        }
        break;
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <dm_shift+0xa6>

/*     case 1: */
    default:
        switch (direction)
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	28 2f       	mov	r18, r24
     f24:	33 27       	eor	r19, r19
     f26:	3f 83       	std	Y+7, r19	; 0x07
     f28:	2e 83       	std	Y+6, r18	; 0x06
     f2a:	8e 81       	ldd	r24, Y+6	; 0x06
     f2c:	9f 81       	ldd	r25, Y+7	; 0x07
     f2e:	8c 36       	cpi	r24, 0x6C	; 108
     f30:	91 05       	cpc	r25, r1
     f32:	01 f0       	breq	.+0      	; 0xf34 <dm_shift+0xba>
     f34:	2e 81       	ldd	r18, Y+6	; 0x06
     f36:	3f 81       	ldd	r19, Y+7	; 0x07
     f38:	2d 36       	cpi	r18, 0x6D	; 109
     f3a:	31 05       	cpc	r19, r1
     f3c:	04 f4       	brge	.+0      	; 0xf3e <dm_shift+0xc4>
     f3e:	8e 81       	ldd	r24, Y+6	; 0x06
     f40:	9f 81       	ldd	r25, Y+7	; 0x07
     f42:	84 36       	cpi	r24, 0x64	; 100
     f44:	91 05       	cpc	r25, r1
     f46:	01 f0       	breq	.+0      	; 0xf48 <dm_shift+0xce>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <dm_shift+0xd0>
     f4a:	2e 81       	ldd	r18, Y+6	; 0x06
     f4c:	3f 81       	ldd	r19, Y+7	; 0x07
     f4e:	22 37       	cpi	r18, 0x72	; 114
     f50:	31 05       	cpc	r19, r1
     f52:	01 f0       	breq	.+0      	; 0xf54 <dm_shift+0xda>
     f54:	8e 81       	ldd	r24, Y+6	; 0x06
     f56:	9f 81       	ldd	r25, Y+7	; 0x07
     f58:	85 37       	cpi	r24, 0x75	; 117
     f5a:	91 05       	cpc	r25, r1
     f5c:	01 f0       	breq	.+0      	; 0xf5e <dm_shift+0xe4>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <dm_shift+0xe6>
        {
        case 'u':
            dm_setTransform(which, TRANSFORM_SHIFT_VERT);
     f60:	65 e0       	ldi	r22, 0x05	; 5
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_UP | count);
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	28 2f       	mov	r18, r24
     f6c:	20 61       	ori	r18, 0x10	; 16
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	42 2f       	mov	r20, r18
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <dm_shift+0x102>

        case 'd':
            dm_setTransform(which, TRANSFORM_SHIFT_VERT);
     f7c:	65 e0       	ldi	r22, 0x05	; 5
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_DOWN | count);
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	28 2f       	mov	r18, r24
     f88:	20 62       	ori	r18, 0x20	; 32
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	42 2f       	mov	r20, r18
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <dm_shift+0x11e>

        case 'l':
            dm_setTransform(which, TRANSFORM_SHIFT_HORZ);
     f98:	66 e0       	ldi	r22, 0x06	; 6
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_LEFT | count);
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	28 2f       	mov	r18, r24
     fa4:	20 63       	ori	r18, 0x30	; 48
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	42 2f       	mov	r20, r18
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <dm_shift+0x13a>

        case 'r':
            dm_setTransform(which, TRANSFORM_SHIFT_HORZ);
     fb4:	66 e0       	ldi	r22, 0x06	; 6
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_RIGHT | count);
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	28 2f       	mov	r18, r24
     fc0:	20 64       	ori	r18, 0x40	; 64
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	42 2f       	mov	r20, r18
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
        }
    }
    dm_applyTransforms(which);
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
     fd4:	29 96       	adiw	r28, 0x09	; 9
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <dm_roll>:
}

void dm_roll(u08 which, u08 direction, u08 count)
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	29 97       	sbiw	r28, 0x09	; 9
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	8b 83       	std	Y+3, r24	; 0x03
     ffc:	6c 83       	std	Y+4, r22	; 0x04
     ffe:	4d 83       	std	Y+5, r20	; 0x05
    struct _display * disp = &display[which];
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	48 2f       	mov	r20, r24
    1004:	55 27       	eor	r21, r21
    1006:	ca 01       	movw	r24, r20
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	9c 01       	movw	r18, r24
    1016:	22 0f       	add	r18, r18
    1018:	33 1f       	adc	r19, r19
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	84 0f       	add	r24, r20
    1024:	95 1f       	adc	r25, r21
    1026:	80 50       	subi	r24, 0x00	; 0
    1028:	90 40       	sbci	r25, 0x00	; 0
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
    switch (count)
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	99 27       	eor	r25, r25
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	01 f0       	breq	.+0      	; 0x1036 <dm_roll+0x50>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <dm_roll+0x52>
    {
    case 0:
        switch (direction)
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	28 2f       	mov	r18, r24
    103c:	33 27       	eor	r19, r19
    103e:	39 87       	std	Y+9, r19	; 0x09
    1040:	28 87       	std	Y+8, r18	; 0x08
    1042:	88 85       	ldd	r24, Y+8	; 0x08
    1044:	99 85       	ldd	r25, Y+9	; 0x09
    1046:	8c 36       	cpi	r24, 0x6C	; 108
    1048:	91 05       	cpc	r25, r1
    104a:	01 f0       	breq	.+0      	; 0x104c <dm_roll+0x66>
    104c:	28 85       	ldd	r18, Y+8	; 0x08
    104e:	39 85       	ldd	r19, Y+9	; 0x09
    1050:	2d 36       	cpi	r18, 0x6D	; 109
    1052:	31 05       	cpc	r19, r1
    1054:	04 f4       	brge	.+0      	; 0x1056 <dm_roll+0x70>
    1056:	88 85       	ldd	r24, Y+8	; 0x08
    1058:	99 85       	ldd	r25, Y+9	; 0x09
    105a:	84 36       	cpi	r24, 0x64	; 100
    105c:	91 05       	cpc	r25, r1
    105e:	01 f0       	breq	.+0      	; 0x1060 <dm_roll+0x7a>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <dm_roll+0x7c>
    1062:	28 85       	ldd	r18, Y+8	; 0x08
    1064:	39 85       	ldd	r19, Y+9	; 0x09
    1066:	22 37       	cpi	r18, 0x72	; 114
    1068:	31 05       	cpc	r19, r1
    106a:	01 f0       	breq	.+0      	; 0x106c <dm_roll+0x86>
    106c:	88 85       	ldd	r24, Y+8	; 0x08
    106e:	99 85       	ldd	r25, Y+9	; 0x09
    1070:	85 37       	cpi	r24, 0x75	; 117
    1072:	91 05       	cpc	r25, r1
    1074:	01 f0       	breq	.+0      	; 0x1076 <dm_roll+0x90>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <dm_roll+0x92>
        {
        case 'u':
        case 'd':
            dm_deleteTransform(which, TRANSFORM_ROLL_VERT);
    1078:	63 e0       	ldi	r22, 0x03	; 3
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <dm_roll+0x9c>

        case 'l':
        case 'r':
            dm_deleteTransform(which, TRANSFORM_ROLL_HORZ);
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
        }
        break;
    108a:	00 c0       	rjmp	.+0      	; 0x108c <dm_roll+0xa6>

    default:
        switch (direction)
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	28 2f       	mov	r18, r24
    1090:	33 27       	eor	r19, r19
    1092:	3f 83       	std	Y+7, r19	; 0x07
    1094:	2e 83       	std	Y+6, r18	; 0x06
    1096:	8e 81       	ldd	r24, Y+6	; 0x06
    1098:	9f 81       	ldd	r25, Y+7	; 0x07
    109a:	8c 36       	cpi	r24, 0x6C	; 108
    109c:	91 05       	cpc	r25, r1
    109e:	01 f0       	breq	.+0      	; 0x10a0 <dm_roll+0xba>
    10a0:	2e 81       	ldd	r18, Y+6	; 0x06
    10a2:	3f 81       	ldd	r19, Y+7	; 0x07
    10a4:	2d 36       	cpi	r18, 0x6D	; 109
    10a6:	31 05       	cpc	r19, r1
    10a8:	04 f4       	brge	.+0      	; 0x10aa <dm_roll+0xc4>
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	9f 81       	ldd	r25, Y+7	; 0x07
    10ae:	84 36       	cpi	r24, 0x64	; 100
    10b0:	91 05       	cpc	r25, r1
    10b2:	01 f0       	breq	.+0      	; 0x10b4 <dm_roll+0xce>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <dm_roll+0xd0>
    10b6:	2e 81       	ldd	r18, Y+6	; 0x06
    10b8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ba:	22 37       	cpi	r18, 0x72	; 114
    10bc:	31 05       	cpc	r19, r1
    10be:	01 f0       	breq	.+0      	; 0x10c0 <dm_roll+0xda>
    10c0:	8e 81       	ldd	r24, Y+6	; 0x06
    10c2:	9f 81       	ldd	r25, Y+7	; 0x07
    10c4:	85 37       	cpi	r24, 0x75	; 117
    10c6:	91 05       	cpc	r25, r1
    10c8:	01 f0       	breq	.+0      	; 0x10ca <dm_roll+0xe4>
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <dm_roll+0xe6>
        {
        case 'u':
            dm_setTransform(which, TRANSFORM_ROLL_VERT);
    10cc:	63 e0       	ldi	r22, 0x03	; 3
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_UP | count);
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	28 2f       	mov	r18, r24
    10d8:	20 61       	ori	r18, 0x10	; 16
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	42 2f       	mov	r20, r18
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
    10e6:	00 c0       	rjmp	.+0      	; 0x10e8 <dm_roll+0x102>

        case 'd':
            dm_setTransform(which, TRANSFORM_ROLL_VERT);
    10e8:	63 e0       	ldi	r22, 0x03	; 3
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_DOWN | count);
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	28 2f       	mov	r18, r24
    10f4:	20 62       	ori	r18, 0x20	; 32
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	42 2f       	mov	r20, r18
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <dm_roll+0x11e>

        case 'l':
            dm_setTransform(which, TRANSFORM_ROLL_HORZ);
    1104:	64 e0       	ldi	r22, 0x04	; 4
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_LEFT | count);
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	28 2f       	mov	r18, r24
    1110:	20 63       	ori	r18, 0x30	; 48
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	42 2f       	mov	r20, r18
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <dm_roll+0x13a>

        case 'r':
            dm_setTransform(which, TRANSFORM_ROLL_HORZ);
    1120:	64 e0       	ldi	r22, 0x04	; 4
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            dm_setTransformData(disp, 0, DIR_RIGHT | count);
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	28 2f       	mov	r18, r24
    112c:	20 64       	ori	r18, 0x40	; 64
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	42 2f       	mov	r20, r18
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
        }
    }
    dm_applyTransforms(which);
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    1140:	29 96       	adiw	r28, 0x09	; 9
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <dm_setPalette>:
}


void dm_setPalette(u08 which, u08 index)
{
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	22 97       	sbiw	r28, 0x02	; 2
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
/*   cli(); */
#ifdef PALETTE
    display[which].paletteCountdown = PALETTE_COUNTDOWN_INIT;
#endif
    display[which].paletteSelected = index;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	48 2f       	mov	r20, r24
    116e:	55 27       	eor	r21, r21
    1170:	ca 01       	movw	r24, r20
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	9c 01       	movw	r18, r24
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	84 0f       	add	r24, r20
    118e:	95 1f       	adc	r25, r21
    1190:	fc 01       	movw	r30, r24
    1192:	e0 50       	subi	r30, 0x00	; 0
    1194:	f0 40       	sbci	r31, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 83       	st	Z, r24
    119a:	22 96       	adiw	r28, 0x02	; 2
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <dm_deleteTransform>:
/*   sei(); */
}

static void dm_deleteTransform(u08 which, u08 command)
{
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	26 97       	sbiw	r28, 0x06	; 6
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	8d 83       	std	Y+5, r24	; 0x05
    11c2:	6e 83       	std	Y+6, r22	; 0x06
    struct _display * disp = &display[which];
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	48 2f       	mov	r20, r24
    11c8:	55 27       	eor	r21, r21
    11ca:	ca 01       	movw	r24, r20
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	9c 01       	movw	r18, r24
    11da:	22 0f       	add	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	22 0f       	add	r18, r18
    11e0:	33 1f       	adc	r19, r19
    11e2:	82 0f       	add	r24, r18
    11e4:	93 1f       	adc	r25, r19
    11e6:	84 0f       	add	r24, r20
    11e8:	95 1f       	adc	r25, r21
    11ea:	80 50       	subi	r24, 0x00	; 0
    11ec:	90 40       	sbci	r25, 0x00	; 0
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    u08 test = (dm_findFirstTransform(disp) & 0x0f);
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    11fa:	8f 70       	andi	r24, 0x0F	; 15
    11fc:	8a 83       	std	Y+2, r24	; 0x02

    while (test != TRANSFORM_EOL)
    11fe:	00 c0       	rjmp	.+0      	; 0x1200 <dm_deleteTransform+0x54>
    {
        if (test == command)
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	8e 81       	ldd	r24, Y+6	; 0x06
    1204:	98 17       	cp	r25, r24
    1206:	01 f4       	brne	.+0      	; 0x1208 <dm_deleteTransform+0x5c>
        {
            u08 length = dm_cmdLength(command);
    1208:	8e 81       	ldd	r24, Y+6	; 0x06
    120a:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    120e:	89 83       	std	Y+1, r24	; 0x01
            dm_dumpTxList(disp);
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>

            memmove(&disp->txList[disp->txListBookmark],
    1218:	eb 81       	ldd	r30, Y+3	; 0x03
    121a:	fc 81       	ldd	r31, Y+4	; 0x04
    121c:	83 89       	ldd	r24, Z+19	; 0x13
    121e:	28 2f       	mov	r18, r24
    1220:	33 27       	eor	r19, r19
    1222:	80 e1       	ldi	r24, 0x10	; 16
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	ac 01       	movw	r20, r24
    1228:	42 1b       	sub	r20, r18
    122a:	53 0b       	sbc	r21, r19
    122c:	9a 01       	movw	r18, r20
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	99 27       	eor	r25, r25
    1232:	a9 01       	movw	r20, r18
    1234:	48 1b       	sub	r20, r24
    1236:	59 0b       	sbc	r21, r25
    1238:	ca 01       	movw	r24, r20
    123a:	dc 01       	movw	r26, r24
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	ac 01       	movw	r20, r24
    1242:	4d 5f       	subi	r20, 0xFD	; 253
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	eb 81       	ldd	r30, Y+3	; 0x03
    1248:	fc 81       	ldd	r31, Y+4	; 0x04
    124a:	83 89       	ldd	r24, Z+19	; 0x13
    124c:	28 2f       	mov	r18, r24
    124e:	33 27       	eor	r19, r19
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	99 27       	eor	r25, r25
    1254:	82 0f       	add	r24, r18
    1256:	93 1f       	adc	r25, r19
    1258:	ba 01       	movw	r22, r20
    125a:	68 0f       	add	r22, r24
    125c:	79 1f       	adc	r23, r25
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	9c 01       	movw	r18, r24
    1264:	2d 5f       	subi	r18, 0xFD	; 253
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	eb 81       	ldd	r30, Y+3	; 0x03
    126a:	fc 81       	ldd	r31, Y+4	; 0x04
    126c:	83 89       	ldd	r24, Z+19	; 0x13
    126e:	99 27       	eor	r25, r25
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
    1274:	ad 01       	movw	r20, r26
    1276:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
                    &disp->txList[disp->txListBookmark + length],
                    TRANSFORM_LIST_LENGTH - disp->txListBookmark - length);

            dm_dumpTxList(disp);
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
            break;
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <dm_deleteTransform+0xd8>
        }
        test = (dm_findNextTransform(disp) & 0x0f);
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    128c:	8f 70       	andi	r24, 0x0F	; 15
    128e:	8a 83       	std	Y+2, r24	; 0x02
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	8f 30       	cpi	r24, 0x0F	; 15
    1294:	01 f0       	breq	.+0      	; 0x1296 <dm_deleteTransform+0xea>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <dm_deleteTransform+0xec>
    1298:	26 96       	adiw	r28, 0x06	; 6
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <dm_setTransform>:
    }

}

static void dm_setTransform(u08 which, u08 command)
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	25 97       	sbiw	r28, 0x05	; 5
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	8c 83       	std	Y+4, r24	; 0x04
    12c0:	6d 83       	std	Y+5, r22	; 0x05
    struct _display * disp = &display[which];
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	48 2f       	mov	r20, r24
    12c6:	55 27       	eor	r21, r21
    12c8:	ca 01       	movw	r24, r20
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	9c 01       	movw	r18, r24
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	82 0f       	add	r24, r18
    12e2:	93 1f       	adc	r25, r19
    12e4:	84 0f       	add	r24, r20
    12e6:	95 1f       	adc	r25, r21
    12e8:	80 50       	subi	r24, 0x00	; 0
    12ea:	90 40       	sbci	r25, 0x00	; 0
    12ec:	9b 83       	std	Y+3, r25	; 0x03
    12ee:	8a 83       	std	Y+2, r24	; 0x02


    u08 test = dm_findFirstTransform(disp);
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	9b 81       	ldd	r25, Y+3	; 0x03
    12f4:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    12f8:	89 83       	std	Y+1, r24	; 0x01
  
    while ((test & 0x0f) != TRANSFORM_EOL)
    12fa:	00 c0       	rjmp	.+0      	; 0x12fc <dm_setTransform+0x52>
    {
        if (test == command)
    12fc:	99 81       	ldd	r25, Y+1	; 0x01
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	98 17       	cp	r25, r24
    1302:	01 f0       	breq	.+0      	; 0x1304 <dm_setTransform+0x5a>
        {
            break;
        }
        test = dm_findNextTransform(disp);
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	9b 81       	ldd	r25, Y+3	; 0x03
    1308:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	99 27       	eor	r25, r25
    1312:	8f 70       	andi	r24, 0x0F	; 15
    1314:	90 70       	andi	r25, 0x00	; 0
    1316:	8f 30       	cpi	r24, 0x0F	; 15
    1318:	91 05       	cpc	r25, r1
    131a:	01 f4       	brne	.+0      	; 0x131c <dm_setTransform+0x72>
    }

    disp->txList[disp->txListBookmark++] = command;
    131c:	ea 81       	ldd	r30, Y+2	; 0x02
    131e:	fb 81       	ldd	r31, Y+3	; 0x03
    1320:	43 89       	ldd	r20, Z+19	; 0x13
    1322:	24 2f       	mov	r18, r20
    1324:	33 27       	eor	r19, r19
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	82 0f       	add	r24, r18
    132c:	93 1f       	adc	r25, r19
    132e:	fc 01       	movw	r30, r24
    1330:	33 96       	adiw	r30, 0x03	; 3
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	80 83       	st	Z, r24
    1336:	84 2f       	mov	r24, r20
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	ea 81       	ldd	r30, Y+2	; 0x02
    133c:	fb 81       	ldd	r31, Y+3	; 0x03
    133e:	83 8b       	std	Z+19, r24	; 0x13
    if ((test & 0x0f) == TRANSFORM_EOL)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	99 27       	eor	r25, r25
    1344:	8f 70       	andi	r24, 0x0F	; 15
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	8f 30       	cpi	r24, 0x0F	; 15
    134a:	91 05       	cpc	r25, r1
    134c:	01 f4       	brne	.+0      	; 0x134e <dm_setTransform+0xa4>
    {
        disp->txList[disp->txListBookmark] = TRANSFORM_EOL;
    134e:	ea 81       	ldd	r30, Y+2	; 0x02
    1350:	fb 81       	ldd	r31, Y+3	; 0x03
    1352:	83 89       	ldd	r24, Z+19	; 0x13
    1354:	28 2f       	mov	r18, r24
    1356:	33 27       	eor	r19, r19
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	82 0f       	add	r24, r18
    135e:	93 1f       	adc	r25, r19
    1360:	fc 01       	movw	r30, r24
    1362:	33 96       	adiw	r30, 0x03	; 3
    1364:	8f e0       	ldi	r24, 0x0F	; 15
    1366:	80 83       	st	Z, r24
    1368:	25 96       	adiw	r28, 0x05	; 5
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <dm_findFirstTransform>:
    }
}

static u08 dm_findFirstTransform(struct _display * display)
{
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	22 97       	sbiw	r28, 0x02	; 2
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    display->txListBookmark = 0;
    1392:	e9 81       	ldd	r30, Y+1	; 0x01
    1394:	fa 81       	ldd	r31, Y+2	; 0x02
    1396:	13 8a       	std	Z+19, r1	; 0x13
    return display->txList[0];
    1398:	e9 81       	ldd	r30, Y+1	; 0x01
    139a:	fa 81       	ldd	r31, Y+2	; 0x02
    139c:	83 81       	ldd	r24, Z+3	; 0x03
    139e:	99 27       	eor	r25, r25
    13a0:	22 96       	adiw	r28, 0x02	; 2
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <dm_cmdLength>:
}

static u08 dm_cmdLength(u08 command)
{
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	25 97       	sbiw	r28, 0x05	; 5
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	89 83       	std	Y+1, r24	; 0x01
    switch (command & 0x0f)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	99 27       	eor	r25, r25
    13cc:	9c 01       	movw	r18, r24
    13ce:	2f 70       	andi	r18, 0x0F	; 15
    13d0:	30 70       	andi	r19, 0x00	; 0
    13d2:	3d 83       	std	Y+5, r19	; 0x05
    13d4:	2c 83       	std	Y+4, r18	; 0x04
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	99 23       	and	r25, r25
    13dc:	04 f0       	brlt	.+0      	; 0x13de <dm_cmdLength+0x2c>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	23 30       	cpi	r18, 0x03	; 3
    13e4:	31 05       	cpc	r19, r1
    13e6:	04 f0       	brlt	.+0      	; 0x13e8 <dm_cmdLength+0x36>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	87 30       	cpi	r24, 0x07	; 7
    13ee:	91 05       	cpc	r25, r1
    13f0:	04 f4       	brge	.+0      	; 0x13f2 <dm_cmdLength+0x40>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <dm_cmdLength+0x42>
    {
    case TRANSFORM_FLIP:
    case TRANSFORM_MIRROR:
    case TRANSFORM_REVERSE:
        return 1;
    13f4:	21 e0       	ldi	r18, 0x01	; 1
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3b 83       	std	Y+3, r19	; 0x03
    13fa:	2a 83       	std	Y+2, r18	; 0x02
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <dm_cmdLength+0x4c>

    case TRANSFORM_ROLL_VERT:
    case TRANSFORM_ROLL_HORZ:
    case TRANSFORM_SHIFT_VERT:
    case TRANSFORM_SHIFT_HORZ:
        return 2;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9b 83       	std	Y+3, r25	; 0x03
    1404:	8a 83       	std	Y+2, r24	; 0x02
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <dm_cmdLength+0x56>
    }
    return 0;
    1408:	1b 82       	std	Y+3, r1	; 0x03
    140a:	1a 82       	std	Y+2, r1	; 0x02
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	9b 81       	ldd	r25, Y+3	; 0x03
    1410:	25 96       	adiw	r28, 0x05	; 5
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <dm_findNextTransform>:
}

static u08 dm_findNextTransform(struct _display * display)
{
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	22 97       	sbiw	r28, 0x02	; 2
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	fa 81       	ldd	r31, Y+2	; 0x02
    1440:	13 89       	ldd	r17, Z+19	; 0x13
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	83 89       	ldd	r24, Z+19	; 0x13
    1448:	28 2f       	mov	r18, r24
    144a:	33 27       	eor	r19, r19
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	fc 01       	movw	r30, r24
    1456:	33 96       	adiw	r30, 0x03	; 3
    1458:	80 81       	ld	r24, Z
    145a:	8f 70       	andi	r24, 0x0F	; 15
    145c:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    1460:	81 0f       	add	r24, r17
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	83 8b       	std	Z+19, r24	; 0x13
    return display->txList[display->txListBookmark];
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	83 89       	ldd	r24, Z+19	; 0x13
    146e:	28 2f       	mov	r18, r24
    1470:	33 27       	eor	r19, r19
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	82 0f       	add	r24, r18
    1478:	93 1f       	adc	r25, r19
    147a:	fc 01       	movw	r30, r24
    147c:	33 96       	adiw	r30, 0x03	; 3
    147e:	80 81       	ld	r24, Z
    1480:	99 27       	eor	r25, r25
    1482:	22 96       	adiw	r28, 0x02	; 2
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	08 95       	ret

00001496 <dm_getTransformData>:
}

static u08 dm_getTransformData(struct _display * display, u08 index)
{
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	23 97       	sbiw	r28, 0x03	; 3
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6b 83       	std	Y+3, r22	; 0x03
    return display->txList[display->txListBookmark + index + 1];
    14b0:	e9 81       	ldd	r30, Y+1	; 0x01
    14b2:	fa 81       	ldd	r31, Y+2	; 0x02
    14b4:	83 89       	ldd	r24, Z+19	; 0x13
    14b6:	28 2f       	mov	r18, r24
    14b8:	33 27       	eor	r19, r19
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	99 27       	eor	r25, r25
    14be:	82 0f       	add	r24, r18
    14c0:	93 1f       	adc	r25, r19
    14c2:	9c 01       	movw	r18, r24
    14c4:	2f 5f       	subi	r18, 0xFF	; 255
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	82 0f       	add	r24, r18
    14ce:	93 1f       	adc	r25, r19
    14d0:	fc 01       	movw	r30, r24
    14d2:	33 96       	adiw	r30, 0x03	; 3
    14d4:	80 81       	ld	r24, Z
    14d6:	99 27       	eor	r25, r25
    14d8:	23 96       	adiw	r28, 0x03	; 3
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <dm_setTransformData>:
}

static void dm_setTransformData(struct _display * display, u08 index, u08 data)
{
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	26 97       	sbiw	r28, 0x06	; 6
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	6d 83       	std	Y+5, r22	; 0x05
    1504:	4e 83       	std	Y+6, r20	; 0x06
    u08 * dataPtr = &display->txList[display->txListBookmark + index];
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	ac 01       	movw	r20, r24
    150c:	4d 5f       	subi	r20, 0xFD	; 253
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	eb 81       	ldd	r30, Y+3	; 0x03
    1512:	fc 81       	ldd	r31, Y+4	; 0x04
    1514:	83 89       	ldd	r24, Z+19	; 0x13
    1516:	28 2f       	mov	r18, r24
    1518:	33 27       	eor	r19, r19
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	99 27       	eor	r25, r25
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	84 0f       	add	r24, r20
    1524:	95 1f       	adc	r25, r21
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    if (*dataPtr == TRANSFORM_EOL)
    152a:	e9 81       	ldd	r30, Y+1	; 0x01
    152c:	fa 81       	ldd	r31, Y+2	; 0x02
    152e:	80 81       	ld	r24, Z
    1530:	8f 30       	cpi	r24, 0x0F	; 15
    1532:	01 f4       	brne	.+0      	; 0x1534 <dm_setTransformData+0x4a>
    {
        *dataPtr++ = data;
    1534:	e9 81       	ldd	r30, Y+1	; 0x01
    1536:	fa 81       	ldd	r31, Y+2	; 0x02
    1538:	8e 81       	ldd	r24, Y+6	; 0x06
    153a:	80 83       	st	Z, r24
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
        *dataPtr = TRANSFORM_EOL;
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	8f e0       	ldi	r24, 0x0F	; 15
    154c:	80 83       	st	Z, r24
    154e:	00 c0       	rjmp	.+0      	; 0x1550 <dm_setTransformData+0x66>
    }
    else
    {
        *dataPtr = data;
    1550:	e9 81       	ldd	r30, Y+1	; 0x01
    1552:	fa 81       	ldd	r31, Y+2	; 0x02
    1554:	8e 81       	ldd	r24, Y+6	; 0x06
    1556:	80 83       	st	Z, r24
    1558:	26 96       	adiw	r28, 0x06	; 6
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <dm_rollUp>:
    }
}

static void dm_rollUp(struct _display * display, u08 count)
{
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	26 97       	sbiw	r28, 0x06	; 6
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	9d 83       	std	Y+5, r25	; 0x05
    1580:	8c 83       	std	Y+4, r24	; 0x04
    1582:	6e 83       	std	Y+6, r22	; 0x06
    u08 temp;
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    1584:	1a 82       	std	Y+2, r1	; 0x02
    1586:	00 c0       	rjmp	.+0      	; 0x1588 <dm_rollUp+0x1e>
    {
        u08 data = display->bitsOut[index];
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	33 27       	eor	r19, r19
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	82 0f       	add	r24, r18
    1594:	93 1f       	adc	r25, r19
    1596:	fc 01       	movw	r30, r24
    1598:	79 96       	adiw	r30, 0x19	; 25
    159a:	80 81       	ld	r24, Z
    159c:	89 83       	std	Y+1, r24	; 0x01
        temp = data & ((1 << count) - 1);
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	28 2f       	mov	r18, r24
    15a2:	33 27       	eor	r19, r19
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	00 c0       	rjmp	.+0      	; 0x15aa <dm_rollUp+0x40>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	2a 95       	dec	r18
    15b0:	02 f4       	brpl	.+0      	; 0x15b2 <dm_rollUp+0x48>
    15b2:	81 50       	subi	r24, 0x01	; 1
    15b4:	98 2f       	mov	r25, r24
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	89 23       	and	r24, r25
    15ba:	8b 83       	std	Y+3, r24	; 0x03
        data >>= count;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	28 2f       	mov	r18, r24
    15c0:	33 27       	eor	r19, r19
    15c2:	8e 81       	ldd	r24, Y+6	; 0x06
    15c4:	99 27       	eor	r25, r25
    15c6:	a9 01       	movw	r20, r18
    15c8:	00 c0       	rjmp	.+0      	; 0x15ca <dm_rollUp+0x60>
    15ca:	55 95       	asr	r21
    15cc:	47 95       	ror	r20
    15ce:	8a 95       	dec	r24
    15d0:	02 f4       	brpl	.+0      	; 0x15d2 <dm_rollUp+0x68>
    15d2:	ca 01       	movw	r24, r20
    15d4:	89 83       	std	Y+1, r24	; 0x01
        data |= temp << (NUM_ROWS - count);
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	48 2f       	mov	r20, r24
    15da:	55 27       	eor	r21, r21
    15dc:	8e 81       	ldd	r24, Y+6	; 0x06
    15de:	28 2f       	mov	r18, r24
    15e0:	33 27       	eor	r19, r19
    15e2:	87 e0       	ldi	r24, 0x07	; 7
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	82 1b       	sub	r24, r18
    15e8:	93 0b       	sbc	r25, r19
    15ea:	9a 01       	movw	r18, r20
    15ec:	00 c0       	rjmp	.+0      	; 0x15ee <dm_rollUp+0x84>
    15ee:	22 0f       	add	r18, r18
    15f0:	33 1f       	adc	r19, r19
    15f2:	8a 95       	dec	r24
    15f4:	02 f4       	brpl	.+0      	; 0x15f6 <dm_rollUp+0x8c>
    15f6:	c9 01       	movw	r24, r18
    15f8:	98 2f       	mov	r25, r24
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	89 2b       	or	r24, r25
    15fe:	89 83       	std	Y+1, r24	; 0x01
        display->bitsOut[index] = data;
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	33 27       	eor	r19, r19
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	82 0f       	add	r24, r18
    160c:	93 1f       	adc	r25, r19
    160e:	fc 01       	movw	r30, r24
    1610:	79 96       	adiw	r30, 0x19	; 25
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	85 30       	cpi	r24, 0x05	; 5
    1620:	00 f4       	brcc	.+0      	; 0x1622 <dm_rollUp+0xb8>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <dm_rollUp+0xba>
    1624:	26 96       	adiw	r28, 0x06	; 6
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <dm_rollLeft>:
    }
}

static void dm_rollLeft(struct _display * display, u08 count)
{
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	25 97       	sbiw	r28, 0x05	; 5
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	6d 83       	std	Y+5, r22	; 0x05
    u08 temp;
    u08 index;

    while (count)
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <dm_rollLeft+0x1c>
    {
        temp = display->bitsOut[0];
    1652:	eb 81       	ldd	r30, Y+3	; 0x03
    1654:	fc 81       	ldd	r31, Y+4	; 0x04
    1656:	81 8d       	ldd	r24, Z+25	; 0x19
    1658:	8a 83       	std	Y+2, r24	; 0x02
        for (index = 0; index < NUM_COLUMNS - 1; index++)
    165a:	19 82       	std	Y+1, r1	; 0x01
    165c:	00 c0       	rjmp	.+0      	; 0x165e <dm_rollLeft+0x28>
        {
            display->bitsOut[index] = display->bitsOut[index + 1];
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	48 2f       	mov	r20, r24
    1662:	55 27       	eor	r21, r21
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	99 27       	eor	r25, r25
    1668:	9c 01       	movw	r18, r24
    166a:	2f 5f       	subi	r18, 0xFF	; 255
    166c:	3f 4f       	sbci	r19, 0xFF	; 255
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	fc 01       	movw	r30, r24
    1678:	79 96       	adiw	r30, 0x19	; 25
    167a:	20 81       	ld	r18, Z
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	84 0f       	add	r24, r20
    1682:	95 1f       	adc	r25, r21
    1684:	fc 01       	movw	r30, r24
    1686:	79 96       	adiw	r30, 0x19	; 25
    1688:	20 83       	st	Z, r18
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	00 f0       	brcs	.+0      	; 0x1696 <dm_rollLeft+0x60>
        }
        display->bitsOut[NUM_COLUMNS - 1] = temp;
    1696:	eb 81       	ldd	r30, Y+3	; 0x03
    1698:	fc 81       	ldd	r31, Y+4	; 0x04
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	85 8f       	std	Z+29, r24	; 0x1d
        count--;
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	81 50       	subi	r24, 0x01	; 1
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	88 23       	and	r24, r24
    16a8:	01 f4       	brne	.+0      	; 0x16aa <dm_rollLeft+0x74>
    16aa:	25 96       	adiw	r28, 0x05	; 5
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <dm_dumpTxList>:
    }
}

static void dm_dumpTxList(struct _display * display)
{
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	22 97       	sbiw	r28, 0x02	; 2
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	22 96       	adiw	r28, 0x02	; 2
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <dm_clearRows>:
/*   u08 count = 0; */
/*   while (display->txList[count] != TRANSFORM_EOL) */
/*     { */
/*       SNUMBER(count); */
/*       SDEBUG(msgArrow); */
/*       SNUMBER(display->txList[count]); */
/*       SDEBUG(msgCR); */
/*       count++; */
/*     } */
}

static void dm_clearRows(struct _display * display, u08 start, u08 count)
{
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	25 97       	sbiw	r28, 0x05	; 5
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	9b 83       	std	Y+3, r25	; 0x03
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	6c 83       	std	Y+4, r22	; 0x04
    1700:	4d 83       	std	Y+5, r20	; 0x05
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	00 c0       	rjmp	.+0      	; 0x1706 <dm_clearRows+0x20>
    {
        display->bitsOut[index] &= ~(((1 << count) - 1) << start);
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	48 2f       	mov	r20, r24
    170a:	55 27       	eor	r21, r21
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	33 27       	eor	r19, r19
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	fc 01       	movw	r30, r24
    171c:	79 96       	adiw	r30, 0x19	; 25
    171e:	80 81       	ld	r24, Z
    1720:	68 2f       	mov	r22, r24
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	28 2f       	mov	r18, r24
    1726:	33 27       	eor	r19, r19
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	00 c0       	rjmp	.+0      	; 0x172e <dm_clearRows+0x48>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	2a 95       	dec	r18
    1734:	02 f4       	brpl	.+0      	; 0x1736 <dm_clearRows+0x50>
    1736:	9c 01       	movw	r18, r24
    1738:	21 50       	subi	r18, 0x01	; 1
    173a:	30 40       	sbci	r19, 0x00	; 0
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	99 27       	eor	r25, r25
    1740:	f9 01       	movw	r30, r18
    1742:	00 c0       	rjmp	.+0      	; 0x1744 <dm_clearRows+0x5e>
    1744:	ee 0f       	add	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	8a 95       	dec	r24
    174a:	02 f4       	brpl	.+0      	; 0x174c <dm_clearRows+0x66>
    174c:	cf 01       	movw	r24, r30
    174e:	80 95       	com	r24
    1750:	86 23       	and	r24, r22
    1752:	28 2f       	mov	r18, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	84 0f       	add	r24, r20
    175a:	95 1f       	adc	r25, r21
    175c:	fc 01       	movw	r30, r24
    175e:	79 96       	adiw	r30, 0x19	; 25
    1760:	20 83       	st	Z, r18
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	85 30       	cpi	r24, 0x05	; 5
    176c:	00 f0       	brcs	.+0      	; 0x176e <dm_clearRows+0x88>
    176e:	25 96       	adiw	r28, 0x05	; 5
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <dm_clearColumns>:
    }
}

static void dm_clearColumns(struct _display * display, u08 start, u08 count)
{
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	24 97       	sbiw	r28, 0x04	; 4
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6b 83       	std	Y+3, r22	; 0x03
    179a:	4c 83       	std	Y+4, r20	; 0x04
    do
    {
        --count;
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	81 50       	subi	r24, 0x01	; 1
    17a0:	8c 83       	std	Y+4, r24	; 0x04
        display->bitsOut[start + count] = 0;
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	33 27       	eor	r19, r19
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	99 27       	eor	r25, r25
    17ac:	28 0f       	add	r18, r24
    17ae:	39 1f       	adc	r19, r25
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	82 0f       	add	r24, r18
    17b6:	93 1f       	adc	r25, r19
    17b8:	fc 01       	movw	r30, r24
    17ba:	79 96       	adiw	r30, 0x19	; 25
    17bc:	10 82       	st	Z, r1
    } while (count > 0);
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	88 23       	and	r24, r24
    17c2:	01 f4       	brne	.+0      	; 0x17c4 <dm_clearColumns+0x44>
    17c4:	24 96       	adiw	r28, 0x04	; 4
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <dm_reset>:
}

void dm_reset(u08 which)
{
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	21 97       	sbiw	r28, 0x01	; 1
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	89 83       	std	Y+1, r24	; 0x01
    display[which].txListBookmark = 0;
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	48 2f       	mov	r20, r24
    17f0:	55 27       	eor	r21, r21
    17f2:	ca 01       	movw	r24, r20
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	9c 01       	movw	r18, r24
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	82 0f       	add	r24, r18
    180c:	93 1f       	adc	r25, r19
    180e:	84 0f       	add	r24, r20
    1810:	95 1f       	adc	r25, r21
    1812:	fc 01       	movw	r30, r24
    1814:	e0 50       	subi	r30, 0x00	; 0
    1816:	f0 40       	sbci	r31, 0x00	; 0
    1818:	10 82       	st	Z, r1
    display[which].txList[0] = TRANSFORM_EOL;
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	48 2f       	mov	r20, r24
    181e:	55 27       	eor	r21, r21
    1820:	ca 01       	movw	r24, r20
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	9c 01       	movw	r18, r24
    1830:	22 0f       	add	r18, r18
    1832:	33 1f       	adc	r19, r19
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	82 0f       	add	r24, r18
    183a:	93 1f       	adc	r25, r19
    183c:	84 0f       	add	r24, r20
    183e:	95 1f       	adc	r25, r21
    1840:	fc 01       	movw	r30, r24
    1842:	e0 50       	subi	r30, 0x00	; 0
    1844:	f0 40       	sbci	r31, 0x00	; 0
    1846:	8f e0       	ldi	r24, 0x0F	; 15
    1848:	80 83       	st	Z, r24
    dm_applyTransforms(which);
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    1850:	21 96       	adiw	r28, 0x01	; 1
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <dm_progColumn>:
}

void dm_progColumn(u08 which, u08 column, u08 data)
{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	23 97       	sbiw	r28, 0x03	; 3
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	6a 83       	std	Y+2, r22	; 0x02
    187a:	4b 83       	std	Y+3, r20	; 0x03
    display[which].progColumn[column] = data;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	48 2f       	mov	r20, r24
    1880:	55 27       	eor	r21, r21
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	68 2f       	mov	r22, r24
    1886:	77 27       	eor	r23, r23
    1888:	ca 01       	movw	r24, r20
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	9c 01       	movw	r18, r24
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	22 0f       	add	r18, r18
    189e:	33 1f       	adc	r19, r19
    18a0:	82 0f       	add	r24, r18
    18a2:	93 1f       	adc	r25, r19
    18a4:	84 0f       	add	r24, r20
    18a6:	95 1f       	adc	r25, r21
    18a8:	86 0f       	add	r24, r22
    18aa:	97 1f       	adc	r25, r23
    18ac:	fc 01       	movw	r30, r24
    18ae:	e0 50       	subi	r30, 0x00	; 0
    18b0:	f0 40       	sbci	r31, 0x00	; 0
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	80 83       	st	Z, r24
    if (display[which].flags & FLAG_PROGCOLS)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	48 2f       	mov	r20, r24
    18ba:	55 27       	eor	r21, r21
    18bc:	ca 01       	movw	r24, r20
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	9c 01       	movw	r18, r24
    18cc:	22 0f       	add	r18, r18
    18ce:	33 1f       	adc	r19, r19
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	84 0f       	add	r24, r20
    18da:	95 1f       	adc	r25, r21
    18dc:	fc 01       	movw	r30, r24
    18de:	e0 50       	subi	r30, 0x00	; 0
    18e0:	f0 40       	sbci	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	99 27       	eor	r25, r25
    18e6:	80 71       	andi	r24, 0x10	; 16
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	01 f0       	breq	.+0      	; 0x18ee <dm_progColumn+0x8c>
    {
        dm_applyTransforms(which);
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    18f4:	23 96       	adiw	r28, 0x03	; 3
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <dm_pixel>:
    }
}

void dm_pixel(u08 which, u08 set, u08 row, u08 column)
{
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	24 97       	sbiw	r28, 0x04	; 4
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	6a 83       	std	Y+2, r22	; 0x02
    1922:	4b 83       	std	Y+3, r20	; 0x03
    1924:	2c 83       	std	Y+4, r18	; 0x04
    if (set == 1)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	01 f0       	breq	.+0      	; 0x192c <dm_pixel+0x26>
    192c:	00 c0       	rjmp	.+0      	; 0x192e <dm_pixel+0x28>
    {
        display[which].progColumn[column] |= (1 << row);
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	a8 2f       	mov	r26, r24
    1932:	bb 27       	eor	r27, r27
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	08 2f       	mov	r16, r24
    1938:	11 27       	eor	r17, r17
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	48 2f       	mov	r20, r24
    193e:	55 27       	eor	r21, r21
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	68 2f       	mov	r22, r24
    1944:	77 27       	eor	r23, r23
    1946:	ca 01       	movw	r24, r20
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	9c 01       	movw	r18, r24
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	22 0f       	add	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	82 0f       	add	r24, r18
    1960:	93 1f       	adc	r25, r19
    1962:	84 0f       	add	r24, r20
    1964:	95 1f       	adc	r25, r21
    1966:	86 0f       	add	r24, r22
    1968:	97 1f       	adc	r25, r23
    196a:	fc 01       	movw	r30, r24
    196c:	e0 50       	subi	r30, 0x00	; 0
    196e:	f0 40       	sbci	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	28 2f       	mov	r18, r24
    1978:	33 27       	eor	r19, r19
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	00 c0       	rjmp	.+0      	; 0x1980 <dm_pixel+0x7a>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	2a 95       	dec	r18
    1986:	02 f4       	brpl	.+0      	; 0x1988 <dm_pixel+0x82>
    1988:	84 2b       	or	r24, r20
    198a:	48 2f       	mov	r20, r24
    198c:	cd 01       	movw	r24, r26
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	9c 01       	movw	r18, r24
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	82 0f       	add	r24, r18
    19a6:	93 1f       	adc	r25, r19
    19a8:	8a 0f       	add	r24, r26
    19aa:	9b 1f       	adc	r25, r27
    19ac:	80 0f       	add	r24, r16
    19ae:	91 1f       	adc	r25, r17
    19b0:	fc 01       	movw	r30, r24
    19b2:	e0 50       	subi	r30, 0x00	; 0
    19b4:	f0 40       	sbci	r31, 0x00	; 0
    19b6:	40 83       	st	Z, r20
    19b8:	00 c0       	rjmp	.+0      	; 0x19ba <dm_pixel+0xb4>
    }
    else
    {
        display[which].progColumn[column] &= ~(1 << row);
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	a8 2f       	mov	r26, r24
    19be:	bb 27       	eor	r27, r27
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	08 2f       	mov	r16, r24
    19c4:	11 27       	eor	r17, r17
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	48 2f       	mov	r20, r24
    19ca:	55 27       	eor	r21, r21
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	68 2f       	mov	r22, r24
    19d0:	77 27       	eor	r23, r23
    19d2:	ca 01       	movw	r24, r20
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	9c 01       	movw	r18, r24
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	82 0f       	add	r24, r18
    19ec:	93 1f       	adc	r25, r19
    19ee:	84 0f       	add	r24, r20
    19f0:	95 1f       	adc	r25, r21
    19f2:	86 0f       	add	r24, r22
    19f4:	97 1f       	adc	r25, r23
    19f6:	fc 01       	movw	r30, r24
    19f8:	e0 50       	subi	r30, 0x00	; 0
    19fa:	f0 40       	sbci	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	28 2f       	mov	r18, r24
    1a04:	33 27       	eor	r19, r19
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <dm_pixel+0x106>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	2a 95       	dec	r18
    1a12:	02 f4       	brpl	.+0      	; 0x1a14 <dm_pixel+0x10e>
    1a14:	80 95       	com	r24
    1a16:	84 23       	and	r24, r20
    1a18:	48 2f       	mov	r20, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	9c 01       	movw	r18, r24
    1a2a:	22 0f       	add	r18, r18
    1a2c:	33 1f       	adc	r19, r19
    1a2e:	22 0f       	add	r18, r18
    1a30:	33 1f       	adc	r19, r19
    1a32:	82 0f       	add	r24, r18
    1a34:	93 1f       	adc	r25, r19
    1a36:	8a 0f       	add	r24, r26
    1a38:	9b 1f       	adc	r25, r27
    1a3a:	80 0f       	add	r24, r16
    1a3c:	91 1f       	adc	r25, r17
    1a3e:	fc 01       	movw	r30, r24
    1a40:	e0 50       	subi	r30, 0x00	; 0
    1a42:	f0 40       	sbci	r31, 0x00	; 0
    1a44:	40 83       	st	Z, r20
    }
    if (display[which].flags & FLAG_PROGCOLS)
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	48 2f       	mov	r20, r24
    1a4a:	55 27       	eor	r21, r21
    1a4c:	ca 01       	movw	r24, r20
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	9c 01       	movw	r18, r24
    1a5c:	22 0f       	add	r18, r18
    1a5e:	33 1f       	adc	r19, r19
    1a60:	22 0f       	add	r18, r18
    1a62:	33 1f       	adc	r19, r19
    1a64:	82 0f       	add	r24, r18
    1a66:	93 1f       	adc	r25, r19
    1a68:	84 0f       	add	r24, r20
    1a6a:	95 1f       	adc	r25, r21
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	e0 50       	subi	r30, 0x00	; 0
    1a70:	f0 40       	sbci	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	99 27       	eor	r25, r25
    1a76:	80 71       	andi	r24, 0x10	; 16
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	01 f0       	breq	.+0      	; 0x1a7e <dm_pixel+0x178>
    {
        dm_applyTransforms(which);
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    1a84:	24 96       	adiw	r28, 0x04	; 4
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <dm_copyToCustom>:
    }
}


void dm_copyToCustom(u08 which, u08 charIndex)
{
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	2a 97       	sbiw	r28, 0x0a	; 10
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	89 87       	std	Y+9, r24	; 0x09
    1ab0:	6a 87       	std	Y+10, r22	; 0x0a
    u08 count;
    struct _display * disp = &display[which];
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	55 27       	eor	r21, r21
    1ab8:	ca 01       	movw	r24, r20
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	82 0f       	add	r24, r18
    1ad2:	93 1f       	adc	r25, r19
    1ad4:	84 0f       	add	r24, r20
    1ad6:	95 1f       	adc	r25, r21
    1ad8:	80 50       	subi	r24, 0x00	; 0
    1ada:	90 40       	sbci	r25, 0x00	; 0
    1adc:	9f 83       	std	Y+7, r25	; 0x07
    1ade:	8e 83       	std	Y+6, r24	; 0x06
    u08 * dataPtr = font5x7 + (charIndex * NUM_COLUMNS);
    1ae0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	33 27       	eor	r19, r19
    1ae6:	c9 01       	movw	r24, r18
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	80 50       	subi	r24, 0x00	; 0
    1af6:	90 40       	sbci	r25, 0x00	; 0
    1af8:	9d 83       	std	Y+5, r25	; 0x05
    1afa:	8c 83       	std	Y+4, r24	; 0x04

    for (count = 0; count < NUM_COLUMNS; count++)
    1afc:	18 86       	std	Y+8, r1	; 0x08
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <dm_copyToCustom+0x66>
    {
        disp->progColumn[count] = pgm_read_byte_near(dataPtr++);
    1b00:	88 85       	ldd	r24, Y+8	; 0x08
    1b02:	48 2f       	mov	r20, r24
    1b04:	55 27       	eor	r21, r21
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0a:	9b 83       	std	Y+3, r25	; 0x03
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	9d 83       	std	Y+5, r25	; 0x05
    1b16:	8c 83       	std	Y+4, r24	; 0x04
    1b18:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1c:	84 91       	lpm	r24, Z
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	29 81       	ldd	r18, Y+1	; 0x01
    1b22:	8e 81       	ldd	r24, Y+6	; 0x06
    1b24:	9f 81       	ldd	r25, Y+7	; 0x07
    1b26:	84 0f       	add	r24, r20
    1b28:	95 1f       	adc	r25, r21
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	74 96       	adiw	r30, 0x14	; 20
    1b2e:	20 83       	st	Z, r18
    1b30:	88 85       	ldd	r24, Y+8	; 0x08
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	88 87       	std	Y+8, r24	; 0x08
    1b36:	88 85       	ldd	r24, Y+8	; 0x08
    1b38:	85 30       	cpi	r24, 0x05	; 5
    1b3a:	00 f0       	brcs	.+0      	; 0x1b3c <dm_copyToCustom+0xa2>
    }
    dm_applyTransforms(which);
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	0e 94 00 00 	call	0	; 0x0 <dm_timerHandler>
    1b42:	2a 96       	adiw	r28, 0x0a	; 10
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <dm_setsense>:
}

void dm_setsense(u08 set, u08 row, u08 column)
{
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	25 97       	sbiw	r28, 0x05	; 5
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	6a 83       	std	Y+2, r22	; 0x02
    1b6c:	4b 83       	std	Y+3, r20	; 0x03
    if (row <= 4)
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	85 30       	cpi	r24, 0x05	; 5
    1b72:	00 f4       	brcc	.+0      	; 0x1b74 <dm_setsense+0x20>
    {
        display[0].senseRowColumn = set ? (row << 4) & column : 0xff;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	88 23       	and	r24, r24
    1b78:	01 f0       	breq	.+0      	; 0x1b7a <dm_setsense+0x26>
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	99 27       	eor	r25, r25
    1b7e:	82 95       	swap	r24
    1b80:	92 95       	swap	r25
    1b82:	90 7f       	andi	r25, 0xF0	; 240
    1b84:	98 27       	eor	r25, r24
    1b86:	80 7f       	andi	r24, 0xF0	; 240
    1b88:	98 27       	eor	r25, r24
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	89 23       	and	r24, r25
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	00 c0       	rjmp	.+0      	; 0x1b94 <dm_setsense+0x40>
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	80 93 00 00 	sts	0x0000, r24
    1b9e:	00 c0       	rjmp	.+0      	; 0x1ba0 <dm_setsense+0x4c>
    }
    else if (row >= 5 && row <= 9)
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	85 30       	cpi	r24, 0x05	; 5
    1ba4:	00 f0       	brcs	.+0      	; 0x1ba6 <dm_setsense+0x52>
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	8a 30       	cpi	r24, 0x0A	; 10
    1baa:	00 f4       	brcc	.+0      	; 0x1bac <dm_setsense+0x58>
    {
        display[1].senseRowColumn = set ? (row << 4) & column : 0xff;
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	88 23       	and	r24, r24
    1bb0:	01 f0       	breq	.+0      	; 0x1bb2 <dm_setsense+0x5e>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	99 27       	eor	r25, r25
    1bb6:	82 95       	swap	r24
    1bb8:	92 95       	swap	r25
    1bba:	90 7f       	andi	r25, 0xF0	; 240
    1bbc:	98 27       	eor	r25, r24
    1bbe:	80 7f       	andi	r24, 0xF0	; 240
    1bc0:	98 27       	eor	r25, r24
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	89 23       	and	r24, r25
    1bc8:	8c 83       	std	Y+4, r24	; 0x04
    1bca:	00 c0       	rjmp	.+0      	; 0x1bcc <dm_setsense+0x78>
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	8c 83       	std	Y+4, r24	; 0x04
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	80 93 00 00 	sts	0x0000, r24
    1bd6:	25 96       	adiw	r28, 0x05	; 5
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <dm_dumpdisp>:
    }
}

void dm_dumpdisp(u08 which)
{
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	21 97       	sbiw	r28, 0x01	; 1
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	21 96       	adiw	r28, 0x01	; 1
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret
