
main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000000e9  2**0
                  ALLOC
  3 .stab         000005a0  00000000  00000000  000000ec  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000095a  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vector_11>:
/*      Begin Interrupt Service Routines                                        */
/* ---------------------------------------------------------------------- */
/* Timer 0 overflow interrupt handler */
ISR(SIG_OVERFLOW0)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
    timer0Event = 1;
  14:	81 e0       	ldi	r24, 0x01	; 1
  16:	80 93 00 00 	sts	0x0000, r24
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	8f 91       	pop	r24
  20:	0f 90       	pop	r0
  22:	0f be       	out	0x3f, r0	; 63
  24:	0f 90       	pop	r0
  26:	1f 90       	pop	r1
  28:	18 95       	reti

0000002a <main>:
}

/* ---------------------------------------------------------------------- */
/*      End Interrupt Service Routines                                        */
/* ---------------------------------------------------------------------- */


int main(void)
{
  2a:	c0 e0       	ldi	r28, 0x00	; 0
  2c:	d0 e0       	ldi	r29, 0x00	; 0
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
    /* disable the watchdog */
    MCUSR = 0;
  32:	e4 e5       	ldi	r30, 0x54	; 84
  34:	f0 e0       	ldi	r31, 0x00	; 0
  36:	10 82       	st	Z, r1
    wdt_disable();
  38:	88 e1       	ldi	r24, 0x18	; 24
  3a:	0f b6       	in	r0, 0x3f	; 63
  3c:	f8 94       	cli
  3e:	80 93 60 00 	sts	0x0060, r24
  42:	10 92 60 00 	sts	0x0060, r1
  46:	0f be       	out	0x3f, r0	; 63
    
    cmd_Init();			/* init command processor */
  48:	0e 94 00 00 	call	0	; 0x0 <__vector_11>
    dm_init();			/* init displaymux */
  4c:	0e 94 00 00 	call	0	; 0x0 <__vector_11>
    spi_init();   	/* init serial peripheral interface */
  50:	0e 94 00 00 	call	0	; 0x0 <__vector_11>
    
    sei();
  54:	78 94       	sei
    u16 intCount = 0;
  56:	1d 82       	std	Y+5, r1	; 0x05
  58:	1c 82       	std	Y+4, r1	; 0x04
    u08 state = 0;
  5a:	1b 82       	std	Y+3, r1	; 0x03
    u08 debugCount = 0;
  5c:	1a 82       	std	Y+2, r1	; 0x02
    u08 data;
  
    while (1)
    {
        if (spiEvent == 1)
  5e:	80 91 00 00 	lds	r24, 0x0000
  62:	81 30       	cpi	r24, 0x01	; 1
  64:	01 f4       	brne	.+0      	; 0x66 <main+0x3c>
        {
            cli();
  66:	f8 94       	cli
            data = mosiBuffer[mosiTail++];
  68:	20 91 00 00 	lds	r18, 0x0000
  6c:	82 2f       	mov	r24, r18
  6e:	99 27       	eor	r25, r25
  70:	fc 01       	movw	r30, r24
  72:	e0 50       	subi	r30, 0x00	; 0
  74:	f0 40       	sbci	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	82 2f       	mov	r24, r18
  7c:	8f 5f       	subi	r24, 0xFF	; 255
  7e:	80 93 00 00 	sts	0x0000, r24
            mosiTail &= (MOSIBUFFERSIZE - 1);
  82:	80 91 00 00 	lds	r24, 0x0000
  86:	87 70       	andi	r24, 0x07	; 7
  88:	80 93 00 00 	sts	0x0000, r24
            if (mosiHead == mosiTail)
  8c:	90 91 00 00 	lds	r25, 0x0000
  90:	80 91 00 00 	lds	r24, 0x0000
  94:	98 17       	cp	r25, r24
  96:	01 f4       	brne	.+0      	; 0x98 <main+0x6e>
            {
                spiEvent = 0;
  98:	10 92 00 00 	sts	0x0000, r1
            }
            sei();
  9c:	78 94       	sei
            cmd_dataHandler(data);
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	0e 94 00 00 	call	0	; 0x0 <__vector_11>
            continue;
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x7c>
        }
        if (disploop)
  a6:	80 91 00 00 	lds	r24, 0x0000
  aa:	88 23       	and	r24, r24
  ac:	01 f0       	breq	.+0      	; 0xae <main+0x84>
        dm_timerHandler();
  ae:	0e 94 00 00 	call	0	; 0x0 <__vector_11>
    }
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__SREG__+0x75>
