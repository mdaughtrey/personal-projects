
cmdproc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c4  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00000000  00000000  000005f8  2**0
                  ALLOC
  3 .stab         00000930  00000000  00000000  000005f8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a38  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000010  00000000  00000000  00001960  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
Disassembly of section .text:

00000000 <cmd_Init>:

extern u08 disploop;

void cmd_Init(void)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
    command = 0;
   8:	10 92 00 00 	sts	0x0000, r1
    paramsRemaining = 0;
   c:	10 92 00 00 	sts	0x0000, r1
    paramIndex = 0;
  10:	10 92 00 00 	sts	0x0000, r1
  14:	df 91       	pop	r29
  16:	cf 91       	pop	r28
  18:	08 95       	ret

0000001a <asciiToHex>:
}

u08 asciiToHex(u08 ascii1, u08 ascii2)
{
  1a:	cf 93       	push	r28
  1c:	df 93       	push	r29
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	2a 97       	sbiw	r28, 0x0a	; 10
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	de bf       	out	0x3e, r29	; 62
  2a:	0f be       	out	0x3f, r0	; 63
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	89 87       	std	Y+9, r24	; 0x09
  30:	6a 87       	std	Y+10, r22	; 0x0a
    u08 result = 0;
  32:	18 86       	std	Y+8, r1	; 0x08
    u08 index;
    
    for (index = 0; index < 16; index++)
  34:	1f 82       	std	Y+7, r1	; 0x07
  36:	00 c0       	rjmp	.+0      	; 0x38 <asciiToHex+0x1e>
    {
        if (ascii1 == pgm_read_byte_near(hexTable + index))
  38:	8f 81       	ldd	r24, Y+7	; 0x07
  3a:	99 27       	eor	r25, r25
  3c:	80 50       	subi	r24, 0x00	; 0
  3e:	90 40       	sbci	r25, 0x00	; 0
  40:	9e 83       	std	Y+6, r25	; 0x06
  42:	8d 83       	std	Y+5, r24	; 0x05
  44:	ed 81       	ldd	r30, Y+5	; 0x05
  46:	fe 81       	ldd	r31, Y+6	; 0x06
  48:	84 91       	lpm	r24, Z
  4a:	8c 83       	std	Y+4, r24	; 0x04
  4c:	9c 81       	ldd	r25, Y+4	; 0x04
  4e:	89 85       	ldd	r24, Y+9	; 0x09
  50:	98 17       	cp	r25, r24
  52:	01 f4       	brne	.+0      	; 0x54 <asciiToHex+0x3a>
        {
            result = index;
  54:	8f 81       	ldd	r24, Y+7	; 0x07
  56:	88 87       	std	Y+8, r24	; 0x08
            break;
  58:	00 c0       	rjmp	.+0      	; 0x5a <asciiToHex+0x40>
  5a:	8f 81       	ldd	r24, Y+7	; 0x07
  5c:	8f 5f       	subi	r24, 0xFF	; 255
  5e:	8f 83       	std	Y+7, r24	; 0x07
  60:	8f 81       	ldd	r24, Y+7	; 0x07
  62:	80 31       	cpi	r24, 0x10	; 16
  64:	00 f0       	brcs	.+0      	; 0x66 <asciiToHex+0x4c>
        }
    }
    result <<= 4;
  66:	88 85       	ldd	r24, Y+8	; 0x08
  68:	82 95       	swap	r24
  6a:	80 7f       	andi	r24, 0xF0	; 240
  6c:	88 87       	std	Y+8, r24	; 0x08
    for (index = 0; index < 16; index++)
  6e:	1f 82       	std	Y+7, r1	; 0x07
  70:	00 c0       	rjmp	.+0      	; 0x72 <asciiToHex+0x58>
    {
        if (ascii2 == pgm_read_byte_near(hexTable + index))
  72:	8f 81       	ldd	r24, Y+7	; 0x07
  74:	99 27       	eor	r25, r25
  76:	80 50       	subi	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	9b 83       	std	Y+3, r25	; 0x03
  7c:	8a 83       	std	Y+2, r24	; 0x02
  7e:	ea 81       	ldd	r30, Y+2	; 0x02
  80:	fb 81       	ldd	r31, Y+3	; 0x03
  82:	84 91       	lpm	r24, Z
  84:	89 83       	std	Y+1, r24	; 0x01
  86:	99 81       	ldd	r25, Y+1	; 0x01
  88:	8a 85       	ldd	r24, Y+10	; 0x0a
  8a:	98 17       	cp	r25, r24
  8c:	01 f4       	brne	.+0      	; 0x8e <asciiToHex+0x74>
        {
            result |= index;
  8e:	88 85       	ldd	r24, Y+8	; 0x08
  90:	9f 81       	ldd	r25, Y+7	; 0x07
  92:	89 2b       	or	r24, r25
  94:	88 87       	std	Y+8, r24	; 0x08
            break;
  96:	00 c0       	rjmp	.+0      	; 0x98 <asciiToHex+0x7e>
  98:	8f 81       	ldd	r24, Y+7	; 0x07
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	8f 83       	std	Y+7, r24	; 0x07
  9e:	8f 81       	ldd	r24, Y+7	; 0x07
  a0:	80 31       	cpi	r24, 0x10	; 16
  a2:	00 f0       	brcs	.+0      	; 0xa4 <asciiToHex+0x8a>
        }
    }
    return result;
  a4:	88 85       	ldd	r24, Y+8	; 0x08
  a6:	99 27       	eor	r25, r25
  a8:	2a 96       	adiw	r28, 0x0a	; 10
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <cmd_dataHandler>:
    
}

void cmd_dataHandler(u08 input)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	6a 97       	sbiw	r28, 0x1a	; 26
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	8a 83       	std	Y+2, r24	; 0x02
    if (command)
  d0:	80 91 00 00 	lds	r24, 0x0000
  d4:	88 23       	and	r24, r24
  d6:	01 f4       	brne	.+0      	; 0xd8 <cmd_dataHandler+0x1e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <cmd_dataHandler+0x20>
    {
        parameter[paramIndex++] = input;
  da:	20 91 00 00 	lds	r18, 0x0000
  de:	82 2f       	mov	r24, r18
  e0:	99 27       	eor	r25, r25
  e2:	fc 01       	movw	r30, r24
  e4:	e0 50       	subi	r30, 0x00	; 0
  e6:	f0 40       	sbci	r31, 0x00	; 0
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	80 83       	st	Z, r24
  ec:	82 2f       	mov	r24, r18
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining--;
  f4:	80 91 00 00 	lds	r24, 0x0000
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 93 00 00 	sts	0x0000, r24
        if (paramsRemaining == 0)
  fe:	80 91 00 00 	lds	r24, 0x0000
 102:	88 23       	and	r24, r24
 104:	01 f0       	breq	.+0      	; 0x106 <cmd_dataHandler+0x4c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <cmd_dataHandler+0x4e>
        {
            u08 which = (parameter[0] == '0' ? 0 : 1);
 108:	80 91 00 00 	lds	r24, 0x0000
 10c:	19 82       	std	Y+1, r1	; 0x01
 10e:	80 33       	cpi	r24, 0x30	; 48
 110:	01 f0       	breq	.+0      	; 0x112 <cmd_dataHandler+0x58>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	89 83       	std	Y+1, r24	; 0x01
            switch (command & 0xdf)
 116:	80 91 00 00 	lds	r24, 0x0000
 11a:	99 27       	eor	r25, r25
 11c:	9c 01       	movw	r18, r24
 11e:	2f 7d       	andi	r18, 0xDF	; 223
 120:	30 70       	andi	r19, 0x00	; 0
 122:	3a 8f       	std	Y+26, r19	; 0x1a
 124:	29 8f       	std	Y+25, r18	; 0x19
 126:	89 8d       	ldd	r24, Y+25	; 0x19
 128:	9a 8d       	ldd	r25, Y+26	; 0x1a
 12a:	8c 34       	cpi	r24, 0x4C	; 76
 12c:	91 05       	cpc	r25, r1
 12e:	01 f4       	brne	.+0      	; 0x130 <cmd_dataHandler+0x76>
 130:	00 c0       	rjmp	.+0      	; 0x132 <cmd_dataHandler+0x78>
 132:	29 8d       	ldd	r18, Y+25	; 0x19
 134:	3a 8d       	ldd	r19, Y+26	; 0x1a
 136:	2d 34       	cpi	r18, 0x4D	; 77
 138:	31 05       	cpc	r19, r1
 13a:	04 f4       	brge	.+0      	; 0x13c <cmd_dataHandler+0x82>
 13c:	89 8d       	ldd	r24, Y+25	; 0x19
 13e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 140:	83 34       	cpi	r24, 0x43	; 67
 142:	91 05       	cpc	r25, r1
 144:	01 f4       	brne	.+0      	; 0x146 <cmd_dataHandler+0x8c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <cmd_dataHandler+0x8e>
 148:	29 8d       	ldd	r18, Y+25	; 0x19
 14a:	3a 8d       	ldd	r19, Y+26	; 0x1a
 14c:	24 34       	cpi	r18, 0x44	; 68
 14e:	31 05       	cpc	r19, r1
 150:	04 f4       	brge	.+0      	; 0x152 <cmd_dataHandler+0x98>
 152:	89 8d       	ldd	r24, Y+25	; 0x19
 154:	9a 8d       	ldd	r25, Y+26	; 0x1a
 156:	81 34       	cpi	r24, 0x41	; 65
 158:	91 05       	cpc	r25, r1
 15a:	01 f4       	brne	.+0      	; 0x15c <cmd_dataHandler+0xa2>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <cmd_dataHandler+0xa4>
 15e:	29 8d       	ldd	r18, Y+25	; 0x19
 160:	3a 8d       	ldd	r19, Y+26	; 0x1a
 162:	22 34       	cpi	r18, 0x42	; 66
 164:	31 05       	cpc	r19, r1
 166:	01 f4       	brne	.+0      	; 0x168 <cmd_dataHandler+0xae>
 168:	00 c0       	rjmp	.+0      	; 0x16a <cmd_dataHandler+0xb0>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <cmd_dataHandler+0xb2>
 16c:	89 8d       	ldd	r24, Y+25	; 0x19
 16e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 170:	86 34       	cpi	r24, 0x46	; 70
 172:	91 05       	cpc	r25, r1
 174:	01 f4       	brne	.+0      	; 0x176 <cmd_dataHandler+0xbc>
 176:	00 c0       	rjmp	.+0      	; 0x178 <cmd_dataHandler+0xbe>
 178:	29 8d       	ldd	r18, Y+25	; 0x19
 17a:	3a 8d       	ldd	r19, Y+26	; 0x1a
 17c:	29 34       	cpi	r18, 0x49	; 73
 17e:	31 05       	cpc	r19, r1
 180:	01 f4       	brne	.+0      	; 0x182 <cmd_dataHandler+0xc8>
 182:	00 c0       	rjmp	.+0      	; 0x184 <cmd_dataHandler+0xca>
 184:	89 8d       	ldd	r24, Y+25	; 0x19
 186:	9a 8d       	ldd	r25, Y+26	; 0x1a
 188:	84 34       	cpi	r24, 0x44	; 68
 18a:	91 05       	cpc	r25, r1
 18c:	01 f4       	brne	.+0      	; 0x18e <cmd_dataHandler+0xd4>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <cmd_dataHandler+0xd6>
 190:	00 c0       	rjmp	.+0      	; 0x192 <cmd_dataHandler+0xd8>
 192:	29 8d       	ldd	r18, Y+25	; 0x19
 194:	3a 8d       	ldd	r19, Y+26	; 0x1a
 196:	22 35       	cpi	r18, 0x52	; 82
 198:	31 05       	cpc	r19, r1
 19a:	01 f4       	brne	.+0      	; 0x19c <cmd_dataHandler+0xe2>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <cmd_dataHandler+0xe4>
 19e:	89 8d       	ldd	r24, Y+25	; 0x19
 1a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1a2:	83 35       	cpi	r24, 0x53	; 83
 1a4:	91 05       	cpc	r25, r1
 1a6:	04 f4       	brge	.+0      	; 0x1a8 <cmd_dataHandler+0xee>
 1a8:	29 8d       	ldd	r18, Y+25	; 0x19
 1aa:	3a 8d       	ldd	r19, Y+26	; 0x1a
 1ac:	2d 34       	cpi	r18, 0x4D	; 77
 1ae:	31 05       	cpc	r19, r1
 1b0:	01 f4       	brne	.+0      	; 0x1b2 <cmd_dataHandler+0xf8>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <cmd_dataHandler+0xfa>
 1b4:	89 8d       	ldd	r24, Y+25	; 0x19
 1b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1b8:	80 35       	cpi	r24, 0x50	; 80
 1ba:	91 05       	cpc	r25, r1
 1bc:	01 f4       	brne	.+0      	; 0x1be <cmd_dataHandler+0x104>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <cmd_dataHandler+0x106>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <cmd_dataHandler+0x108>
 1c2:	29 8d       	ldd	r18, Y+25	; 0x19
 1c4:	3a 8d       	ldd	r19, Y+26	; 0x1a
 1c6:	24 35       	cpi	r18, 0x54	; 84
 1c8:	31 05       	cpc	r19, r1
 1ca:	01 f4       	brne	.+0      	; 0x1cc <cmd_dataHandler+0x112>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <cmd_dataHandler+0x114>
 1ce:	89 8d       	ldd	r24, Y+25	; 0x19
 1d0:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1d2:	84 35       	cpi	r24, 0x54	; 84
 1d4:	91 05       	cpc	r25, r1
 1d6:	04 f4       	brge	.+0      	; 0x1d8 <cmd_dataHandler+0x11e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <cmd_dataHandler+0x120>
 1da:	29 8d       	ldd	r18, Y+25	; 0x19
 1dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
 1de:	2a 35       	cpi	r18, 0x5A	; 90
 1e0:	31 05       	cpc	r19, r1
 1e2:	01 f4       	brne	.+0      	; 0x1e4 <cmd_dataHandler+0x12a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <cmd_dataHandler+0x12c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <cmd_dataHandler+0x12e>
            {
                /* Set display 0 character - a<char> */
                /* Set display 1 character - A<char> */
            case 'A':
                dm_setChar((command == 'a' ? 0 : 1), parameter[0]); 
 1e8:	30 91 00 00 	lds	r19, 0x0000
 1ec:	38 8f       	std	Y+24, r19	; 0x18
 1ee:	80 91 00 00 	lds	r24, 0x0000
 1f2:	1f 8a       	std	Y+23, r1	; 0x17
 1f4:	81 36       	cpi	r24, 0x61	; 97
 1f6:	01 f0       	breq	.+0      	; 0x1f8 <cmd_dataHandler+0x13e>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	8f 8b       	std	Y+23, r24	; 0x17
 1fc:	68 8d       	ldd	r22, Y+24	; 0x18
 1fe:	8f 89       	ldd	r24, Y+23	; 0x17
 200:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 204:	00 c0       	rjmp	.+0      	; 0x206 <cmd_dataHandler+0x14c>
            
                /* Blank character - b<01> */
                /* Unblank character - b<01> */
            case 'B':
                dm_blank(which, (command == 'b' ? 1: 0));
 206:	80 91 00 00 	lds	r24, 0x0000
 20a:	1e 8a       	std	Y+22, r1	; 0x16
 20c:	82 36       	cpi	r24, 0x62	; 98
 20e:	01 f4       	brne	.+0      	; 0x210 <cmd_dataHandler+0x156>
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	9e 8b       	std	Y+22, r25	; 0x16
 214:	6e 89       	ldd	r22, Y+22	; 0x16
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 21c:	00 c0       	rjmp	.+0      	; 0x21e <cmd_dataHandler+0x164>
            
                /* Enable Custom character - c<01>  */
                /* Disable Custom character - C<01> */
            case 'C':
                dm_displayProgrammed(which, (command == 'c' ? 1 : 0)); 
 21e:	80 91 00 00 	lds	r24, 0x0000
 222:	1d 8a       	std	Y+21, r1	; 0x15
 224:	83 36       	cpi	r24, 0x63	; 99
 226:	01 f4       	brne	.+0      	; 0x228 <cmd_dataHandler+0x16e>
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	2d 8b       	std	Y+21, r18	; 0x15
 22c:	6d 89       	ldd	r22, Y+21	; 0x15
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 234:	00 c0       	rjmp	.+0      	; 0x236 <cmd_dataHandler+0x17c>
            
                /* Dim display - d<01> */
                /* Undim display - D<01> */
            case 'D':
                dm_setDim(which, (command  == 'd' ? 1 : 0)); 
 236:	80 91 00 00 	lds	r24, 0x0000
 23a:	1c 8a       	std	Y+20, r1	; 0x14
 23c:	1b 8a       	std	Y+19, r1	; 0x13
 23e:	84 36       	cpi	r24, 0x64	; 100
 240:	01 f4       	brne	.+0      	; 0x242 <cmd_dataHandler+0x188>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	9c 8b       	std	Y+20, r25	; 0x14
 248:	8b 8b       	std	Y+19, r24	; 0x13
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	99 27       	eor	r25, r25
 24e:	6b 89       	ldd	r22, Y+19	; 0x13
 250:	7c 89       	ldd	r23, Y+20	; 0x14
 252:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 256:	00 c0       	rjmp	.+0      	; 0x258 <cmd_dataHandler+0x19e>
            
                /* Flip display - f<01> */
                /* Unflip display - F<01> */
            case 'F':
                dm_setFlip(which, (command == 'f' ? 0 : 1)); 
 258:	80 91 00 00 	lds	r24, 0x0000
 25c:	1a 8a       	std	Y+18, r1	; 0x12
 25e:	86 36       	cpi	r24, 0x66	; 102
 260:	01 f0       	breq	.+0      	; 0x262 <cmd_dataHandler+0x1a8>
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	9a 8b       	std	Y+18, r25	; 0x12
 266:	6a 89       	ldd	r22, Y+18	; 0x12
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 26e:	00 c0       	rjmp	.+0      	; 0x270 <cmd_dataHandler+0x1b6>
            
                /* Invert display bits - i<01> */
                /* Uninvert display bits - I<01> */
            case 'I':
                dm_setReverse(which, (command == 'i' ? 1 : 0)); 
 270:	80 91 00 00 	lds	r24, 0x0000
 274:	19 8a       	std	Y+17, r1	; 0x11
 276:	89 36       	cpi	r24, 0x69	; 105
 278:	01 f4       	brne	.+0      	; 0x27a <cmd_dataHandler+0x1c0>
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	29 8b       	std	Y+17, r18	; 0x11
 27e:	69 89       	ldd	r22, Y+17	; 0x11
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 286:	00 c0       	rjmp	.+0      	; 0x288 <cmd_dataHandler+0x1ce>
            
                /* Set Pallete Index for display 0- l<HH> */
                /* This is ignored for single-color displays */
                /* Set Pallete Index for display 1- L<HH> */
                /* This is ignored for single-color displays */
            case 'L':
                dm_setPalette((command == 'l' ? 0 : 1), 
 288:	80 91 00 00 	lds	r24, 0x0000
 28c:	90 91 00 00 	lds	r25, 0x0000
 290:	68 2f       	mov	r22, r24
 292:	89 2f       	mov	r24, r25
 294:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 298:	88 8b       	std	Y+16, r24	; 0x10
 29a:	80 91 00 00 	lds	r24, 0x0000
 29e:	1f 86       	std	Y+15, r1	; 0x0f
 2a0:	8c 36       	cpi	r24, 0x6C	; 108
 2a2:	01 f0       	breq	.+0      	; 0x2a4 <cmd_dataHandler+0x1ea>
 2a4:	31 e0       	ldi	r19, 0x01	; 1
 2a6:	3f 87       	std	Y+15, r19	; 0x0f
 2a8:	68 89       	ldd	r22, Y+16	; 0x10
 2aa:	8f 85       	ldd	r24, Y+15	; 0x0f
 2ac:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                              asciiToHex(parameter[0], parameter[1]));
                break;
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <cmd_dataHandler+0x1f8>
            
                /* Mirror display - m<01> */
                /* Unmirror display M<01> */
            case 'M':
                dm_setMirror(which, (command == 'm' ? 1 : 0)); 
 2b2:	80 91 00 00 	lds	r24, 0x0000
 2b6:	1e 86       	std	Y+14, r1	; 0x0e
 2b8:	8d 36       	cpi	r24, 0x6D	; 109
 2ba:	01 f4       	brne	.+0      	; 0x2bc <cmd_dataHandler+0x202>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	8e 87       	std	Y+14, r24	; 0x0e
 2c0:	6e 85       	ldd	r22, Y+14	; 0x0e
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <cmd_dataHandler+0x210>
            
                /* Copy character to custom character 0 - p<hex> */
            case 'P':
                dm_copyToCustom((command == 'p' ? 0 : 1), asciiToHex(parameter[0], parameter[1])); 
 2ca:	80 91 00 00 	lds	r24, 0x0000
 2ce:	90 91 00 00 	lds	r25, 0x0000
 2d2:	68 2f       	mov	r22, r24
 2d4:	89 2f       	mov	r24, r25
 2d6:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 2da:	8d 87       	std	Y+13, r24	; 0x0d
 2dc:	80 91 00 00 	lds	r24, 0x0000
 2e0:	1c 86       	std	Y+12, r1	; 0x0c
 2e2:	80 37       	cpi	r24, 0x70	; 112
 2e4:	01 f0       	breq	.+0      	; 0x2e6 <cmd_dataHandler+0x22c>
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	9c 87       	std	Y+12, r25	; 0x0c
 2ea:	6d 85       	ldd	r22, Y+13	; 0x0d
 2ec:	8c 85       	ldd	r24, Y+12	; 0x0c
 2ee:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <cmd_dataHandler+0x23a>
            
                /* Roll matrix n row<s> - r<01><udlr><n> */
            case 'R': dm_roll(which,
 2f4:	80 91 00 00 	lds	r24, 0x0000
 2f8:	80 53       	subi	r24, 0x30	; 48
 2fa:	90 91 00 00 	lds	r25, 0x0000
 2fe:	48 2f       	mov	r20, r24
 300:	69 2f       	mov	r22, r25
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                              parameter[1],
                              parameter[2] - '0');
                break;
 308:	00 c0       	rjmp	.+0      	; 0x30a <cmd_dataHandler+0x250>
            
                /* Shift matrix <n> rows  - s<01><udlr><n> */
            case 'S': dm_shift(which,
 30a:	80 91 00 00 	lds	r24, 0x0000
 30e:	80 53       	subi	r24, 0x30	; 48
 310:	90 91 00 00 	lds	r25, 0x0000
 314:	48 2f       	mov	r20, r24
 316:	69 2f       	mov	r22, r25
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                               parameter[1],
                               parameter[2] - '0');
                break;
 31e:	00 c0       	rjmp	.+0      	; 0x320 <cmd_dataHandler+0x266>
            
                /* Turn on pixel in custom character - t<01><row><column> */
                /* Turn off pixel in custom character - T<01><row><column> */
            case 'T':
                dm_pixel(which, (command == 't' ? 1 : 0), parameter[1] - '0', parameter[2] - '0');
 320:	80 91 00 00 	lds	r24, 0x0000
 324:	28 2f       	mov	r18, r24
 326:	20 53       	subi	r18, 0x30	; 48
 328:	2b 87       	std	Y+11, r18	; 0x0b
 32a:	80 91 00 00 	lds	r24, 0x0000
 32e:	38 2f       	mov	r19, r24
 330:	30 53       	subi	r19, 0x30	; 48
 332:	3a 87       	std	Y+10, r19	; 0x0a
 334:	80 91 00 00 	lds	r24, 0x0000
 338:	19 86       	std	Y+9, r1	; 0x09
 33a:	84 37       	cpi	r24, 0x74	; 116
 33c:	01 f4       	brne	.+0      	; 0x33e <cmd_dataHandler+0x284>
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	89 87       	std	Y+9, r24	; 0x09
 342:	2b 85       	ldd	r18, Y+11	; 0x0b
 344:	4a 85       	ldd	r20, Y+10	; 0x0a
 346:	69 85       	ldd	r22, Y+9	; 0x09
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                break;
 34e:	00 c0       	rjmp	.+0      	; 0x350 <cmd_dataHandler+0x296>
            
                /* Enable light sense - z<row><column> */
                /* Disable light sense - Z<row><column>*/
                /* columns 0-4: display 0 */
                /* columns 5-9: display 1 */
            case 'Z':
                dm_setsense((command == 'z' ? 1 : 0),
 350:	80 91 00 00 	lds	r24, 0x0000
 354:	98 2f       	mov	r25, r24
 356:	90 53       	subi	r25, 0x30	; 48
 358:	98 87       	std	Y+8, r25	; 0x08
 35a:	80 91 00 00 	lds	r24, 0x0000
 35e:	28 2f       	mov	r18, r24
 360:	20 53       	subi	r18, 0x30	; 48
 362:	2f 83       	std	Y+7, r18	; 0x07
 364:	80 91 00 00 	lds	r24, 0x0000
 368:	1e 82       	std	Y+6, r1	; 0x06
 36a:	8a 37       	cpi	r24, 0x7A	; 122
 36c:	01 f4       	brne	.+0      	; 0x36e <cmd_dataHandler+0x2b4>
 36e:	31 e0       	ldi	r19, 0x01	; 1
 370:	3e 83       	std	Y+6, r19	; 0x06
 372:	48 85       	ldd	r20, Y+8	; 0x08
 374:	6f 81       	ldd	r22, Y+7	; 0x07
 376:	8e 81       	ldd	r24, Y+6	; 0x06
 378:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                            parameter[1] - '0',
                            parameter[2] - '0');
                break;
 37c:	00 c0       	rjmp	.+0      	; 0x37e <cmd_dataHandler+0x2c4>
            
            default:
                /* Reset all transforms - !<01> */
                if ('!' == command)
 37e:	80 91 00 00 	lds	r24, 0x0000
 382:	81 32       	cpi	r24, 0x21	; 33
 384:	01 f4       	brne	.+0      	; 0x386 <cmd_dataHandler+0x2cc>
                {
                    dm_reset(which); 
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <cmd_dataHandler+0x2d4>
                }
                /* Program custom character columns, display 0 - [01234]<HexHex> */
                else if (command >= '0' && command <= '4')
 38e:	80 91 00 00 	lds	r24, 0x0000
 392:	80 33       	cpi	r24, 0x30	; 48
 394:	00 f0       	brcs	.+0      	; 0x396 <cmd_dataHandler+0x2dc>
 396:	80 91 00 00 	lds	r24, 0x0000
 39a:	85 33       	cpi	r24, 0x35	; 53
 39c:	00 f4       	brcc	.+0      	; 0x39e <cmd_dataHandler+0x2e4>
                {
                    dm_progColumn(0, command - '0', asciiToHex(parameter[0], parameter[1])); 
 39e:	80 91 00 00 	lds	r24, 0x0000
 3a2:	90 91 00 00 	lds	r25, 0x0000
 3a6:	68 2f       	mov	r22, r24
 3a8:	89 2f       	mov	r24, r25
 3aa:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 3ae:	98 2f       	mov	r25, r24
 3b0:	80 91 00 00 	lds	r24, 0x0000
 3b4:	80 53       	subi	r24, 0x30	; 48
 3b6:	49 2f       	mov	r20, r25
 3b8:	68 2f       	mov	r22, r24
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <cmd_dataHandler+0x308>
                }
                /* Program custom character columns, display 1 - [56789]<data> */
                else if (command >= '5' && command <= '9')
 3c2:	80 91 00 00 	lds	r24, 0x0000
 3c6:	85 33       	cpi	r24, 0x35	; 53
 3c8:	00 f0       	brcs	.+0      	; 0x3ca <cmd_dataHandler+0x310>
 3ca:	80 91 00 00 	lds	r24, 0x0000
 3ce:	8a 33       	cpi	r24, 0x3A	; 58
 3d0:	00 f4       	brcc	.+0      	; 0x3d2 <cmd_dataHandler+0x318>
                {
                    dm_progColumn(1, command -'5', asciiToHex(parameter[0], parameter[1])); 
 3d2:	80 91 00 00 	lds	r24, 0x0000
 3d6:	90 91 00 00 	lds	r25, 0x0000
 3da:	68 2f       	mov	r22, r24
 3dc:	89 2f       	mov	r24, r25
 3de:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 3e2:	98 2f       	mov	r25, r24
 3e4:	80 91 00 00 	lds	r24, 0x0000
 3e8:	85 53       	subi	r24, 0x35	; 53
 3ea:	49 2f       	mov	r20, r25
 3ec:	68 2f       	mov	r22, r24
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                }
            }
        }
        command = 0;
 3f4:	10 92 00 00 	sts	0x0000, r1
        paramIndex = 0;
 3f8:	10 92 00 00 	sts	0x0000, r1
        return;
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <cmd_dataHandler+0x344>
    }
    
    paramsRemaining = 0;
 3fe:	10 92 00 00 	sts	0x0000, r1
    paramIndex = 0;
 402:	10 92 00 00 	sts	0x0000, r1
    switch (input)
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	28 2f       	mov	r18, r24
 40a:	33 27       	eor	r19, r19
 40c:	3d 83       	std	Y+5, r19	; 0x05
 40e:	2c 83       	std	Y+4, r18	; 0x04
 410:	8c 81       	ldd	r24, Y+4	; 0x04
 412:	9d 81       	ldd	r25, Y+5	; 0x05
 414:	82 35       	cpi	r24, 0x52	; 82
 416:	91 05       	cpc	r25, r1
 418:	01 f4       	brne	.+0      	; 0x41a <cmd_dataHandler+0x360>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <cmd_dataHandler+0x362>
 41c:	2c 81       	ldd	r18, Y+4	; 0x04
 41e:	3d 81       	ldd	r19, Y+5	; 0x05
 420:	23 35       	cpi	r18, 0x53	; 83
 422:	31 05       	cpc	r19, r1
 424:	04 f0       	brlt	.+0      	; 0x426 <cmd_dataHandler+0x36c>
 426:	00 c0       	rjmp	.+0      	; 0x428 <cmd_dataHandler+0x36e>
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	9d 81       	ldd	r25, Y+5	; 0x05
 42c:	85 34       	cpi	r24, 0x45	; 69
 42e:	91 05       	cpc	r25, r1
 430:	04 f4       	brge	.+0      	; 0x432 <cmd_dataHandler+0x378>
 432:	2c 81       	ldd	r18, Y+4	; 0x04
 434:	3d 81       	ldd	r19, Y+5	; 0x05
 436:	21 34       	cpi	r18, 0x41	; 65
 438:	31 05       	cpc	r19, r1
 43a:	04 f0       	brlt	.+0      	; 0x43c <cmd_dataHandler+0x382>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <cmd_dataHandler+0x384>
 43e:	8c 81       	ldd	r24, Y+4	; 0x04
 440:	9d 81       	ldd	r25, Y+5	; 0x05
 442:	8a 33       	cpi	r24, 0x3A	; 58
 444:	91 05       	cpc	r25, r1
 446:	04 f0       	brlt	.+0      	; 0x448 <cmd_dataHandler+0x38e>
 448:	00 c0       	rjmp	.+0      	; 0x44a <cmd_dataHandler+0x390>
 44a:	2c 81       	ldd	r18, Y+4	; 0x04
 44c:	3d 81       	ldd	r19, Y+5	; 0x05
 44e:	20 33       	cpi	r18, 0x30	; 48
 450:	31 05       	cpc	r19, r1
 452:	04 f0       	brlt	.+0      	; 0x454 <cmd_dataHandler+0x39a>
 454:	00 c0       	rjmp	.+0      	; 0x456 <cmd_dataHandler+0x39c>
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	9d 81       	ldd	r25, Y+5	; 0x05
 45a:	8a 32       	cpi	r24, 0x2A	; 42
 45c:	91 05       	cpc	r25, r1
 45e:	01 f4       	brne	.+0      	; 0x460 <cmd_dataHandler+0x3a6>
 460:	00 c0       	rjmp	.+0      	; 0x462 <cmd_dataHandler+0x3a8>
 462:	2c 81       	ldd	r18, Y+4	; 0x04
 464:	3d 81       	ldd	r19, Y+5	; 0x05
 466:	2b 32       	cpi	r18, 0x2B	; 43
 468:	31 05       	cpc	r19, r1
 46a:	01 f4       	brne	.+0      	; 0x46c <cmd_dataHandler+0x3b2>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <cmd_dataHandler+0x3b4>
 46e:	8c 81       	ldd	r24, Y+4	; 0x04
 470:	9d 81       	ldd	r25, Y+5	; 0x05
 472:	81 32       	cpi	r24, 0x21	; 33
 474:	91 05       	cpc	r25, r1
 476:	01 f4       	brne	.+0      	; 0x478 <cmd_dataHandler+0x3be>
 478:	00 c0       	rjmp	.+0      	; 0x47a <cmd_dataHandler+0x3c0>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <cmd_dataHandler+0x3c2>
 47c:	2c 81       	ldd	r18, Y+4	; 0x04
 47e:	3d 81       	ldd	r19, Y+5	; 0x05
 480:	2c 34       	cpi	r18, 0x4C	; 76
 482:	31 05       	cpc	r19, r1
 484:	01 f4       	brne	.+0      	; 0x486 <cmd_dataHandler+0x3cc>
 486:	00 c0       	rjmp	.+0      	; 0x488 <cmd_dataHandler+0x3ce>
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	9d 81       	ldd	r25, Y+5	; 0x05
 48c:	8d 34       	cpi	r24, 0x4D	; 77
 48e:	91 05       	cpc	r25, r1
 490:	04 f4       	brge	.+0      	; 0x492 <cmd_dataHandler+0x3d8>
 492:	2c 81       	ldd	r18, Y+4	; 0x04
 494:	3d 81       	ldd	r19, Y+5	; 0x05
 496:	26 34       	cpi	r18, 0x46	; 70
 498:	31 05       	cpc	r19, r1
 49a:	01 f4       	brne	.+0      	; 0x49c <cmd_dataHandler+0x3e2>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <cmd_dataHandler+0x3e4>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	9d 81       	ldd	r25, Y+5	; 0x05
 4a2:	89 34       	cpi	r24, 0x49	; 73
 4a4:	91 05       	cpc	r25, r1
 4a6:	01 f4       	brne	.+0      	; 0x4a8 <cmd_dataHandler+0x3ee>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <cmd_dataHandler+0x3f0>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <cmd_dataHandler+0x3f2>
 4ac:	2c 81       	ldd	r18, Y+4	; 0x04
 4ae:	3d 81       	ldd	r19, Y+5	; 0x05
 4b0:	2d 34       	cpi	r18, 0x4D	; 77
 4b2:	31 05       	cpc	r19, r1
 4b4:	01 f4       	brne	.+0      	; 0x4b6 <cmd_dataHandler+0x3fc>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <cmd_dataHandler+0x3fe>
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	9d 81       	ldd	r25, Y+5	; 0x05
 4bc:	80 35       	cpi	r24, 0x50	; 80
 4be:	91 05       	cpc	r25, r1
 4c0:	01 f4       	brne	.+0      	; 0x4c2 <cmd_dataHandler+0x408>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <cmd_dataHandler+0x40a>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <cmd_dataHandler+0x40c>
 4c6:	2c 81       	ldd	r18, Y+4	; 0x04
 4c8:	3d 81       	ldd	r19, Y+5	; 0x05
 4ca:	2c 36       	cpi	r18, 0x6C	; 108
 4cc:	31 05       	cpc	r19, r1
 4ce:	01 f4       	brne	.+0      	; 0x4d0 <cmd_dataHandler+0x416>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <cmd_dataHandler+0x418>
 4d2:	8c 81       	ldd	r24, Y+4	; 0x04
 4d4:	9d 81       	ldd	r25, Y+5	; 0x05
 4d6:	8d 36       	cpi	r24, 0x6D	; 109
 4d8:	91 05       	cpc	r25, r1
 4da:	04 f4       	brge	.+0      	; 0x4dc <cmd_dataHandler+0x422>
 4dc:	2c 81       	ldd	r18, Y+4	; 0x04
 4de:	3d 81       	ldd	r19, Y+5	; 0x05
 4e0:	25 36       	cpi	r18, 0x65	; 101
 4e2:	31 05       	cpc	r19, r1
 4e4:	04 f4       	brge	.+0      	; 0x4e6 <cmd_dataHandler+0x42c>
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	9d 81       	ldd	r25, Y+5	; 0x05
 4ea:	81 36       	cpi	r24, 0x61	; 97
 4ec:	91 05       	cpc	r25, r1
 4ee:	04 f4       	brge	.+0      	; 0x4f0 <cmd_dataHandler+0x436>
 4f0:	2c 81       	ldd	r18, Y+4	; 0x04
 4f2:	3d 81       	ldd	r19, Y+5	; 0x05
 4f4:	24 35       	cpi	r18, 0x54	; 84
 4f6:	31 05       	cpc	r19, r1
 4f8:	01 f0       	breq	.+0      	; 0x4fa <cmd_dataHandler+0x440>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <cmd_dataHandler+0x442>
 4fc:	8c 81       	ldd	r24, Y+4	; 0x04
 4fe:	9d 81       	ldd	r25, Y+5	; 0x05
 500:	86 36       	cpi	r24, 0x66	; 102
 502:	91 05       	cpc	r25, r1
 504:	01 f0       	breq	.+0      	; 0x506 <cmd_dataHandler+0x44c>
 506:	2c 81       	ldd	r18, Y+4	; 0x04
 508:	3d 81       	ldd	r19, Y+5	; 0x05
 50a:	29 36       	cpi	r18, 0x69	; 105
 50c:	31 05       	cpc	r19, r1
 50e:	01 f0       	breq	.+0      	; 0x510 <cmd_dataHandler+0x456>
 510:	00 c0       	rjmp	.+0      	; 0x512 <cmd_dataHandler+0x458>
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	9d 81       	ldd	r25, Y+5	; 0x05
 516:	85 37       	cpi	r24, 0x75	; 117
 518:	91 05       	cpc	r25, r1
 51a:	04 f4       	brge	.+0      	; 0x51c <cmd_dataHandler+0x462>
 51c:	2c 81       	ldd	r18, Y+4	; 0x04
 51e:	3d 81       	ldd	r19, Y+5	; 0x05
 520:	22 37       	cpi	r18, 0x72	; 114
 522:	31 05       	cpc	r19, r1
 524:	04 f4       	brge	.+0      	; 0x526 <cmd_dataHandler+0x46c>
 526:	8c 81       	ldd	r24, Y+4	; 0x04
 528:	9d 81       	ldd	r25, Y+5	; 0x05
 52a:	8d 36       	cpi	r24, 0x6D	; 109
 52c:	91 05       	cpc	r25, r1
 52e:	01 f0       	breq	.+0      	; 0x530 <cmd_dataHandler+0x476>
 530:	2c 81       	ldd	r18, Y+4	; 0x04
 532:	3d 81       	ldd	r19, Y+5	; 0x05
 534:	20 37       	cpi	r18, 0x70	; 112
 536:	31 05       	cpc	r19, r1
 538:	01 f0       	breq	.+0      	; 0x53a <cmd_dataHandler+0x480>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <cmd_dataHandler+0x482>
 53c:	8c 81       	ldd	r24, Y+4	; 0x04
 53e:	9d 81       	ldd	r25, Y+5	; 0x05
 540:	8a 37       	cpi	r24, 0x7A	; 122
 542:	91 05       	cpc	r25, r1
 544:	01 f0       	breq	.+0      	; 0x546 <cmd_dataHandler+0x48c>
 546:	00 c0       	rjmp	.+0      	; 0x548 <cmd_dataHandler+0x48e>
    {
    case 'a':
    case 'A':
    case 'b':
    case 'B':
    case 'c':
    case 'C':
    case 'd':
    case 'D':
    case 'f':
    case 'F':
    case 'i':
    case 'I':
    case 'm':
    case 'M':
    case 'R':
    case '!':
        command = input;
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining = 1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 00 00 	sts	0x0000, r24
        break;
 554:	00 c0       	rjmp	.+0      	; 0x556 <cmd_dataHandler+0x49c>
        
    case 'p':
    case 'P':
    case 'l':
    case 'L':
        command = input;
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining = 2;
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	80 93 00 00 	sts	0x0000, r24
        break;
 562:	00 c0       	rjmp	.+0      	; 0x564 <cmd_dataHandler+0x4aa>
      
    case 'r':
    case 's':
    case 't':
    case 'T':
    case 'z':
        command = input;
 564:	8a 81       	ldd	r24, Y+2	; 0x02
 566:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining = 3;
 56a:	83 e0       	ldi	r24, 0x03	; 3
 56c:	80 93 00 00 	sts	0x0000, r24
        break;
 570:	00 c0       	rjmp	.+0      	; 0x572 <cmd_dataHandler+0x4b8>
        
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
        command = input;
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining = 2;
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	80 93 00 00 	sts	0x0000, r24
        break;
 57e:	00 c0       	rjmp	.+0      	; 0x580 <cmd_dataHandler+0x4c6>
        
    case '*': 
        _wdt_write(1);
 580:	88 e1       	ldi	r24, 0x18	; 24
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	29 e0       	ldi	r18, 0x09	; 9
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	a8 95       	wdr
 58c:	80 93 60 00 	sts	0x0060, r24
 590:	0f be       	out	0x3f, r0	; 63
 592:	20 93 60 00 	sts	0x0060, r18
        break;
 596:	00 c0       	rjmp	.+0      	; 0x598 <cmd_dataHandler+0x4de>
                                /* manual invocation of timer handler */
    case '/ ':
        dm_timerHandler();
        command = 0;
        break;
    case '+':                   /* toggle auto timer handler */
        disploop = !disploop;
 598:	80 91 00 00 	lds	r24, 0x0000
 59c:	1b 82       	std	Y+3, r1	; 0x03
 59e:	88 23       	and	r24, r24
 5a0:	01 f4       	brne	.+0      	; 0x5a2 <cmd_dataHandler+0x4e8>
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	9b 83       	std	Y+3, r25	; 0x03
 5a6:	2b 81       	ldd	r18, Y+3	; 0x03
 5a8:	20 93 00 00 	sts	0x0000, r18
        break;
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <cmd_dataHandler+0x4f4>
        
    default:
        command = 0;
 5ae:	10 92 00 00 	sts	0x0000, r1
 5b2:	6a 96       	adiw	r28, 0x1a	; 26
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret
