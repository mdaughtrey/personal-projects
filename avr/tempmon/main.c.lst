
main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000384  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000003b8  2**0
                  ALLOC
  3 .stab         00000b70  00000000  00000000  000003b8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000b63  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <sensorInit>:

unsigned short sensorData[8];

void sensorInit(void)
{
    DDRE |= _BV(SENSOR0_CS_PIN);
   0:	6f 9a       	sbi	0x0d, 7	; 13
    PORTE |= _BV(SENSOR0_CS_PIN); 
   2:	77 9a       	sbi	0x0e, 7	; 14
    DDRB = 0xf0; // 1111 0000 Sensors 1,2,3,4
   4:	80 ef       	ldi	r24, 0xF0	; 240
   6:	84 b9       	out	0x04, r24	; 4
    PORTB |= 0xf0;
   8:	85 b1       	in	r24, 0x05	; 5
   a:	80 6f       	ori	r24, 0xF0	; 240
   c:	85 b9       	out	0x05, r24	; 5
    DDRG |= _BV(SENSOR5_CS_PIN) | _BV(SENSOR6_CS_PIN);
   e:	83 b3       	in	r24, 0x13	; 19
  10:	88 61       	ori	r24, 0x18	; 24
  12:	83 bb       	out	0x13, r24	; 19
    PORTG |= _BV(SENSOR5_CS_PIN) | _BV(SENSOR6_CS_PIN);
  14:	84 b3       	in	r24, 0x14	; 20
  16:	88 61       	ori	r24, 0x18	; 24
  18:	84 bb       	out	0x14, r24	; 20
    DDRC |= _BV(SENSOR7_CS_PIN);
  1a:	38 9a       	sbi	0x07, 0	; 7
    PORTC |= _BV(SENSOR7_CS_PIN);
  1c:	40 9a       	sbi	0x08, 0	; 8
  1e:	08 95       	ret

00000020 <readSensorRaw>:
}

unsigned short readSensorRaw(unsigned char which)
{
  20:	28 2f       	mov	r18, r24
    unsigned short data = 0;
    unsigned char count;
    SENSOR_SCKHIGH;
  22:	8e 9a       	sbi	0x11, 6	; 17
    switch (which)
  24:	83 30       	cpi	r24, 0x03	; 3
  26:	01 f0       	breq	.+0      	; 0x28 <readSensorRaw+0x8>
  28:	84 30       	cpi	r24, 0x04	; 4
  2a:	00 f4       	brcc	.+0      	; 0x2c <readSensorRaw+0xc>
  2c:	81 30       	cpi	r24, 0x01	; 1
  2e:	01 f0       	breq	.+0      	; 0x30 <readSensorRaw+0x10>
  30:	82 30       	cpi	r24, 0x02	; 2
  32:	00 f4       	brcc	.+0      	; 0x34 <readSensorRaw+0x14>
  34:	00 c0       	rjmp	.+0      	; 0x36 <readSensorRaw+0x16>
  36:	85 30       	cpi	r24, 0x05	; 5
  38:	01 f0       	breq	.+0      	; 0x3a <readSensorRaw+0x1a>
  3a:	85 30       	cpi	r24, 0x05	; 5
  3c:	00 f0       	brcs	.+0      	; 0x3e <readSensorRaw+0x1e>
  3e:	86 30       	cpi	r24, 0x06	; 6
  40:	01 f0       	breq	.+0      	; 0x42 <readSensorRaw+0x22>
  42:	87 30       	cpi	r24, 0x07	; 7
  44:	01 f0       	breq	.+0      	; 0x46 <readSensorRaw+0x26>
  46:	00 c0       	rjmp	.+0      	; 0x48 <readSensorRaw+0x28>
    {
            case 0: SENSOR0_CSLOW; break;
  48:	77 98       	cbi	0x0e, 7	; 14
  4a:	00 c0       	rjmp	.+0      	; 0x4c <readSensorRaw+0x2c>
            case 1: SENSOR1_CSLOW; break;
  4c:	2c 98       	cbi	0x05, 4	; 5
  4e:	00 c0       	rjmp	.+0      	; 0x50 <readSensorRaw+0x30>
            case 2: SENSOR2_CSLOW; break;
  50:	2d 98       	cbi	0x05, 5	; 5
  52:	00 c0       	rjmp	.+0      	; 0x54 <readSensorRaw+0x34>
            case 3: SENSOR3_CSLOW; break;
  54:	2e 98       	cbi	0x05, 6	; 5
  56:	00 c0       	rjmp	.+0      	; 0x58 <readSensorRaw+0x38>
            case 4: SENSOR4_CSLOW; break;
  58:	2f 98       	cbi	0x05, 7	; 5
  5a:	00 c0       	rjmp	.+0      	; 0x5c <readSensorRaw+0x3c>
            case 5: SENSOR5_CSLOW; break;
  5c:	a3 98       	cbi	0x14, 3	; 20
  5e:	00 c0       	rjmp	.+0      	; 0x60 <readSensorRaw+0x40>
            case 6: SENSOR6_CSLOW; break;
  60:	a4 98       	cbi	0x14, 4	; 20
  62:	00 c0       	rjmp	.+0      	; 0x64 <readSensorRaw+0x44>
            case 7: SENSOR7_CSLOW; break;
  64:	40 98       	cbi	0x08, 0	; 8
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	50 e0       	ldi	r21, 0x00	; 0
  6a:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (count = 0; count < 16; count++)
    {
        SENSOR_SCKLOW;
  6c:	8e 98       	cbi	0x11, 6	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	88 ec       	ldi	r24, 0xC8	; 200
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	01 f4       	brne	.+0      	; 0x76 <readSensorRaw+0x56>
        _delay_us(100);
        data |= ((PINF & _BV(SENSOR_IO_PIN)) >> SENSOR_IO_PIN);
  76:	8f b1       	in	r24, 0x0f	; 15
  78:	99 27       	eor	r25, r25
  7a:	88 0f       	add	r24, r24
  7c:	89 2f       	mov	r24, r25
  7e:	88 1f       	adc	r24, r24
  80:	99 0b       	sbc	r25, r25
  82:	91 95       	neg	r25
  84:	48 2b       	or	r20, r24
  86:	59 2b       	or	r21, r25
        SENSOR_SCKHIGH;
  88:	8e 9a       	sbi	0x11, 6	; 17
        data <<= 1;
  8a:	44 0f       	add	r20, r20
  8c:	55 1f       	adc	r21, r21
            case 4: SENSOR4_CSLOW; break;
            case 5: SENSOR5_CSLOW; break;
            case 6: SENSOR6_CSLOW; break;
            case 7: SENSOR7_CSLOW; break;
    }
    for (count = 0; count < 16; count++)
  8e:	3f 5f       	subi	r19, 0xFF	; 255
  90:	30 31       	cpi	r19, 0x10	; 16
  92:	01 f4       	brne	.+0      	; 0x94 <readSensorRaw+0x74>
        _delay_us(100);
        data |= ((PINF & _BV(SENSOR_IO_PIN)) >> SENSOR_IO_PIN);
        SENSOR_SCKHIGH;
        data <<= 1;
    }
    switch (which)
  94:	23 30       	cpi	r18, 0x03	; 3
  96:	01 f0       	breq	.+0      	; 0x98 <readSensorRaw+0x78>
  98:	24 30       	cpi	r18, 0x04	; 4
  9a:	00 f4       	brcc	.+0      	; 0x9c <readSensorRaw+0x7c>
  9c:	21 30       	cpi	r18, 0x01	; 1
  9e:	01 f0       	breq	.+0      	; 0xa0 <readSensorRaw+0x80>
  a0:	22 30       	cpi	r18, 0x02	; 2
  a2:	00 f4       	brcc	.+0      	; 0xa4 <readSensorRaw+0x84>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <readSensorRaw+0x86>
  a6:	25 30       	cpi	r18, 0x05	; 5
  a8:	01 f0       	breq	.+0      	; 0xaa <readSensorRaw+0x8a>
  aa:	25 30       	cpi	r18, 0x05	; 5
  ac:	00 f0       	brcs	.+0      	; 0xae <readSensorRaw+0x8e>
  ae:	26 30       	cpi	r18, 0x06	; 6
  b0:	01 f0       	breq	.+0      	; 0xb2 <readSensorRaw+0x92>
  b2:	27 30       	cpi	r18, 0x07	; 7
  b4:	01 f4       	brne	.+0      	; 0xb6 <readSensorRaw+0x96>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <readSensorRaw+0x98>
    {
            case 0: SENSOR0_CSHIGH; break;
  b8:	77 9a       	sbi	0x0e, 7	; 14
  ba:	00 c0       	rjmp	.+0      	; 0xbc <readSensorRaw+0x9c>
            case 1: SENSOR1_CSHIGH; break;
  bc:	2c 9a       	sbi	0x05, 4	; 5
  be:	00 c0       	rjmp	.+0      	; 0xc0 <readSensorRaw+0xa0>
            case 2: SENSOR2_CSHIGH; break;
  c0:	2d 9a       	sbi	0x05, 5	; 5
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <readSensorRaw+0xa4>
            case 3: SENSOR3_CSHIGH; break;
  c4:	2e 9a       	sbi	0x05, 6	; 5
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <readSensorRaw+0xa8>
            case 4: SENSOR4_CSHIGH; break;
  c8:	2f 9a       	sbi	0x05, 7	; 5
  ca:	00 c0       	rjmp	.+0      	; 0xcc <readSensorRaw+0xac>
            case 5: SENSOR5_CSHIGH; break;
  cc:	a3 9a       	sbi	0x14, 3	; 20
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <readSensorRaw+0xb0>
            case 6: SENSOR6_CSHIGH; break;
  d0:	a4 9a       	sbi	0x14, 4	; 20
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <readSensorRaw+0xb4>
            case 7: SENSOR7_CSHIGH; break;
  d4:	40 9a       	sbi	0x08, 0	; 8
    }
    return data;
}
  d6:	ca 01       	movw	r24, r20
  d8:	08 95       	ret

000000da <readSensor>:

unsigned short readSensor(unsigned char which)
{
  da:	28 2f       	mov	r18, r24
    unsigned short data = 0;
    char count;
    SENSOR_SCKLOW;
  dc:	8e 98       	cbi	0x11, 6	; 17
    switch (which)
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	01 f0       	breq	.+0      	; 0xe2 <readSensor+0x8>
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	00 f4       	brcc	.+0      	; 0xe6 <readSensor+0xc>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	01 f0       	breq	.+0      	; 0xea <readSensor+0x10>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	00 f4       	brcc	.+0      	; 0xee <readSensor+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <readSensor+0x16>
  f0:	85 30       	cpi	r24, 0x05	; 5
  f2:	01 f0       	breq	.+0      	; 0xf4 <readSensor+0x1a>
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	00 f0       	brcs	.+0      	; 0xf8 <readSensor+0x1e>
  f8:	86 30       	cpi	r24, 0x06	; 6
  fa:	01 f0       	breq	.+0      	; 0xfc <readSensor+0x22>
  fc:	87 30       	cpi	r24, 0x07	; 7
  fe:	01 f0       	breq	.+0      	; 0x100 <readSensor+0x26>
 100:	00 c0       	rjmp	.+0      	; 0x102 <readSensor+0x28>
    {
            case 0: SENSOR0_CSLOW; break;
 102:	77 98       	cbi	0x0e, 7	; 14
 104:	00 c0       	rjmp	.+0      	; 0x106 <readSensor+0x2c>
            case 1: SENSOR1_CSLOW; break;
 106:	2c 98       	cbi	0x05, 4	; 5
 108:	00 c0       	rjmp	.+0      	; 0x10a <readSensor+0x30>
            case 2: SENSOR2_CSLOW; break;
 10a:	2d 98       	cbi	0x05, 5	; 5
 10c:	00 c0       	rjmp	.+0      	; 0x10e <readSensor+0x34>
            case 3: SENSOR3_CSLOW; break;
 10e:	2e 98       	cbi	0x05, 6	; 5
 110:	00 c0       	rjmp	.+0      	; 0x112 <readSensor+0x38>
            case 4: SENSOR4_CSLOW; break;
 112:	2f 98       	cbi	0x05, 7	; 5
 114:	00 c0       	rjmp	.+0      	; 0x116 <readSensor+0x3c>
            case 5: SENSOR5_CSLOW; break;
 116:	a3 98       	cbi	0x14, 3	; 20
 118:	00 c0       	rjmp	.+0      	; 0x11a <readSensor+0x40>
            case 6: SENSOR6_CSLOW; break;
 11a:	a4 98       	cbi	0x14, 4	; 20
 11c:	00 c0       	rjmp	.+0      	; 0x11e <readSensor+0x44>
            case 7: SENSOR7_CSLOW; break;
 11e:	40 98       	cbi	0x08, 0	; 8
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (count = 0; count < 13; count++)
    {
        data <<= 1;
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
        SENSOR_SCKHIGH;
 12a:	8e 9a       	sbi	0x11, 6	; 17
 12c:	80 ed       	ldi	r24, 0xD0	; 208
 12e:	97 e0       	ldi	r25, 0x07	; 7
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	01 f4       	brne	.+0      	; 0x134 <readSensor+0x5a>
        _delay_ms(1);
        data |= ((PINF & _BV(SENSOR_IO_PIN)) >> SENSOR_IO_PIN);
 134:	8f b1       	in	r24, 0x0f	; 15
 136:	99 27       	eor	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	89 2f       	mov	r24, r25
 13c:	88 1f       	adc	r24, r24
 13e:	99 0b       	sbc	r25, r25
 140:	91 95       	neg	r25
 142:	48 2b       	or	r20, r24
 144:	59 2b       	or	r21, r25
        SENSOR_SCKLOW;
 146:	8e 98       	cbi	0x11, 6	; 17
            case 4: SENSOR4_CSLOW; break;
            case 5: SENSOR5_CSLOW; break;
            case 6: SENSOR6_CSLOW; break;
            case 7: SENSOR7_CSLOW; break;
    }
    for (count = 0; count < 13; count++)
 148:	3f 5f       	subi	r19, 0xFF	; 255
 14a:	3d 30       	cpi	r19, 0x0D	; 13
 14c:	01 f4       	brne	.+0      	; 0x14e <readSensor+0x74>
        SENSOR_SCKHIGH;
        _delay_ms(1);
        data |= ((PINF & _BV(SENSOR_IO_PIN)) >> SENSOR_IO_PIN);
        SENSOR_SCKLOW;
    }
    switch (which)
 14e:	23 30       	cpi	r18, 0x03	; 3
 150:	01 f0       	breq	.+0      	; 0x152 <readSensor+0x78>
 152:	24 30       	cpi	r18, 0x04	; 4
 154:	00 f4       	brcc	.+0      	; 0x156 <readSensor+0x7c>
 156:	21 30       	cpi	r18, 0x01	; 1
 158:	01 f0       	breq	.+0      	; 0x15a <readSensor+0x80>
 15a:	22 30       	cpi	r18, 0x02	; 2
 15c:	00 f4       	brcc	.+0      	; 0x15e <readSensor+0x84>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <readSensor+0x86>
 160:	25 30       	cpi	r18, 0x05	; 5
 162:	01 f0       	breq	.+0      	; 0x164 <readSensor+0x8a>
 164:	25 30       	cpi	r18, 0x05	; 5
 166:	00 f0       	brcs	.+0      	; 0x168 <readSensor+0x8e>
 168:	26 30       	cpi	r18, 0x06	; 6
 16a:	01 f0       	breq	.+0      	; 0x16c <readSensor+0x92>
 16c:	27 30       	cpi	r18, 0x07	; 7
 16e:	01 f4       	brne	.+0      	; 0x170 <readSensor+0x96>
 170:	00 c0       	rjmp	.+0      	; 0x172 <readSensor+0x98>
    {
            case 0: SENSOR0_CSHIGH; break;
 172:	77 9a       	sbi	0x0e, 7	; 14
 174:	00 c0       	rjmp	.+0      	; 0x176 <readSensor+0x9c>
            case 1: SENSOR1_CSHIGH; break;
 176:	2c 9a       	sbi	0x05, 4	; 5
 178:	00 c0       	rjmp	.+0      	; 0x17a <readSensor+0xa0>
            case 2: SENSOR2_CSHIGH; break;
 17a:	2d 9a       	sbi	0x05, 5	; 5
 17c:	00 c0       	rjmp	.+0      	; 0x17e <readSensor+0xa4>
            case 3: SENSOR3_CSHIGH; break;
 17e:	2e 9a       	sbi	0x05, 6	; 5
 180:	00 c0       	rjmp	.+0      	; 0x182 <readSensor+0xa8>
            case 4: SENSOR4_CSHIGH; break;
 182:	2f 9a       	sbi	0x05, 7	; 5
 184:	00 c0       	rjmp	.+0      	; 0x186 <readSensor+0xac>
            case 5: SENSOR5_CSHIGH; break;
 186:	a3 9a       	sbi	0x14, 3	; 20
 188:	00 c0       	rjmp	.+0      	; 0x18a <readSensor+0xb0>
            case 6: SENSOR6_CSHIGH; break;
 18a:	a4 9a       	sbi	0x14, 4	; 20
 18c:	00 c0       	rjmp	.+0      	; 0x18e <readSensor+0xb4>
            case 7: SENSOR7_CSHIGH; break;
 18e:	40 9a       	sbi	0x08, 0	; 8
    }
    data &= 0x0fff;
    return data;
}
 190:	ca 01       	movw	r24, r20
 192:	9f 70       	andi	r25, 0x0F	; 15
 194:	08 95       	ret

00000196 <displayTemp>:
            lcdChar('0');
    }
}

unsigned char displayTemp(unsigned short data)
{
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	26 97       	sbiw	r28, 0x06	; 6
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
        char buffer[6];
        if (data & 0x01) data |= 0x02; // 1/16th of a degree
 1b2:	80 fd       	sbrc	r24, 0
 1b4:	82 60       	ori	r24, 0x02	; 2
        if (data & 0x02) data |= 0x04; // 1/8th
 1b6:	81 fd       	sbrc	r24, 1
 1b8:	84 60       	ori	r24, 0x04	; 4
        if (data & 0x04) data |= 0x08; // 1/4
 1ba:	82 fd       	sbrc	r24, 2
 1bc:	88 60       	ori	r24, 0x08	; 8
        if (data & 0x08) data |= 0x10; // 1/2
 1be:	83 fd       	sbrc	r24, 3
 1c0:	80 61       	ori	r24, 0x10	; 16
        if (data & 0x10) data |= 0x20; // 1
 1c2:	84 fd       	sbrc	r24, 4
 1c4:	80 62       	ori	r24, 0x20	; 32
        data >>= 4;
 1c6:	b4 e0       	ldi	r27, 0x04	; 4
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	ba 95       	dec	r27
 1ce:	01 f4       	brne	.+0      	; 0x1d0 <displayTemp+0x3a>
        data *= 18;
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	9c 01       	movw	r18, r24
 1d6:	f3 e0       	ldi	r31, 0x03	; 3
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	fa 95       	dec	r31
 1de:	01 f4       	brne	.+0      	; 0x1e0 <displayTemp+0x4a>
 1e0:	82 0f       	add	r24, r18
 1e2:	93 1f       	adc	r25, r19
        data += 320;
        data /= 10;
 1e4:	80 5c       	subi	r24, 0xC0	; 192
 1e6:	9e 4f       	sbci	r25, 0xFE	; 254
 1e8:	6a e0       	ldi	r22, 0x0A	; 10
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 1f0:	7b 01       	movw	r14, r22
        itoa(data, buffer, 10);
 1f2:	4a e0       	ldi	r20, 0x0A	; 10
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	8e 01       	movw	r16, r28
 1f8:	0f 5f       	subi	r16, 0xFF	; 255
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
 1fc:	b8 01       	movw	r22, r16
 1fe:	c7 01       	movw	r24, r14
 200:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdString(buffer);
 204:	c8 01       	movw	r24, r16
 206:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdChar(0xdf);
 20a:	8f ed       	ldi	r24, 0xDF	; 223
 20c:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdChar('F');
 210:	86 e4       	ldi	r24, 0x46	; 70
 212:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdChar(' ');
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdChar(' ');
 21c:	80 e2       	ldi	r24, 0x20	; 32
 21e:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        return data & 0xff;
}
 222:	8e 2d       	mov	r24, r14
 224:	99 27       	eor	r25, r25
 226:	26 96       	adiw	r28, 0x06	; 6
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	08 95       	ret

00000240 <lcdLoop>:

inline void lcdLoop(void)
{
        lcdLineCol(0,0,0);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[0] = readSensor(0));
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 250:	90 93 00 00 	sts	0x0000, r25
 254:	80 93 00 00 	sts	0x0000, r24
 258:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdLineCol(0,10,0);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	6a e0       	ldi	r22, 0x0A	; 10
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[1] = readSensor(1));
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 26c:	90 93 00 00 	sts	0x0000, r25
 270:	80 93 00 00 	sts	0x0000, r24
 274:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdLineCol(0,20,0);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	64 e1       	ldi	r22, 0x14	; 20
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[2] = readSensor(2));
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 288:	90 93 00 00 	sts	0x0000, r25
 28c:	80 93 00 00 	sts	0x0000, r24
 290:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdLineCol(0,30,0);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	6e e1       	ldi	r22, 0x1E	; 30
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[3] = readSensor(3));
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 2a4:	90 93 00 00 	sts	0x0000, r25
 2a8:	80 93 00 00 	sts	0x0000, r24
 2ac:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdLineCol(1,0,0);
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[4] = readSensor(4));
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 2c0:	90 93 00 00 	sts	0x0000, r25
 2c4:	80 93 00 00 	sts	0x0000, r24
 2c8:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdLineCol(1,10,0);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	6a e0       	ldi	r22, 0x0A	; 10
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[5] = readSensor(5));
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 2dc:	90 93 00 00 	sts	0x0000, r25
 2e0:	80 93 00 00 	sts	0x0000, r24
 2e4:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdLineCol(1,20,0);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	64 e1       	ldi	r22, 0x14	; 20
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[6] = readSensor(6));
 2f2:	86 e0       	ldi	r24, 0x06	; 6
 2f4:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 2f8:	90 93 00 00 	sts	0x0000, r25
 2fc:	80 93 00 00 	sts	0x0000, r24
 300:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        lcdLineCol(1,30,0);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	6e e1       	ldi	r22, 0x1E	; 30
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
        displayTemp(sensorData[7] = readSensor(7));
 30e:	87 e0       	ldi	r24, 0x07	; 7
 310:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 314:	90 93 00 00 	sts	0x0000, r25
 318:	80 93 00 00 	sts	0x0000, r24
 31c:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 320:	08 95       	ret

00000322 <main>:
}

int main(void)
{
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	de bf       	out	0x3e, r29	; 62
 328:	cd bf       	out	0x3d, r28	; 61
    lcdInit();
 32a:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
    lanInit();
 32e:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
    sensorInit();
 332:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
    while (1)
    {   
            lcdLoop();
 336:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
            lanLoop();
 33a:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <toBin>

00000340 <toBin>:
    data &= 0x0fff;
    return data;
}

void toBin(unsigned short data)
{
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	8c 01       	movw	r16, r24
 34a:	cf e0       	ldi	r28, 0x0F	; 15
 34c:	d0 e0       	ldi	r29, 0x00	; 0
    char ii;
    for (ii = 15; ii >= 0; ii--)
    {
        if (data & (1 << ii))
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0c 2e       	mov	r0, r28
 354:	00 c0       	rjmp	.+0      	; 0x356 <toBin+0x16>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	02 f4       	brpl	.+0      	; 0x35e <toBin+0x1e>
 35e:	80 23       	and	r24, r16
 360:	91 23       	and	r25, r17
 362:	89 2b       	or	r24, r25
 364:	01 f0       	breq	.+0      	; 0x366 <toBin+0x26>
            lcdChar('1');
 366:	81 e3       	ldi	r24, 0x31	; 49
 368:	00 c0       	rjmp	.+0      	; 0x36a <toBin+0x2a>
        else
            lcdChar('0');
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	0e 94 00 00 	call	0	; 0x0 <sensorInit>
 370:	21 97       	sbiw	r28, 0x01	; 1
}

void toBin(unsigned short data)
{
    char ii;
    for (ii = 15; ii >= 0; ii--)
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	cf 3f       	cpi	r28, 0xFF	; 255
 376:	d8 07       	cpc	r29, r24
 378:	01 f4       	brne	.+0      	; 0x37a <toBin+0x3a>
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret
