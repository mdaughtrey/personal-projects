
dmc40457.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b6  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002ea  2**0
                  ALLOC
  3 .stab         00000d8c  00000000  00000000  000002ec  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d0f  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000011  00000000  00000000  00001d87  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
Disassembly of section .text:

00000000 <e>:

char hexTable[] PROGMEM = "0123456789abcdef";

void e(void)
{
    E1HIGH;
   0:	8c 9a       	sbi	0x11, 4	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   2:	80 ed       	ldi	r24, 0xD0	; 208
   4:	97 e0       	ldi	r25, 0x07	; 7
   6:	fc 01       	movw	r30, r24
   8:	31 97       	sbiw	r30, 0x01	; 1
   a:	01 f4       	brne	.+0      	; 0xc <e+0xc>
    _delay_ms(1);
    E1LOW;
   c:	8c 98       	cbi	0x11, 4	; 17
   e:	01 97       	sbiw	r24, 0x01	; 1
  10:	01 f4       	brne	.+0      	; 0x12 <e+0x12>
  12:	08 95       	ret

00000014 <e2>:
    _delay_ms(1);
}

void e2(void)
{
    E2HIGH;
  14:	8d 9a       	sbi	0x11, 5	; 17
  16:	80 ed       	ldi	r24, 0xD0	; 208
  18:	97 e0       	ldi	r25, 0x07	; 7
  1a:	fc 01       	movw	r30, r24
  1c:	31 97       	sbiw	r30, 0x01	; 1
  1e:	01 f4       	brne	.+0      	; 0x20 <e2+0xc>
    _delay_ms(1);
    E2LOW;
  20:	8d 98       	cbi	0x11, 5	; 17
  22:	01 97       	sbiw	r24, 0x01	; 1
  24:	01 f4       	brne	.+0      	; 0x26 <e2+0x12>
  26:	08 95       	ret

00000028 <e4>:
    _delay_ms(1);
}

void e4(unsigned char data, unsigned char display)
{
  28:	1f 93       	push	r17
  2a:	cf 93       	push	r28
  2c:	df 93       	push	r29
  2e:	16 2f       	mov	r17, r22
        if (data & 0x10) D0HIGH; else D0LOW; 
  30:	c8 2f       	mov	r28, r24
  32:	dd 27       	eor	r29, r29
  34:	c4 ff       	sbrs	r28, 4
  36:	00 c0       	rjmp	.+0      	; 0x38 <e4+0x10>
  38:	73 9a       	sbi	0x0e, 3	; 14
  3a:	00 c0       	rjmp	.+0      	; 0x3c <e4+0x14>
  3c:	73 98       	cbi	0x0e, 3	; 14
        if (data & 0x20) D1HIGH; else D1LOW; 
  3e:	c5 ff       	sbrs	r28, 5
  40:	00 c0       	rjmp	.+0      	; 0x42 <e4+0x1a>
  42:	72 9a       	sbi	0x0e, 2	; 14
  44:	00 c0       	rjmp	.+0      	; 0x46 <e4+0x1e>
  46:	72 98       	cbi	0x0e, 2	; 14
        if (data & 0x40) D2HIGH; else D2LOW; 
  48:	c6 ff       	sbrs	r28, 6
  4a:	00 c0       	rjmp	.+0      	; 0x4c <e4+0x24>
  4c:	88 9a       	sbi	0x11, 0	; 17
  4e:	00 c0       	rjmp	.+0      	; 0x50 <e4+0x28>
  50:	88 98       	cbi	0x11, 0	; 17
        if (data & 0x80) D3HIGH; else D3LOW; 
  52:	87 ff       	sbrs	r24, 7
  54:	00 c0       	rjmp	.+0      	; 0x56 <e4+0x2e>
  56:	89 9a       	sbi	0x11, 1	; 17
  58:	00 c0       	rjmp	.+0      	; 0x5a <e4+0x32>
  5a:	89 98       	cbi	0x11, 1	; 17
        if (0 == display) e(); else e2();
  5c:	11 23       	and	r17, r17
  5e:	01 f4       	brne	.+0      	; 0x60 <e4+0x38>
  60:	0e 94 00 00 	call	0	; 0x0 <e>
  64:	00 c0       	rjmp	.+0      	; 0x66 <e4+0x3e>
  66:	0e 94 00 00 	call	0	; 0x0 <e>
        if (data & 0x01) D0HIGH; else D0LOW; 
  6a:	c0 ff       	sbrs	r28, 0
  6c:	00 c0       	rjmp	.+0      	; 0x6e <e4+0x46>
  6e:	73 9a       	sbi	0x0e, 3	; 14
  70:	00 c0       	rjmp	.+0      	; 0x72 <e4+0x4a>
  72:	73 98       	cbi	0x0e, 3	; 14
        if (data & 0x02) D1HIGH; else D1LOW; 
  74:	c1 ff       	sbrs	r28, 1
  76:	00 c0       	rjmp	.+0      	; 0x78 <e4+0x50>
  78:	72 9a       	sbi	0x0e, 2	; 14
  7a:	00 c0       	rjmp	.+0      	; 0x7c <e4+0x54>
  7c:	72 98       	cbi	0x0e, 2	; 14
        if (data & 0x04) D2HIGH; else D2LOW; 
  7e:	c2 ff       	sbrs	r28, 2
  80:	00 c0       	rjmp	.+0      	; 0x82 <e4+0x5a>
  82:	88 9a       	sbi	0x11, 0	; 17
  84:	00 c0       	rjmp	.+0      	; 0x86 <e4+0x5e>
  86:	88 98       	cbi	0x11, 0	; 17
        if (data & 0x08) D3HIGH; else D3LOW; 
  88:	c3 ff       	sbrs	r28, 3
  8a:	00 c0       	rjmp	.+0      	; 0x8c <e4+0x64>
  8c:	89 9a       	sbi	0x11, 1	; 17
  8e:	00 c0       	rjmp	.+0      	; 0x90 <e4+0x68>
  90:	89 98       	cbi	0x11, 1	; 17
        if (0 == display) e(); else e2();
  92:	11 23       	and	r17, r17
  94:	01 f4       	brne	.+0      	; 0x96 <e4+0x6e>
  96:	0e 94 00 00 	call	0	; 0x0 <e>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <e4+0x74>
  9c:	0e 94 00 00 	call	0	; 0x0 <e>
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	1f 91       	pop	r17
  a6:	08 95       	ret

000000a8 <lcdInit>:
}

void lcdInit(void)
{
    DDRE = 0x0c; // 0000 1100 data0 and data1 output
  a8:	8c e0       	ldi	r24, 0x0C	; 12
  aa:	8d b9       	out	0x0d, r24	; 13
    DDRF = 0x7f; // 0001 1111 sck,e,e2,rs,rw,data2,data3 output
  ac:	8f e7       	ldi	r24, 0x7F	; 127
  ae:	80 bb       	out	0x10, r24	; 16

    PORTE = 0;
  b0:	1e b8       	out	0x0e, r1	; 14
    PORTF = 0; 
  b2:	11 ba       	out	0x11, r1	; 17
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	9c e9       	ldi	r25, 0x9C	; 156
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	01 f4       	brne	.+0      	; 0xbc <lcdInit+0x14>
    _delay_ms(20);
    D1HIGH;
  bc:	72 9a       	sbi	0x0e, 2	; 14
    e();
  be:	0e 94 00 00 	call	0	; 0x0 <e>
    e2();
  c2:	0e 94 00 00 	call	0	; 0x0 <e>
    // 4-bit interface enabled
    e4(0x28, 0); // Set display lines and font
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	0e 94 00 00 	call	0	; 0x0 <e>
    e4(0x0e, 0); // display on
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	8e e0       	ldi	r24, 0x0E	; 14
  d2:	0e 94 00 00 	call	0	; 0x0 <e>
    e4(0x01, 0); // clear screen
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 00 00 	call	0	; 0x0 <e>
    e4(0x06, 0); // entry mode
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	0e 94 00 00 	call	0	; 0x0 <e>
    e4(0x28, 1); // Set display lines and font
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	88 e2       	ldi	r24, 0x28	; 40
  ea:	0e 94 00 00 	call	0	; 0x0 <e>
    e4(0x0e, 1); // display on
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	8e e0       	ldi	r24, 0x0E	; 14
  f2:	0e 94 00 00 	call	0	; 0x0 <e>
    e4(0x01, 1); // clear screen
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 00 00 	call	0	; 0x0 <e>
    e4(0x06, 1); // entry mode
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	0e 94 00 00 	call	0	; 0x0 <e>
 106:	08 95       	ret

00000108 <lcdChar2>:
}

inline void lcdChar2(unsigned char data)
{
    RSHIGH;
 108:	8b 9a       	sbi	0x11, 3	; 17
    e4(data, 1);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	0e 94 00 00 	call	0	; 0x0 <e>
    RSLOW;
 110:	8b 98       	cbi	0x11, 3	; 17
 112:	08 95       	ret

00000114 <lcdChar>:
}

inline void lcdChar(unsigned char data)
{
    RSHIGH;
 114:	8b 9a       	sbi	0x11, 3	; 17
    e4(data, 0);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	0e 94 00 00 	call	0	; 0x0 <e>
    RSLOW;
 11c:	8b 98       	cbi	0x11, 3	; 17
 11e:	08 95       	ret

00000120 <lcdStringPtr>:
}

void lcdStringPtr(unsigned char * string)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcdStringPtr+0x8>
    unsigned char ch;
    while (ch = pgm_read_byte_near(string))
    {
        lcdChar(ch);
 128:	0e 94 00 00 	call	0	; 0x0 <e>
        string++;
 12c:	21 96       	adiw	r28, 0x01	; 1
}

void lcdStringPtr(unsigned char * string)
{
    unsigned char ch;
    while (ch = pgm_read_byte_near(string))
 12e:	fe 01       	movw	r30, r28
 130:	84 91       	lpm	r24, Z
 132:	88 23       	and	r24, r24
 134:	01 f4       	brne	.+0      	; 0x136 <lcdStringPtr+0x16>
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <lcdStringPtr2>:
        string++;
    }
}

void lcdStringPtr2(unsigned char * string)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcdStringPtr2+0x8>
    unsigned char ch;
    while (ch = pgm_read_byte_near(string))
    {
        lcdChar2(ch);
 144:	0e 94 00 00 	call	0	; 0x0 <e>
        string++;
 148:	21 96       	adiw	r28, 0x01	; 1
}

void lcdStringPtr2(unsigned char * string)
{
    unsigned char ch;
    while (ch = pgm_read_byte_near(string))
 14a:	fe 01       	movw	r30, r28
 14c:	84 91       	lpm	r24, Z
 14e:	88 23       	and	r24, r24
 150:	01 f4       	brne	.+0      	; 0x152 <lcdStringPtr2+0x16>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <lcdString>:
        string++;
    }
}

void lcdString(char * string)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcdString+0x8>
    unsigned char ch;
    while (ch = *string)
    {
        lcdChar(ch);
 160:	0e 94 00 00 	call	0	; 0x0 <e>
        string++;
 164:	21 96       	adiw	r28, 0x01	; 1
}

void lcdString(char * string)
{
    unsigned char ch;
    while (ch = *string)
 166:	88 81       	ld	r24, Y
 168:	88 23       	and	r24, r24
 16a:	01 f4       	brne	.+0      	; 0x16c <lcdString+0x14>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcdString2>:
        string++;
    }
}

void lcdString2(char * string)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcdString2+0x8>
    unsigned char ch;
    while (ch = *string)
    {
        lcdChar2(ch);
 17a:	0e 94 00 00 	call	0	; 0x0 <e>
        string++;
 17e:	21 96       	adiw	r28, 0x01	; 1
}

void lcdString2(char * string)
{
    unsigned char ch;
    while (ch = *string)
 180:	88 81       	ld	r24, Y
 182:	88 23       	and	r24, r24
 184:	01 f4       	brne	.+0      	; 0x186 <lcdString2+0x14>
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <toHex>:
        string++;
    }
}

void toHex(unsigned short data)
{
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	8c 01       	movw	r16, r24
    lcdChar(pgm_read_byte_near(hexTable + ((data >> 12) & 0x0f)));
 196:	fc 01       	movw	r30, r24
 198:	ef 2f       	mov	r30, r31
 19a:	ff 27       	eor	r31, r31
 19c:	e2 95       	swap	r30
 19e:	ef 70       	andi	r30, 0x0F	; 15
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	e4 91       	lpm	r30, Z
 1aa:	8e 2f       	mov	r24, r30
 1ac:	0e 94 00 00 	call	0	; 0x0 <e>
    lcdChar(pgm_read_byte_near(hexTable + ((data >> 8) & 0x0f)));
 1b0:	e1 2f       	mov	r30, r17
 1b2:	ff 27       	eor	r31, r31
 1b4:	ef 70       	andi	r30, 0x0F	; 15
 1b6:	f0 70       	andi	r31, 0x00	; 0
 1b8:	ec 0f       	add	r30, r28
 1ba:	fd 1f       	adc	r31, r29
 1bc:	e4 91       	lpm	r30, Z
 1be:	8e 2f       	mov	r24, r30
 1c0:	0e 94 00 00 	call	0	; 0x0 <e>
    lcdChar(pgm_read_byte_near(hexTable + ((data >> 4) & 0x0f)));
 1c4:	f8 01       	movw	r30, r16
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	f6 95       	lsr	r31
 1ca:	e7 95       	ror	r30
 1cc:	8a 95       	dec	r24
 1ce:	01 f4       	brne	.+0      	; 0x1d0 <toHex+0x44>
 1d0:	ef 70       	andi	r30, 0x0F	; 15
 1d2:	f0 70       	andi	r31, 0x00	; 0
 1d4:	ec 0f       	add	r30, r28
 1d6:	fd 1f       	adc	r31, r29
 1d8:	e4 91       	lpm	r30, Z
 1da:	8e 2f       	mov	r24, r30
 1dc:	0e 94 00 00 	call	0	; 0x0 <e>
    lcdChar(pgm_read_byte_near(hexTable + (data & 0x0f)));
 1e0:	0f 70       	andi	r16, 0x0F	; 15
 1e2:	10 70       	andi	r17, 0x00	; 0
 1e4:	c0 0f       	add	r28, r16
 1e6:	d1 1f       	adc	r29, r17
 1e8:	fe 01       	movw	r30, r28
 1ea:	84 91       	lpm	r24, Z
 1ec:	0e 94 00 00 	call	0	; 0x0 <e>
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <toHex2>:
}

void toHex2(unsigned short data)
{
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	8c 01       	movw	r16, r24
    lcdChar2(pgm_read_byte_near(hexTable + ((data >> 12) & 0x0f)));
 204:	fc 01       	movw	r30, r24
 206:	ef 2f       	mov	r30, r31
 208:	ff 27       	eor	r31, r31
 20a:	e2 95       	swap	r30
 20c:	ef 70       	andi	r30, 0x0F	; 15
 20e:	c0 e0       	ldi	r28, 0x00	; 0
 210:	d0 e0       	ldi	r29, 0x00	; 0
 212:	ec 0f       	add	r30, r28
 214:	fd 1f       	adc	r31, r29
 216:	e4 91       	lpm	r30, Z
 218:	8e 2f       	mov	r24, r30
 21a:	0e 94 00 00 	call	0	; 0x0 <e>
    lcdChar2(pgm_read_byte_near(hexTable + ((data >> 8) & 0x0f)));
 21e:	e1 2f       	mov	r30, r17
 220:	ff 27       	eor	r31, r31
 222:	ef 70       	andi	r30, 0x0F	; 15
 224:	f0 70       	andi	r31, 0x00	; 0
 226:	ec 0f       	add	r30, r28
 228:	fd 1f       	adc	r31, r29
 22a:	e4 91       	lpm	r30, Z
 22c:	8e 2f       	mov	r24, r30
 22e:	0e 94 00 00 	call	0	; 0x0 <e>
    lcdChar2(pgm_read_byte_near(hexTable + ((data >> 4) & 0x0f)));
 232:	f8 01       	movw	r30, r16
 234:	34 e0       	ldi	r19, 0x04	; 4
 236:	f6 95       	lsr	r31
 238:	e7 95       	ror	r30
 23a:	3a 95       	dec	r19
 23c:	01 f4       	brne	.+0      	; 0x23e <toHex2+0x44>
 23e:	ef 70       	andi	r30, 0x0F	; 15
 240:	f0 70       	andi	r31, 0x00	; 0
 242:	ec 0f       	add	r30, r28
 244:	fd 1f       	adc	r31, r29
 246:	e4 91       	lpm	r30, Z
 248:	8e 2f       	mov	r24, r30
 24a:	0e 94 00 00 	call	0	; 0x0 <e>
    lcdChar2(pgm_read_byte_near(hexTable + (data & 0x0f)));
 24e:	0f 70       	andi	r16, 0x0F	; 15
 250:	10 70       	andi	r17, 0x00	; 0
 252:	c0 0f       	add	r28, r16
 254:	d1 1f       	adc	r29, r17
 256:	fe 01       	movw	r30, r28
 258:	84 91       	lpm	r24, Z
 25a:	0e 94 00 00 	call	0	; 0x0 <e>
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <byteToHex2>:
}

void byteToHex2(unsigned char data)
{
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	18 2f       	mov	r17, r24
    lcdChar2(pgm_read_byte_near(hexTable + ((data >> 4) & 0x0f)));
 270:	82 95       	swap	r24
 272:	8f 70       	andi	r24, 0x0F	; 15
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	fe 01       	movw	r30, r28
 27a:	e8 0f       	add	r30, r24
 27c:	f1 1d       	adc	r31, r1
 27e:	e4 91       	lpm	r30, Z
 280:	8e 2f       	mov	r24, r30
 282:	0e 94 00 00 	call	0	; 0x0 <e>
    lcdChar2(pgm_read_byte_near(hexTable + (data & 0x0f)));
 286:	1f 70       	andi	r17, 0x0F	; 15
 288:	c1 0f       	add	r28, r17
 28a:	d1 1d       	adc	r29, r1
 28c:	fe 01       	movw	r30, r28
 28e:	84 91       	lpm	r24, Z
 290:	0e 94 00 00 	call	0	; 0x0 <e>
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	08 95       	ret

0000029c <lcdLineCol>:
}


void lcdLineCol(unsigned char line, unsigned char col, unsigned char disp)
{
 29c:	96 2f       	mov	r25, r22
    col |= 0x80;
 29e:	90 68       	ori	r25, 0x80	; 128
    if (0 == line)
 2a0:	88 23       	and	r24, r24
 2a2:	01 f4       	brne	.+0      	; 0x2a4 <lcdLineCol+0x8>
            e4(col, disp);
 2a4:	64 2f       	mov	r22, r20
 2a6:	89 2f       	mov	r24, r25
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <lcdLineCol+0xe>
    else
            e4(0x40 + col, disp);
 2aa:	64 2f       	mov	r22, r20
 2ac:	89 2f       	mov	r24, r25
 2ae:	80 5c       	subi	r24, 0xC0	; 192
 2b0:	0e 94 00 00 	call	0	; 0x0 <e>
 2b4:	08 95       	ret
