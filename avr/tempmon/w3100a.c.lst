
w3100a.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000006d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000006d0  2**0
                  ALLOC
  3 .stab         000010d4  00000000  00000000  000006d0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000dff  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 0000001b  00000000  00000000  000025a3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
Disassembly of section .text:

00000000 <drwrite>:
char strDrain[] PROGMEM = "Drain   ";
char strBlank[] PROGMEM = "        ";

inline void drwrite(unsigned char data)
{
    LAN_CSLOW;
   0:	a2 98       	cbi	0x14, 2	; 20
    LAN_WRLOW;
   2:	44 98       	cbi	0x08, 4	; 8
    LAN_DATA_OUT;
   4:	9f ef       	ldi	r25, 0xFF	; 255
   6:	91 b9       	out	0x01, r25	; 1
    LAN_DATA = data;
   8:	82 b9       	out	0x02, r24	; 2
    LAN_WRHIGH;
   a:	44 9a       	sbi	0x08, 4	; 8
    LAN_CSHIGH;
   c:	a2 9a       	sbi	0x14, 2	; 20
    LAN_DATA_IN;
   e:	11 b8       	out	0x01, r1	; 1
  10:	08 95       	ret

00000012 <drread>:
}

unsigned char drread(void)
{
    unsigned char data;
    LAN_CSLOW;
  12:	a2 98       	cbi	0x14, 2	; 20
    LAN_RDLOW;
  14:	45 98       	cbi	0x08, 5	; 8
    LAN_RDHIGH;
  16:	45 9a       	sbi	0x08, 5	; 8
    data = LAN_GETDATA;
  18:	80 b1       	in	r24, 0x00	; 0
    LAN_CSHIGH;
  1a:	a2 9a       	sbi	0x14, 2	; 20
    return data;
}
  1c:	99 27       	eor	r25, r25
  1e:	08 95       	ret

00000020 <writeToRegister>:

void writeToRegister(unsigned int address, unsigned char data)
{
  20:	ff 92       	push	r15
  22:	0f 93       	push	r16
  24:	1f 93       	push	r17
  26:	8c 01       	movw	r16, r24
  28:	f6 2e       	mov	r15, r22
    LAN_ADDR_AR0;
  2a:	47 98       	cbi	0x08, 7	; 8
  2c:	46 9a       	sbi	0x08, 6	; 8
    drwrite((address & 0xff00) >> 8);
  2e:	81 2f       	mov	r24, r17
  30:	99 27       	eor	r25, r25
  32:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_AR1;
  36:	47 9a       	sbi	0x08, 7	; 8
  38:	46 98       	cbi	0x08, 6	; 8
    drwrite(address & 0xff);
  3a:	80 2f       	mov	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_DR;
  40:	47 9a       	sbi	0x08, 7	; 8
  42:	46 9a       	sbi	0x08, 6	; 8
    drwrite(data);
  44:	8f 2d       	mov	r24, r15
  46:	0e 94 00 00 	call	0	; 0x0 <drwrite>
  4a:	1f 91       	pop	r17
  4c:	0f 91       	pop	r16
  4e:	ff 90       	pop	r15
  50:	08 95       	ret

00000052 <readFromRegister32>:
}

unsigned long readFromRegister32(unsigned int address)
{
  52:	cf 92       	push	r12
  54:	df 92       	push	r13
  56:	ef 92       	push	r14
  58:	ff 92       	push	r15
  5a:	0f 93       	push	r16
  5c:	1f 93       	push	r17
  5e:	6c 01       	movw	r12, r24
    MultiType result;

    LAN_ADDR_AR0;
  60:	47 98       	cbi	0x08, 7	; 8
  62:	46 9a       	sbi	0x08, 6	; 8
    drwrite((address & 0xff00) >> 8);
  64:	8d 2d       	mov	r24, r13
  66:	99 27       	eor	r25, r25
  68:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_AR1;
  6c:	47 9a       	sbi	0x08, 7	; 8
  6e:	46 98       	cbi	0x08, 6	; 8
    drwrite(address & 0xff);
  70:	8c 2d       	mov	r24, r12
  72:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_OR;
  76:	47 98       	cbi	0x08, 7	; 8
  78:	46 98       	cbi	0x08, 6	; 8
    drwrite(0x81); // autoincrement
  7a:	81 e8       	ldi	r24, 0x81	; 129
  7c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_DR;
  80:	47 9a       	sbi	0x08, 7	; 8
  82:	46 9a       	sbi	0x08, 6	; 8
    result.asChar[3] = drread();
  84:	0e 94 00 00 	call	0	; 0x0 <drwrite>
  88:	18 2f       	mov	r17, r24
    result.asChar[2] = drread();
  8a:	0e 94 00 00 	call	0	; 0x0 <drwrite>
  8e:	08 2f       	mov	r16, r24
    result.asChar[1] = drread();
  90:	0e 94 00 00 	call	0	; 0x0 <drwrite>
  94:	f8 2e       	mov	r15, r24
    result.asChar[0] = drread();
  96:	0e 94 00 00 	call	0	; 0x0 <drwrite>
  9a:	e8 2e       	mov	r14, r24
    LAN_ADDR_OR;
  9c:	47 98       	cbi	0x08, 7	; 8
  9e:	46 98       	cbi	0x08, 6	; 8
    drwrite(0x80); // autoincrement off
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	8a 95       	dec	r24
  aa:	01 f4       	brne	.+0      	; 0xac <readFromRegister32+0x5a>
    _delay_us(2);
    return result.asLong;
}
  ac:	c8 01       	movw	r24, r16
  ae:	b7 01       	movw	r22, r14
  b0:	1f 91       	pop	r17
  b2:	0f 91       	pop	r16
  b4:	ff 90       	pop	r15
  b6:	ef 90       	pop	r14
  b8:	df 90       	pop	r13
  ba:	cf 90       	pop	r12
  bc:	08 95       	ret

000000be <writeToRegister32>:
void writeToRegister32(unsigned int address,
                unsigned char data0, 
                unsigned char data1, 
                unsigned char data2, 
                unsigned char data3) 
{
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	7c 01       	movw	r14, r24
  cc:	16 2f       	mov	r17, r22
  ce:	d4 2e       	mov	r13, r20
  d0:	c2 2e       	mov	r12, r18
    LAN_ADDR_AR0;
  d2:	47 98       	cbi	0x08, 7	; 8
  d4:	46 9a       	sbi	0x08, 6	; 8
    drwrite((address & 0xff00) >> 8);
  d6:	89 2f       	mov	r24, r25
  d8:	99 27       	eor	r25, r25
  da:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_AR1;
  de:	47 9a       	sbi	0x08, 7	; 8
  e0:	46 98       	cbi	0x08, 6	; 8
    drwrite(address & 0xff);
  e2:	8e 2d       	mov	r24, r14
  e4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_OR;
  e8:	47 98       	cbi	0x08, 7	; 8
  ea:	46 98       	cbi	0x08, 6	; 8
    drwrite(0x81); // autoincrement
  ec:	81 e8       	ldi	r24, 0x81	; 129
  ee:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_DR;
  f2:	47 9a       	sbi	0x08, 7	; 8
  f4:	46 9a       	sbi	0x08, 6	; 8
    drwrite(data0);
  f6:	81 2f       	mov	r24, r17
  f8:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    drwrite(data1);
  fc:	8d 2d       	mov	r24, r13
  fe:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    drwrite(data2);
 102:	8c 2d       	mov	r24, r12
 104:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    drwrite(data3);
 108:	80 2f       	mov	r24, r16
 10a:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_OR;
 10e:	47 98       	cbi	0x08, 7	; 8
 110:	46 98       	cbi	0x08, 6	; 8
    drwrite(0x80); // autoincrement off
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	8a 95       	dec	r24
 11c:	01 f4       	brne	.+0      	; 0x11e <writeToRegister32+0x60>
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	cf 90       	pop	r12
 12a:	08 95       	ret

0000012c <readFromRegister>:
    _delay_us(2);
}

unsigned char readFromRegister(unsigned int address)
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	8c 01       	movw	r16, r24
    LAN_ADDR_AR0;
 132:	47 98       	cbi	0x08, 7	; 8
 134:	46 9a       	sbi	0x08, 6	; 8
    drwrite((address & 0xff00) >> 8);
 136:	89 2f       	mov	r24, r25
 138:	99 27       	eor	r25, r25
 13a:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_AR1;
 13e:	47 9a       	sbi	0x08, 7	; 8
 140:	46 98       	cbi	0x08, 6	; 8
    drwrite(address & 0xff);
 142:	80 2f       	mov	r24, r16
 144:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    LAN_ADDR_DR;
 148:	47 9a       	sbi	0x08, 7	; 8
 14a:	46 9a       	sbi	0x08, 6	; 8
    return drread();
 14c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
}
 150:	99 27       	eor	r25, r25
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <sendData>:
    lcdLineCol(1, 30, 1);
    lcdStringPtr2(strBlank);
}

void sendData(void)
{
 158:	6f 92       	push	r6
 15a:	7f 92       	push	r7
 15c:	8f 92       	push	r8
 15e:	9f 92       	push	r9
 160:	af 92       	push	r10
 162:	bf 92       	push	r11
 164:	cf 92       	push	r12
 166:	df 92       	push	r13
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	28 97       	sbiw	r28, 0x08	; 8
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
    MultiType txAckAddr;
    unsigned char ii;

    readFromRegister(LAN_REG_SHADOW_C0_TXA);
 184:	82 ee       	ldi	r24, 0xE2	; 226
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 18c:	15 e0       	ldi	r17, 0x05	; 5
 18e:	81 2f       	mov	r24, r17
 190:	8a 95       	dec	r24
 192:	01 f4       	brne	.+0      	; 0x194 <sendData+0x3c>
    _delay_us(2);
    txAckAddr.asLong = readFromRegister32(LAN_REG_C0_TXA_PR);
 194:	88 e4       	ldi	r24, 0x48	; 72
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 19c:	4b 01       	movw	r8, r22
 19e:	5c 01       	movw	r10, r24
    readFromRegister(LAN_REG_SHADOW_C0_TXW);
 1a0:	80 ef       	ldi	r24, 0xF0	; 240
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 1a8:	1a 95       	dec	r17
 1aa:	01 f4       	brne	.+0      	; 0x1ac <sendData+0x54>
    _delay_us(2);
   txSendAddr.asLong = readFromRegister32(LAN_REG_C0_TXW_PR) & 0x1fff;
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 1b4:	7f 71       	andi	r23, 0x1F	; 31
 1b6:	80 70       	andi	r24, 0x00	; 0
 1b8:	90 70       	andi	r25, 0x00	; 0
 1ba:	60 93 00 00 	sts	0x0000, r22
 1be:	70 93 00 00 	sts	0x0000, r23
 1c2:	80 93 00 00 	sts	0x0000, r24
 1c6:	90 93 00 00 	sts	0x0000, r25
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	e5 2e       	mov	r14, r21
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	f5 2e       	mov	r15, r21

    for (ii = 0; ii < 8; ii++)
    {
            char buffer[8];
            memset(buffer, 0, 8);
 1d2:	6e 01       	movw	r12, r28
 1d4:	08 94       	sec
 1d6:	c1 1c       	adc	r12, r1
 1d8:	d1 1c       	adc	r13, r1
            itoa(sensorData[ii], buffer, 10);
            unsigned char jj;
            for (jj = 0; jj < 8 && buffer[jj]; jj++)
 1da:	49 e0       	ldi	r20, 0x09	; 9
 1dc:	64 2e       	mov	r6, r20
 1de:	71 2c       	mov	r7, r1
 1e0:	6c 0e       	add	r6, r28
 1e2:	7d 1e       	adc	r7, r29
   txSendAddr.asLong = readFromRegister32(LAN_REG_C0_TXW_PR) & 0x1fff;

    for (ii = 0; ii < 8; ii++)
    {
            char buffer[8];
            memset(buffer, 0, 8);
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	f6 01       	movw	r30, r12
 1e8:	11 92       	st	Z+, r1
 1ea:	8a 95       	dec	r24
 1ec:	01 f4       	brne	.+0      	; 0x1ee <sendData+0x96>
            itoa(sensorData[ii], buffer, 10);
 1ee:	4a e0       	ldi	r20, 0x0A	; 10
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	b6 01       	movw	r22, r12
 1f4:	f7 01       	movw	r30, r14
 1f6:	80 81       	ld	r24, Z
 1f8:	91 81       	ldd	r25, Z+1	; 0x01
 1fa:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 1fe:	86 01       	movw	r16, r12
 200:	00 c0       	rjmp	.+0      	; 0x202 <sendData+0xaa>
            unsigned char jj;
            for (jj = 0; jj < 8 && buffer[jj]; jj++)
            {
                writeToRegister(0x4000 + txSendAddr.asLong++, buffer[jj]);
 202:	80 91 00 00 	lds	r24, 0x0000
 206:	90 91 00 00 	lds	r25, 0x0000
 20a:	a0 91 00 00 	lds	r26, 0x0000
 20e:	b0 91 00 00 	lds	r27, 0x0000
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	a1 1d       	adc	r26, r1
 216:	b1 1d       	adc	r27, r1
 218:	80 93 00 00 	sts	0x0000, r24
 21c:	90 93 00 00 	sts	0x0000, r25
 220:	a0 93 00 00 	sts	0x0000, r26
 224:	b0 93 00 00 	sts	0x0000, r27
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	a1 09       	sbc	r26, r1
 22c:	b1 09       	sbc	r27, r1
 22e:	80 50       	subi	r24, 0x00	; 0
 230:	90 4c       	sbci	r25, 0xC0	; 192
 232:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
    {
            char buffer[8];
            memset(buffer, 0, 8);
            itoa(sensorData[ii], buffer, 10);
            unsigned char jj;
            for (jj = 0; jj < 8 && buffer[jj]; jj++)
 23a:	06 15       	cp	r16, r6
 23c:	17 05       	cpc	r17, r7
 23e:	01 f0       	breq	.+0      	; 0x240 <sendData+0xe8>
 240:	f8 01       	movw	r30, r16
 242:	60 81       	ld	r22, Z
 244:	66 23       	and	r22, r22
 246:	01 f4       	brne	.+0      	; 0x248 <sendData+0xf0>
            {
                writeToRegister(0x4000 + txSendAddr.asLong++, buffer[jj]);
            }
            writeToRegister(0x4000 + txSendAddr.asLong++, ',');
 248:	80 91 00 00 	lds	r24, 0x0000
 24c:	90 91 00 00 	lds	r25, 0x0000
 250:	a0 91 00 00 	lds	r26, 0x0000
 254:	b0 91 00 00 	lds	r27, 0x0000
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	a1 1d       	adc	r26, r1
 25c:	b1 1d       	adc	r27, r1
 25e:	80 93 00 00 	sts	0x0000, r24
 262:	90 93 00 00 	sts	0x0000, r25
 266:	a0 93 00 00 	sts	0x0000, r26
 26a:	b0 93 00 00 	sts	0x0000, r27
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	a1 09       	sbc	r26, r1
 272:	b1 09       	sbc	r27, r1
 274:	80 50       	subi	r24, 0x00	; 0
 276:	90 4c       	sbci	r25, 0xC0	; 192
 278:	6c e2       	ldi	r22, 0x2C	; 44
 27a:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	e8 0e       	add	r14, r24
 284:	f9 1e       	adc	r15, r25
    txAckAddr.asLong = readFromRegister32(LAN_REG_C0_TXA_PR);
    readFromRegister(LAN_REG_SHADOW_C0_TXW);
    _delay_us(2);
   txSendAddr.asLong = readFromRegister32(LAN_REG_C0_TXW_PR) & 0x1fff;

    for (ii = 0; ii < 8; ii++)
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	e9 16       	cp	r14, r25
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	f9 06       	cpc	r15, r25
 28e:	01 f0       	breq	.+0      	; 0x290 <sendData+0x138>
 290:	00 c0       	rjmp	.+0      	; 0x292 <sendData+0x13a>
            {
                writeToRegister(0x4000 + txSendAddr.asLong++, buffer[jj]);
            }
            writeToRegister(0x4000 + txSendAddr.asLong++, ',');
    }
    writeToRegister(0x4000 + txSendAddr.asLong++, '\r');
 292:	80 91 00 00 	lds	r24, 0x0000
 296:	90 91 00 00 	lds	r25, 0x0000
 29a:	a0 91 00 00 	lds	r26, 0x0000
 29e:	b0 91 00 00 	lds	r27, 0x0000
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	a1 1d       	adc	r26, r1
 2a6:	b1 1d       	adc	r27, r1
 2a8:	80 93 00 00 	sts	0x0000, r24
 2ac:	90 93 00 00 	sts	0x0000, r25
 2b0:	a0 93 00 00 	sts	0x0000, r26
 2b4:	b0 93 00 00 	sts	0x0000, r27
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	a1 09       	sbc	r26, r1
 2bc:	b1 09       	sbc	r27, r1
 2be:	80 50       	subi	r24, 0x00	; 0
 2c0:	90 4c       	sbci	r25, 0xC0	; 192
 2c2:	6d e0       	ldi	r22, 0x0D	; 13
 2c4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    writeToRegister(0x4000 + txSendAddr.asLong++, '\n');
 2c8:	80 91 00 00 	lds	r24, 0x0000
 2cc:	90 91 00 00 	lds	r25, 0x0000
 2d0:	a0 91 00 00 	lds	r26, 0x0000
 2d4:	b0 91 00 00 	lds	r27, 0x0000
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	a1 1d       	adc	r26, r1
 2dc:	b1 1d       	adc	r27, r1
 2de:	80 93 00 00 	sts	0x0000, r24
 2e2:	90 93 00 00 	sts	0x0000, r25
 2e6:	a0 93 00 00 	sts	0x0000, r26
 2ea:	b0 93 00 00 	sts	0x0000, r27
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	a1 09       	sbc	r26, r1
 2f2:	b1 09       	sbc	r27, r1
 2f4:	80 50       	subi	r24, 0x00	; 0
 2f6:	90 4c       	sbci	r25, 0xC0	; 192
 2f8:	6a e0       	ldi	r22, 0x0A	; 10
 2fa:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdLineCol(1, 10, 1);
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	6a e0       	ldi	r22, 0x0A	; 10
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    toHex2(lanSendCount++);
 308:	80 91 00 00 	lds	r24, 0x0000
 30c:	90 91 00 00 	lds	r25, 0x0000
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	90 93 00 00 	sts	0x0000, r25
 316:	80 93 00 00 	sts	0x0000, r24
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(':');
 320:	8a e3       	ldi	r24, 0x3A	; 58
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    toHex2(txSendAddr.asShort[0]);
 328:	80 91 00 00 	lds	r24, 0x0000
 32c:	90 91 00 00 	lds	r25, 0x0000
 330:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(':');
 334:	8a e3       	ldi	r24, 0x3A	; 58
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    toHex2(txAckAddr.asShort[0]);
 33c:	c4 01       	movw	r24, r8
 33e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // wait for pending sends
    while (readFromRegister(LAN_REG_C0_CR) & 0x20);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 34a:	85 fd       	sbrc	r24, 5
 34c:	00 c0       	rjmp	.+0      	; 0x34e <sendData+0x1f6>
    writeToRegister32(LAN_REG_C0_TXW_PR, txSendAddr.asChar[3], txSendAddr.asChar[2],
 34e:	00 91 00 00 	lds	r16, 0x0000
 352:	20 91 00 00 	lds	r18, 0x0000
 356:	40 91 00 00 	lds	r20, 0x0000
 35a:	60 91 00 00 	lds	r22, 0x0000
 35e:	80 e4       	ldi	r24, 0x40	; 64
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 00 00 	call	0	; 0x0 <drwrite>
        txSendAddr.asChar[1], txSendAddr.asChar[0]);
    writeToRegister(LAN_REG_C0_CR, 0x20); // send
 366:	60 e2       	ldi	r22, 0x20	; 32
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 370:	28 96       	adiw	r28, 0x08	; 8
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	bf 90       	pop	r11
 38e:	af 90       	pop	r10
 390:	9f 90       	pop	r9
 392:	8f 90       	pop	r8
 394:	7f 90       	pop	r7
 396:	6f 90       	pop	r6
 398:	08 95       	ret

0000039a <lanLoop>:
    
}


void lanLoop(void)
{
 39a:	1f 93       	push	r17
    unsigned char socketState = readFromRegister(LAN_REG_C0_SSR);
 39c:	80 ea       	ldi	r24, 0xA0	; 160
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 3a4:	18 2f       	mov	r17, r24
    lcdLineCol(1, 0, 1);
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    toHex2(socketState);
 3b0:	81 2f       	mov	r24, r17
 3b2:	99 27       	eor	r25, r25
 3b4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    switch (socketState)
 3b8:	11 23       	and	r17, r17
 3ba:	01 f0       	breq	.+0      	; 0x3bc <lanLoop+0x22>
 3bc:	16 30       	cpi	r17, 0x06	; 6
 3be:	01 f4       	brne	.+0      	; 0x3c0 <lanLoop+0x26>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lanLoop+0x28>
    {
            case 0x00: // closed 
                    // set up tx read, write and ack memory pointers
                    writeToRegister(LAN_REG_C0_SOPR, 0x01); // SOCK_STREAM(TCP)
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	81 ea       	ldi	r24, 0xA1	; 161
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 00 00 	call	0	; 0x0 <drwrite>
                    //
                    // This is the port number you want to make available for connection
                    // 
                    writeToRegister(LAN_REG_C0_SRCPORT0, 0x00);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	8e ea       	ldi	r24, 0xAE	; 174
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 00 00 	call	0	; 0x0 <drwrite>
                    writeToRegister(LAN_REG_C0_SRCPORT1, 23); // telnet
 3d6:	67 e1       	ldi	r22, 0x17	; 23
 3d8:	8f ea       	ldi	r24, 0xAF	; 175
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 00 00 	call	0	; 0x0 <drwrite>
                    writeToRegister(LAN_REG_C0_CR, 0x02); // sockinit
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 00 00 	call	0	; 0x0 <drwrite>
                    unsigned char isr;
                    while (0 == (isr = readFromRegister(LAN_REG_C0_ISR)));
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 3f2:	88 23       	and	r24, r24
 3f4:	01 f0       	breq	.+0      	; 0x3f6 <lanLoop+0x5c>
                    if (!(0x02 & isr))
 3f6:	81 ff       	sbrs	r24, 1
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <lanLoop+0x60>
                    {
                        break;
                    }
                    writeToRegister(LAN_REG_C0_ISR, 0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 00 00 	call	0	; 0x0 <drwrite>
                    writeToRegister(LAN_REG_C0_CR, 0x08); // enable listen
 404:	68 e0       	ldi	r22, 0x08	; 8
 406:	00 c0       	rjmp	.+0      	; 0x408 <lanLoop+0x6e>
                    break;
        
            case 0x06: // established
                    sendData();
 408:	0e 94 00 00 	call	0	; 0x0 <drwrite>
                    while (readFromRegister(LAN_REG_C0_CR) & 0x20);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 414:	85 fd       	sbrc	r24, 5
 416:	00 c0       	rjmp	.+0      	; 0x418 <lanLoop+0x7e>
                    writeToRegister(LAN_REG_C0_CR, 0x10); // close
 418:	60 e1       	ldi	r22, 0x10	; 16
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 422:	1f 91       	pop	r17
 424:	08 95       	ret

00000426 <drainQueue>:

void drainQueue(void)
{
    MultiType txAckAddr;

    lcdLineCol(1, 30, 1);
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	6e e1       	ldi	r22, 0x1E	; 30
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdStringPtr2(strDrain);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    do 
    {
            readFromRegister(LAN_REG_SHADOW_C0_TXA);
 438:	82 ee       	ldi	r24, 0xE2	; 226
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	8a 95       	dec	r24
 444:	01 f4       	brne	.+0      	; 0x446 <drainQueue+0x20>
            _delay_us(2);
            txAckAddr.asLong = readFromRegister32(LAN_REG_C0_TXA_PR);
 446:	88 e4       	ldi	r24, 0x48	; 72
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    } while (txSendAddr.asLong != txAckAddr.asLong);
 44e:	20 91 00 00 	lds	r18, 0x0000
 452:	30 91 00 00 	lds	r19, 0x0000
 456:	40 91 00 00 	lds	r20, 0x0000
 45a:	50 91 00 00 	lds	r21, 0x0000
 45e:	26 17       	cp	r18, r22
 460:	37 07       	cpc	r19, r23
 462:	48 07       	cpc	r20, r24
 464:	59 07       	cpc	r21, r25
 466:	01 f4       	brne	.+0      	; 0x468 <drainQueue+0x42>
    lcdLineCol(1, 30, 1);
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	6e e1       	ldi	r22, 0x1E	; 30
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdStringPtr2(strBlank);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 47a:	08 95       	ret

0000047c <dumpMACAddress>:
    lcdString2(buffer);
}

void dumpMACAddress(void)
{
    lcdStringPtr2(strMACHeader);
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    byteToHex2(readFromRegister(0x88));
 484:	88 e8       	ldi	r24, 0x88	; 136
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 48c:	99 27       	eor	r25, r25
 48e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(':');
 492:	8a e3       	ldi	r24, 0x3A	; 58
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    byteToHex2(readFromRegister(0x89));
 49a:	89 e8       	ldi	r24, 0x89	; 137
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 4a2:	99 27       	eor	r25, r25
 4a4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(':');
 4a8:	8a e3       	ldi	r24, 0x3A	; 58
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    byteToHex2(readFromRegister(0x8a));
 4b0:	8a e8       	ldi	r24, 0x8A	; 138
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 4b8:	99 27       	eor	r25, r25
 4ba:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(':');
 4be:	8a e3       	ldi	r24, 0x3A	; 58
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    byteToHex2(readFromRegister(0x8b));
 4c6:	8b e8       	ldi	r24, 0x8B	; 139
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 4ce:	99 27       	eor	r25, r25
 4d0:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(':');
 4d4:	8a e3       	ldi	r24, 0x3A	; 58
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    byteToHex2(readFromRegister(0x8c));
 4dc:	8c e8       	ldi	r24, 0x8C	; 140
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 4e4:	99 27       	eor	r25, r25
 4e6:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(':');
 4ea:	8a e3       	ldi	r24, 0x3A	; 58
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    byteToHex2(readFromRegister(0x8d));
 4f2:	8d e8       	ldi	r24, 0x8D	; 141
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 4fa:	99 27       	eor	r25, r25
 4fc:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 500:	08 95       	ret

00000502 <dumpIPAddress>:
    return drread();
}
    

void dumpIPAddress(void)
{
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	24 97       	sbiw	r28, 0x04	; 4
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
    char buffer[4];
    unsigned char data;
    lcdStringPtr2(strIPHeader);
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    itoa(readFromRegister(0x8e), buffer, 10);;
 522:	8e e8       	ldi	r24, 0x8E	; 142
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 52a:	4a e0       	ldi	r20, 0x0A	; 10
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	8e 01       	movw	r16, r28
 530:	0f 5f       	subi	r16, 0xFF	; 255
 532:	1f 4f       	sbci	r17, 0xFF	; 255
 534:	b8 01       	movw	r22, r16
 536:	99 27       	eor	r25, r25
 538:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdString2(buffer);
 53c:	c8 01       	movw	r24, r16
 53e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2('.');
 542:	8e e2       	ldi	r24, 0x2E	; 46
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    itoa(readFromRegister(0x8f), buffer, 10);
 54a:	8f e8       	ldi	r24, 0x8F	; 143
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 552:	4a e0       	ldi	r20, 0x0A	; 10
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	b8 01       	movw	r22, r16
 558:	99 27       	eor	r25, r25
 55a:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdString2(buffer);
 55e:	c8 01       	movw	r24, r16
 560:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2('.');
 564:	8e e2       	ldi	r24, 0x2E	; 46
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    itoa(readFromRegister(0x90), buffer, 10);
 56c:	80 e9       	ldi	r24, 0x90	; 144
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 574:	4a e0       	ldi	r20, 0x0A	; 10
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	b8 01       	movw	r22, r16
 57a:	99 27       	eor	r25, r25
 57c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdString2(buffer);
 580:	c8 01       	movw	r24, r16
 582:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2('.');
 586:	8e e2       	ldi	r24, 0x2E	; 46
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    itoa(readFromRegister(0x91), buffer, 10);
 58e:	81 e9       	ldi	r24, 0x91	; 145
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 596:	4a e0       	ldi	r20, 0x0A	; 10
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	b8 01       	movw	r22, r16
 59c:	99 27       	eor	r25, r25
 59e:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdString2(buffer);
 5a2:	c8 01       	movw	r24, r16
 5a4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 5a8:	24 96       	adiw	r28, 0x04	; 4
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <lanInit>:
    lcdChar2(':');
    byteToHex2(readFromRegister(0x8d));
}

void lanInit(void)
{
 5be:	0f 93       	push	r16
    DDR(LAN_CS_PORT) |= _BV(LAN_CS_PIN);
 5c0:	9a 9a       	sbi	0x13, 2	; 19
    DDR(LAN_RD_PORT) |= _BV(LAN_RD_PIN);
 5c2:	3d 9a       	sbi	0x07, 5	; 7
    DDR(LAN_WR_PORT) |= _BV(LAN_WR_PIN);
 5c4:	3c 9a       	sbi	0x07, 4	; 7
    DDR(LAN_A0_PORT) |= _BV(LAN_A0_PIN);
 5c6:	3e 9a       	sbi	0x07, 6	; 7
    DDR(LAN_A1_PORT) |= _BV(LAN_A1_PIN);
 5c8:	3f 9a       	sbi	0x07, 7	; 7
    DDR(LAN_RESET_PORT) |= _BV(LAN_RESET_PIN);
 5ca:	3b 9a       	sbi	0x07, 3	; 7
    LAN_RESETLOW;
 5cc:	43 98       	cbi	0x08, 3	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5ce:	80 ed       	ldi	r24, 0xD0	; 208
 5d0:	97 e0       	ldi	r25, 0x07	; 7
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	01 f4       	brne	.+0      	; 0x5d6 <lanInit+0x18>
    _delay_ms(1);
    LAN_CSHIGH;
 5d6:	a2 9a       	sbi	0x14, 2	; 20
    LAN_RDHIGH;
 5d8:	45 9a       	sbi	0x08, 5	; 8
    LAN_WRHIGH;
 5da:	44 9a       	sbi	0x08, 4	; 8
    LAN_RESETHIGH;
 5dc:	43 9a       	sbi	0x08, 3	; 8
    //
    // set up indirect interface
    //
    LAN_ADDR_OR;
 5de:	47 98       	cbi	0x08, 7	; 8
 5e0:	46 98       	cbi	0x08, 6	; 8
    drwrite(0x80); // 1000 0000 IND_EN + MSB/LSB
 5e2:	80 e8       	ldi	r24, 0x80	; 128
 5e4:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // Software reset
    //
    writeToRegister(LAN_REG_C0_CR, 0x80);
 5e8:	60 e8       	ldi	r22, 0x80	; 128
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // Set tx and rx buffer sizes
    // 
    writeToRegister(0x95, 0x03); // 8Kb rx buffer
 5f2:	63 e0       	ldi	r22, 0x03	; 3
 5f4:	85 e9       	ldi	r24, 0x95	; 149
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    writeToRegister(0x96, 0x03); // 8Kb tx buffer
 5fc:	63 e0       	ldi	r22, 0x03	; 3
 5fe:	86 e9       	ldi	r24, 0x96	; 150
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // Set up gateway address
    //
    writeToRegister32(0x80, 192, 168, 1, 1);
 606:	01 e0       	ldi	r16, 0x01	; 1
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	48 ea       	ldi	r20, 0xA8	; 168
 60c:	60 ec       	ldi	r22, 0xC0	; 192
 60e:	80 e8       	ldi	r24, 0x80	; 128
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // Set up Subnet mask
    //
    writeToRegister32(0x84, 255, 255, 255, 0);
 616:	00 e0       	ldi	r16, 0x00	; 0
 618:	2f ef       	ldi	r18, 0xFF	; 255
 61a:	4f ef       	ldi	r20, 0xFF	; 255
 61c:	6f ef       	ldi	r22, 0xFF	; 255
 61e:	84 e8       	ldi	r24, 0x84	; 132
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // MAC address
    //
    writeToRegister32(0x88, 0x00, 0x15, 0xf2, 0xbd);
 626:	0d eb       	ldi	r16, 0xBD	; 189
 628:	22 ef       	ldi	r18, 0xF2	; 242
 62a:	45 e1       	ldi	r20, 0x15	; 21
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	88 e8       	ldi	r24, 0x88	; 136
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    writeToRegister(0x8c, 0xdc);
 636:	6c ed       	ldi	r22, 0xDC	; 220
 638:	8c e8       	ldi	r24, 0x8C	; 140
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    writeToRegister(0x8d, 0x93);
 640:	63 e9       	ldi	r22, 0x93	; 147
 642:	8d e8       	ldi	r24, 0x8D	; 141
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // IP Address
    // 
    writeToRegister32(0x8e, 192, 168, 1, 96);
 64a:	00 e6       	ldi	r16, 0x60	; 96
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	48 ea       	ldi	r20, 0xA8	; 168
 650:	60 ec       	ldi	r22, 0xC0	; 192
 652:	8e e8       	ldi	r24, 0x8E	; 142
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    //
    // Sysinit
    // 
    writeToRegister(LAN_REG_C0_CR, 0x01);
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    while (!(readFromRegister(LAN_REG_C0_ISR) & 0x01));
 664:	84 e0       	ldi	r24, 0x04	; 4
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 00 00 	call	0	; 0x0 <drwrite>
 66c:	80 ff       	sbrs	r24, 0
 66e:	00 c0       	rjmp	.+0      	; 0x670 <lanInit+0xb2>
    dumpIPAddress();
 670:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lcdChar2(' ');
 674:	80 e2       	ldi	r24, 0x20	; 32
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    dumpMACAddress();
 67c:	0e 94 00 00 	call	0	; 0x0 <drwrite>
    lanSendCount = 0;
 680:	10 92 00 00 	sts	0x0000, r1
 684:	10 92 00 00 	sts	0x0000, r1
    txSendAddr.asLong = 0;
 688:	10 92 00 00 	sts	0x0000, r1
 68c:	10 92 00 00 	sts	0x0000, r1
 690:	10 92 00 00 	sts	0x0000, r1
 694:	10 92 00 00 	sts	0x0000, r1
 698:	0f 91       	pop	r16
 69a:	08 95       	ret
