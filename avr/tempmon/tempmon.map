Archive member included because of file (symbol)

/usr/avr/lib/libc.a(exit.o)   /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o (exit)
/usr/avr/lib/libc.a(itoa.o)   main.o (itoa)
/usr/avr/lib/libc.a(strrev.o)
                              /usr/avr/lib/libc.a(itoa.o) (strrev)
/usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_udivmodhi4.o)
                              main.o (__udivmodhi4)
/usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_exit.o)
                              /usr/avr/lib/libc.a(exit.o) (_exit)
/usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

txSendAddr          0x4               w3100a.o
sensorData          0x10              main.o
lanSendCount        0x2               w3100a.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
LOAD main.o
LOAD dmc40457.o
LOAD w3100a.o
LOAD /usr/avr/lib/libc.a
LOAD /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a
LOAD /usr/avr/lib/libc.a
LOAD /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0xe32
 *(.vectors)
 .vectors       0x00000000       0x5c /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000005c       0x11 dmc40457.o
                0x0000005c                hexTable
 .progmem.data  0x0000006d       0x1b w3100a.o
                0x00000076                strDrain
                0x00000071                strMACHeader
                0x0000006d                strIPHeader
                0x0000007f                strBlank
                0x00000088                . = ALIGN (0x2)
                0x00000088                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000088        0x0 linker stubs
 *(.trampolines*)
                0x00000088                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000088                __ctors_start = .
 *(.ctors)
                0x00000088                __ctors_end = .
                0x00000088                __dtors_start = .
 *(.dtors)
                0x00000088                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000088        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
                0x00000088                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000088        0xc /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000094       0x16 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_copy_data.o)
                0x00000094                __do_copy_data
 .init4         0x000000aa       0x10 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_clear_bss.o)
                0x000000aa                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000ba        0x8 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
 *(.init9)
 *(.text)
 .text          0x000000c2        0x4 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
                0x000000c2                __vector_22
                0x000000c2                __vector_1
                0x000000c2                __vector_12
                0x000000c2                __bad_interrupt
                0x000000c2                __vector_6
                0x000000c2                __vector_3
                0x000000c2                __vector_11
                0x000000c2                __vector_13
                0x000000c2                __vector_17
                0x000000c2                __vector_19
                0x000000c2                __vector_7
                0x000000c2                __vector_5
                0x000000c2                __vector_4
                0x000000c2                __vector_9
                0x000000c2                __vector_2
                0x000000c2                __vector_21
                0x000000c2                __vector_15
                0x000000c2                __vector_8
                0x000000c2                __vector_14
                0x000000c2                __vector_10
                0x000000c2                __vector_16
                0x000000c2                __vector_18
                0x000000c2                __vector_20
 .text          0x000000c6      0x384 main.o
                0x00000306                lcdLoop
                0x00000406                toBin
                0x0000025c                displayTemp
                0x000001a0                readSensor
                0x000000e6                readSensorRaw
                0x000003e8                main
                0x000000c6                sensorInit
 .text          0x0000044a      0x2b6 dmc40457.o
                0x00000552                lcdChar2
                0x000006e6                lcdLineCol
                0x000005bc                lcdString2
                0x000005d6                toHex
                0x0000056a                lcdStringPtr
                0x000006b2                byteToHex2
                0x000004f2                lcdInit
                0x00000586                lcdStringPtr2
                0x00000472                e4
                0x0000045e                e2
                0x000005a2                lcdString
                0x00000644                toHex2
                0x0000055e                lcdChar
                0x0000044a                e
 .text          0x00000700      0x69c w3100a.o
                0x000007be                writeToRegister32
                0x00000cbe                lanInit
                0x00000b7c                dumpMACAddress
                0x0000082c                readFromRegister
                0x00000720                writeToRegister
                0x00000a9a                lanLoop
                0x00000b26                drainQueue
                0x00000858                sendData
                0x00000c02                dumpIPAddress
                0x00000712                drread
                0x00000752                readFromRegister32
                0x00000700                drwrite
 .text          0x00000d9c        0x2 /usr/avr/lib/libc.a(exit.o)
                0x00000d9c                exit
 .text          0x00000d9e       0x46 /usr/avr/lib/libc.a(itoa.o)
                0x00000d9e                itoa
 .text          0x00000de4       0x24 /usr/avr/lib/libc.a(strrev.o)
                0x00000de4                strrev
 .text          0x00000e08        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_udivmodhi4.o)
 .text          0x00000e08        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_exit.o)
 .text          0x00000e08        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_copy_data.o)
 .text          0x00000e08        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_clear_bss.o)
                0x00000e08                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00000e08       0x28 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_udivmodhi4.o)
                0x00000e08                __udivmodhi4
 .text.libgcc   0x00000e30        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x00000e30        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000e30        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_clear_bss.o)
                0x00000e30                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000e30        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_exit.o)
                0x00000e30                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000e30        0x2 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00000e32                _etext = .

.data           0x00800100        0x0 load address 0x00000e32
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
 .data          0x00800100        0x0 main.o
 .data          0x00800100        0x0 dmc40457.o
 .data          0x00800100        0x0 w3100a.o
 .data          0x00800100        0x0 /usr/avr/lib/libc.a(exit.o)
 .data          0x00800100        0x0 /usr/avr/lib/libc.a(itoa.o)
 .data          0x00800100        0x0 /usr/avr/lib/libc.a(strrev.o)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_udivmodhi4.o)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_exit.o)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_copy_data.o)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800100                . = ALIGN (0x2)
                0x00800100                _edata = .
                0x00800100                PROVIDE (__data_end, .)

.bss            0x00800100       0x16 load address 0x00000e32
                0x00800100                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
 .bss           0x00800100        0x0 main.o
 .bss           0x00800100        0x0 dmc40457.o
 .bss           0x00800100        0x0 w3100a.o
 .bss           0x00800100        0x0 /usr/avr/lib/libc.a(exit.o)
 .bss           0x00800100        0x0 /usr/avr/lib/libc.a(itoa.o)
 .bss           0x00800100        0x0 /usr/avr/lib/libc.a(strrev.o)
 .bss           0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_udivmodhi4.o)
 .bss           0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_exit.o)
 .bss           0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_copy_data.o)
 .bss           0x00800100        0x0 /usr/lib/gcc/avr/4.2.2/avr5/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800100       0x10 main.o
                0x00800100                sensorData
 COMMON         0x00800110        0x6 w3100a.o
                0x00800110                txSendAddr
                0x00800114                lanSendCount
                0x00800116                PROVIDE (__bss_end, .)
                0x00000e32                __data_load_start = LOADADDR (.data)
                0x00000e32                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800116        0x0
                0x00800116                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800116                PROVIDE (__noinit_end, .)
                0x00800116                _end = .
                0x00800116                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x2b50
 *(.stab)
 .stab          0x00000000      0x378 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o
 .stab          0x00000378      0xb64 main.o
                                0xb70 (size before relaxing)
 .stab          0x00000edc      0xb40 dmc40457.o
                                0xd8c (size before relaxing)
 .stab          0x00001a1c      0xe88 w3100a.o
                               0x10d4 (size before relaxing)
 .stab          0x000028a4       0x24 /usr/avr/lib/libc.a(exit.o)
                                 0x30 (size before relaxing)
 .stab          0x000028c8      0x1b0 /usr/avr/lib/libc.a(itoa.o)
                                0x1bc (size before relaxing)
 .stab          0x00002a78       0xd8 /usr/avr/lib/libc.a(strrev.o)
                                 0xe4 (size before relaxing)

.stabstr        0x00000000     0x10a6
 *(.stabstr)
 .stabstr       0x00000000     0x10a6 /usr/lib/gcc/avr/4.2.2/../../../../avr/lib/avr5/crtm169.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(tempmon.out elf32-avr)
LOAD linker stubs
