
ihat.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000272  2**0
                  ALLOC
  3 .debug_abbrev 000001ca  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000540  00000000  00000000  0000043c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000029d  00000000  00000000  0000097c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .progmem.data 000001ef  00000000  00000000  00000c19  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_frame  00000040  00000000  00000000  00000e08  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_loc    000002af  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000b9  00000000  00000000  000010f7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  000011b0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_aranges 00000020  00000000  00000000  000011e8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_str    00000213  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <spiOut>:
unsigned char txStrShiftUpDown[] PROGMEM = { "s0u1s1d1s0u2s1d2s0u3s1d3s0u4s1d4s0u5s1d5s0u6s1d6a A !0!1" };
unsigned char txStrShiftLeftRight[] PROGMEM = { "s0l1s1r1s0l2s1r2s0l3s1r3s0l4s1r4a A !0!1" };

// msb first, sck low on idle, sample on leading edge
void spiOut(unsigned char dataleft, unsigned char dataright)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
    mosi_push_left(dataleft);
   a:	90 e0       	ldi	r25, 0x00	; 0
   c:	69 83       	std	Y+1, r22	; 0x01
   e:	0e 94 00 00 	call	0	; 0x0 <spiOut>
    mosi_push_right(dataright);
  12:	69 81       	ldd	r22, Y+1	; 0x01
  14:	86 2f       	mov	r24, r22
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	0e 94 00 00 	call	0	; 0x0 <spiOut>
}
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret

00000024 <pickTransform>:

unsigned char pickTransform(int random, unsigned char ** ptr)
{
  24:	fb 01       	movw	r30, r22
    switch (random % 6)
  26:	66 e0       	ldi	r22, 0x06	; 6
  28:	70 e0       	ldi	r23, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <spiOut>
  2e:	82 30       	cpi	r24, 0x02	; 2
  30:	91 05       	cpc	r25, r1
  32:	01 f0       	breq	.+0      	; 0x34 <pickTransform+0x10>
  34:	83 30       	cpi	r24, 0x03	; 3
  36:	91 05       	cpc	r25, r1
  38:	04 f4       	brge	.+0      	; 0x3a <pickTransform+0x16>
  3a:	00 97       	sbiw	r24, 0x00	; 0
  3c:	01 f0       	breq	.+0      	; 0x3e <pickTransform+0x1a>
  3e:	81 30       	cpi	r24, 0x01	; 1
  40:	91 05       	cpc	r25, r1
  42:	01 f4       	brne	.+0      	; 0x44 <pickTransform+0x20>
  44:	00 c0       	rjmp	.+0      	; 0x46 <pickTransform+0x22>
  46:	84 30       	cpi	r24, 0x04	; 4
  48:	91 05       	cpc	r25, r1
  4a:	01 f0       	breq	.+0      	; 0x4c <pickTransform+0x28>
  4c:	84 30       	cpi	r24, 0x04	; 4
  4e:	91 05       	cpc	r25, r1
  50:	04 f0       	brlt	.+0      	; 0x52 <pickTransform+0x2e>
  52:	85 30       	cpi	r24, 0x05	; 5
  54:	91 05       	cpc	r25, r1
  56:	01 f4       	brne	.+0      	; 0x58 <pickTransform+0x34>
  58:	00 c0       	rjmp	.+0      	; 0x5a <pickTransform+0x36>
    {
        case 0: *ptr = txStrShiftUp; return sizeof(txStrShiftUp);
  5a:	80 e0       	ldi	r24, 0x00	; 0
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pickTransform+0x3c>
        case 1: *ptr = txStrShiftDown; return sizeof(txStrShiftDown);
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	00 c0       	rjmp	.+0      	; 0x66 <pickTransform+0x42>
        case 2: *ptr = txStrShiftLeft; return sizeof(txStrShiftLeft);
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	00 c0       	rjmp	.+0      	; 0x6c <pickTransform+0x48>
        case 3: *ptr = txStrShiftRight; return sizeof(txStrShiftRight);
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	00 c0       	rjmp	.+0      	; 0x72 <pickTransform+0x4e>
        case 4: *ptr = txStrShiftLeftRight; return sizeof(txStrShiftLeftRight);
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	91 83       	std	Z+1, r25	; 0x01
  78:	80 83       	st	Z, r24
  7a:	89 e2       	ldi	r24, 0x29	; 41
  7c:	08 95       	ret
        case 5: *ptr = txStrShiftUpDown; return sizeof(txStrShiftUpDown);
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	91 83       	std	Z+1, r25	; 0x01
  84:	80 83       	st	Z, r24
  86:	89 e3       	ldi	r24, 0x39	; 57
  88:	08 95       	ret
    }
    return 0;
  8a:	80 e0       	ldi	r24, 0x00	; 0
}
  8c:	08 95       	ret

0000008e <main>:


int main(void)
{
  8e:	4f 92       	push	r4
  90:	5f 92       	push	r5
  92:	6f 92       	push	r6
  94:	7f 92       	push	r7
  96:	8f 92       	push	r8
  98:	9f 92       	push	r9
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	00 d0       	rcall	.+0      	; 0xb0 <main+0x22>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
    unsigned long x = 0;
    spi_init();
  b4:	0e 94 00 00 	call	0	; 0x0 <spiOut>
    // initialize

    spiOut('*', '*');
  b8:	8a e2       	ldi	r24, 0x2A	; 42
  ba:	6a e2       	ldi	r22, 0x2A	; 42
  bc:	0e 94 00 00 	call	0	; 0x0 <spiOut>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	90 e7       	ldi	r25, 0x70	; 112
  c4:	a2 e0       	ldi	r26, 0x02	; 2
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	a0 40       	sbci	r26, 0x00	; 0
  cc:	01 f4       	brne	.+0      	; 0xce <main+0x40>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x42>
  d0:	00 00       	nop
    _delay_ms(100);
    spiOut('L', 'L');
  d2:	8c e4       	ldi	r24, 0x4C	; 76
  d4:	6c e4       	ldi	r22, 0x4C	; 76
  d6:	0e 94 00 00 	call	0	; 0x0 <spiOut>
    spiOut('0', '0');
  da:	80 e3       	ldi	r24, 0x30	; 48
  dc:	60 e3       	ldi	r22, 0x30	; 48
  de:	0e 94 00 00 	call	0	; 0x0 <spiOut>
    spiOut('1', '1');
  e2:	81 e3       	ldi	r24, 0x31	; 49
  e4:	61 e3       	ldi	r22, 0x31	; 49
  e6:	0e 94 00 00 	call	0	; 0x0 <spiOut>
    spiOut('l', 'l');
  ea:	8c e6       	ldi	r24, 0x6C	; 108
  ec:	6c e6       	ldi	r22, 0x6C	; 108
  ee:	0e 94 00 00 	call	0	; 0x0 <spiOut>
    spiOut('0', '0');
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	60 e3       	ldi	r22, 0x30	; 48
  f6:	0e 94 00 00 	call	0	; 0x0 <spiOut>
    spiOut('1', '1');
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	61 e3       	ldi	r22, 0x31	; 49
  fe:	0e 94 00 00 	call	0	; 0x0 <spiOut>
}


int main(void)
{
    unsigned long x = 0;
 102:	ee 24       	eor	r14, r14
 104:	ff 24       	eor	r15, r15
 106:	87 01       	movw	r16, r14
    while (1)
    {
        // Pick a random message...
        unsigned char * ptr = text;
        x = x * 1664525L + 1013904223L;
        ptr += (x >> 17 & 0x7fff) % (sizeof(text)/4) * 4;
 108:	52 e3       	ldi	r21, 0x32	; 50
 10a:	45 2e       	mov	r4, r21
 10c:	51 2c       	mov	r5, r1
 10e:	61 2c       	mov	r6, r1
 110:	71 2c       	mov	r7, r1

        // Pick a random transform...
        unsigned char ii;
        unsigned char jj;
        x = x * 1664525L + 1013904223L;
        ii = pickTransform(x >> 17 & 0x7fff, &ptr);
 112:	6e 01       	movw	r12, r28
 114:	08 94       	sec
 116:	c1 1c       	adc	r12, r1
 118:	d1 1c       	adc	r13, r1
    spiOut('1', '1');
    while (1)
    {
        // Pick a random message...
        unsigned char * ptr = text;
        x = x * 1664525L + 1013904223L;
 11a:	c8 01       	movw	r24, r16
 11c:	b7 01       	movw	r22, r14
 11e:	2d e0       	ldi	r18, 0x0D	; 13
 120:	36 e6       	ldi	r19, 0x66	; 102
 122:	49 e1       	ldi	r20, 0x19	; 25
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	0e 94 00 00 	call	0	; 0x0 <spiOut>
 12a:	7b 01       	movw	r14, r22
 12c:	8c 01       	movw	r16, r24
 12e:	8f e5       	ldi	r24, 0x5F	; 95
 130:	93 ef       	ldi	r25, 0xF3	; 243
 132:	ae e6       	ldi	r26, 0x6E	; 110
 134:	bc e3       	ldi	r27, 0x3C	; 60
 136:	e8 0e       	add	r14, r24
 138:	f9 1e       	adc	r15, r25
 13a:	0a 1f       	adc	r16, r26
 13c:	1b 1f       	adc	r17, r27
        ptr += (x >> 17 & 0x7fff) % (sizeof(text)/4) * 4;
 13e:	c8 01       	movw	r24, r16
 140:	b7 01       	movw	r22, r14
 142:	41 e1       	ldi	r20, 0x11	; 17
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	77 95       	ror	r23
 14a:	67 95       	ror	r22
 14c:	4a 95       	dec	r20
 14e:	01 f4       	brne	.+0      	; 0x150 <main+0xc2>
 150:	a3 01       	movw	r20, r6
 152:	92 01       	movw	r18, r4
 154:	0e 94 00 00 	call	0	; 0x0 <spiOut>
 158:	fb 01       	movw	r30, r22
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	f0 40       	sbci	r31, 0x00	; 0
        
        unsigned char data1 = pgm_read_byte_near(ptr++);
 166:	9f 01       	movw	r18, r30
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	a4 90       	lpm	r10, Z+
        unsigned char data2 = pgm_read_byte_near(ptr++);
 16e:	a9 01       	movw	r20, r18
 170:	4f 5f       	subi	r20, 0xFF	; 255
 172:	5f 4f       	sbci	r21, 0xFF	; 255
 174:	f9 01       	movw	r30, r18
 176:	b4 90       	lpm	r11, Z+
        unsigned char data3 = pgm_read_byte_near(ptr++);
 178:	9a 01       	movw	r18, r20
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	fa 01       	movw	r30, r20
 180:	94 90       	lpm	r9, Z+
        unsigned char data4 = pgm_read_byte_near(ptr++);
 182:	d9 01       	movw	r26, r18
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	ba 83       	std	Y+2, r27	; 0x02
 188:	a9 83       	std	Y+1, r26	; 0x01
 18a:	f9 01       	movw	r30, r18
 18c:	84 90       	lpm	r8, Z+

        spiOut('a', 'a');
 18e:	81 e6       	ldi	r24, 0x61	; 97
 190:	61 e6       	ldi	r22, 0x61	; 97
 192:	0e 94 00 00 	call	0	; 0x0 <spiOut>
        spiOut(data1, data3);
 196:	8a 2d       	mov	r24, r10
 198:	69 2d       	mov	r22, r9
 19a:	0e 94 00 00 	call	0	; 0x0 <spiOut>
        spiOut('A', 'A');
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	61 e4       	ldi	r22, 0x41	; 65
 1a2:	0e 94 00 00 	call	0	; 0x0 <spiOut>
        spiOut(data2, data4);
 1a6:	8b 2d       	mov	r24, r11
 1a8:	68 2d       	mov	r22, r8
 1aa:	0e 94 00 00 	call	0	; 0x0 <spiOut>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	9d e3       	ldi	r25, 0x3D	; 61
 1b2:	a9 e4       	ldi	r26, 0x49	; 73
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	a0 40       	sbci	r26, 0x00	; 0
 1ba:	01 f4       	brne	.+0      	; 0x1bc <main+0x12e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x130>
 1be:	00 00       	nop
        _delay_ms(3000);

        // Pick a random transform...
        unsigned char ii;
        unsigned char jj;
        x = x * 1664525L + 1013904223L;
 1c0:	c8 01       	movw	r24, r16
 1c2:	b7 01       	movw	r22, r14
 1c4:	2d e0       	ldi	r18, 0x0D	; 13
 1c6:	36 e6       	ldi	r19, 0x66	; 102
 1c8:	49 e1       	ldi	r20, 0x19	; 25
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	0e 94 00 00 	call	0	; 0x0 <spiOut>
 1d0:	7b 01       	movw	r14, r22
 1d2:	8c 01       	movw	r16, r24
 1d4:	8f e5       	ldi	r24, 0x5F	; 95
 1d6:	93 ef       	ldi	r25, 0xF3	; 243
 1d8:	ae e6       	ldi	r26, 0x6E	; 110
 1da:	bc e3       	ldi	r27, 0x3C	; 60
 1dc:	e8 0e       	add	r14, r24
 1de:	f9 1e       	adc	r15, r25
 1e0:	0a 1f       	adc	r16, r26
 1e2:	1b 1f       	adc	r17, r27
        ii = pickTransform(x >> 17 & 0x7fff, &ptr);
 1e4:	d8 01       	movw	r26, r16
 1e6:	c7 01       	movw	r24, r14
 1e8:	21 e1       	ldi	r18, 0x11	; 17
 1ea:	b6 95       	lsr	r27
 1ec:	a7 95       	ror	r26
 1ee:	97 95       	ror	r25
 1f0:	87 95       	ror	r24
 1f2:	2a 95       	dec	r18
 1f4:	01 f4       	brne	.+0      	; 0x1f6 <main+0x168>
 1f6:	b6 01       	movw	r22, r12
 1f8:	0e 94 00 00 	call	0	; 0x0 <spiOut>
 1fc:	a8 2e       	mov	r10, r24

        for (jj = 0; jj < ii; jj++)
 1fe:	bb 24       	eor	r11, r11
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x174>
        {
            data1 = pgm_read_byte_near(ptr++);
 202:	e9 81       	ldd	r30, Y+1	; 0x01
 204:	fa 81       	ldd	r31, Y+2	; 0x02
 206:	9f 01       	movw	r18, r30
 208:	2f 5f       	subi	r18, 0xFF	; 255
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
 20c:	3a 83       	std	Y+2, r19	; 0x02
 20e:	29 83       	std	Y+1, r18	; 0x01
 210:	64 91       	lpm	r22, Z+
            spiOut(data1, data1);
 212:	86 2f       	mov	r24, r22
 214:	0e 94 00 00 	call	0	; 0x0 <spiOut>
 218:	af e1       	ldi	r26, 0x1F	; 31
 21a:	be e4       	ldi	r27, 0x4E	; 78
 21c:	11 97       	sbiw	r26, 0x01	; 1
 21e:	01 f4       	brne	.+0      	; 0x220 <main+0x192>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x194>
 222:	00 00       	nop
        unsigned char ii;
        unsigned char jj;
        x = x * 1664525L + 1013904223L;
        ii = pickTransform(x >> 17 & 0x7fff, &ptr);

        for (jj = 0; jj < ii; jj++)
 224:	b3 94       	inc	r11
 226:	ba 14       	cp	r11, r10
 228:	00 f0       	brcs	.+0      	; 0x22a <main+0x19c>
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	94 e3       	ldi	r25, 0x34	; 52
 22e:	ac e0       	ldi	r26, 0x0C	; 12
 230:	81 50       	subi	r24, 0x01	; 1
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	a0 40       	sbci	r26, 0x00	; 0
 236:	01 f4       	brne	.+0      	; 0x238 <main+0x1aa>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x1ac>
 23a:	00 00       	nop
            data1 = pgm_read_byte_near(ptr++);
            spiOut(data1, data1);
            _delay_ms(10);
        }
        _delay_ms(500);
    }
 23c:	00 c0       	rjmp	.+0      	; 0x23e <txStrShiftLeftRight+0x78>
