To add a voice annotation feature that stores text into a file associated with the picture, we will enhance the web application to allow voice input for annotations and then create a text file that contains this annotation, linking it to the corresponding image.



For simplicity, we will simulate saving the annotation in the form of a downloadable text file. Here is how you can expand the application to include this feature:



### HTML

```html

<!DOCTYPE html>

<html lang="en">

<head>

  <meta charset="UTF-8">

  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <title>Voice Controlled Camera with Annotations</title>

  <style>

    body {

      font-family: Arial, sans-serif;

      text-align: center;

      margin: 20px;

    }



    #imagePreview {

      margin-top: 20px;

      max-width: 100%;

      height: auto;

    }

  </style>

</head>

<body>



  <h1>Voice Controlled Camera with Annotations</h1>

  <button id="takePhoto">Take Photo</button>

  <input type="file" accept="image/*" capture="environment" id="cameraInput" style="display:none;">

  

  <div id="output"></div>

  <img id="imagePreview" src="" alt="Image Preview" hidden>

  

  <button id="addAnnotation" style="display: none;">Add Annotation</button>

  <a id="downloadLink" style="display: none;">Download Annotation</a>

  

  <script src="app.js"></script>

</body>

</html>

```



### JavaScript (app.js)

```javascript

document.addEventListener('DOMContentLoaded', () => {

  const takePhotoButton = document.getElementById('takePhoto');

  const cameraInput = document.getElementById('cameraInput');

  const imagePreview = document.getElementById('imagePreview');

  const output = document.getElementById('output');

  const addAnnotationButton = document.getElementById('addAnnotation');

  const downloadLink = document.getElementById('downloadLink');



  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();

  recognition.lang = 'en-US';

  recognition.continuous = false;

  recognition.interimResults = false;



  takePhotoButton.addEventListener('click', () => {

    cameraInput.click();

  });



  cameraInput.addEventListener('change', (event) => {

    const file = event.target.files[0];

    if (file) {

      const reader = new FileReader();



      reader.onload = function(e) {

        imagePreview.src = e.target.result;

        imagePreview.hidden = false;



        // Start voice recognition to name the picture

        output.textContent = 'Listening for image name...';

        recognition.start();

      };



      reader.readAsDataURL(file);

    }

  });



  recognition.onresult = (event) => {

    const name = event.results[0][0].transcript;

    output.textContent = `Image named: ${name}`;

    alert(`You named the image: ${name}`);

    recognition.stop(); 

    addAnnotationButton.style.display = 'inline';

    addAnnotationButton.onclick = () => startAnnotation(name);

  };



  recognition.onerror = (event) => {

    output.textContent = `Error occurred in recognition: ${event.error}`;

  };



  recognition.onspeechend = () => {

    recognition.stop();

  };



  function startAnnotation(imageName) {

    output.textContent = 'Listening for annotation...';

    recognition.start();



    recognition.onresult = (event) => {

      const annotation = event.results[0][0].transcript;

      output.textContent = `Annotation added: ${annotation}`;

      recognition.stop();

      saveAnnotation(imageName, annotation);

    };

  }



  function saveAnnotation(imageName, annotation) {

    const blob = new Blob([`Image: ${imageName}\nAnnotation: ${annotation}`], { type: 'text/plain' });

    const url = URL.createObjectURL(blob);

    downloadLink.href = url;

    downloadLink.download = `${imageName}_annotation.txt`;

    downloadLink.textContent = 'Download your annotation file';

    downloadLink.style.display = 'block';

  }

});

```



### Explanation:



1. **Additional UI Elements**: 

   - A button (`addAnnotationButton`) is added to start the annotation process, displayed after the image is named.

   - A link (`downloadLink`) is created to download the annotation as a text file.



2. **JavaScript**:

   - The `addAnnotationButton` is shown after naming an image, and prompts the user for a voice annotation.

   - Once the annotation is recorded, `saveAnnotation` creates a `Blob` with the image name and annotation, generating a URL for downloading this data as a text file.

   - The link for downloading the annotation file becomes visible, allowing the user to save the annotation locally.



The above code provides a basic framework, useful for experimenting with voice input and storing annotations. Future steps could involve more advanced data handling, such as integrating server-side storage if persistent annotation saving is required.




12,728ms
896t
1,081t




User



Run
Ctrl+‚èé
